
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c66  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000cfa  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a94  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000339  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069e  00000000  00000000  00003d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032b  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000712  00000000  00000000  00004947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <main>
  8a:	0c 94 31 06 	jmp	0xc62	; 0xc62 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
#include "macros.h"
#include "stand.h"
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
  96:	37 9a       	sbi	0x06, 7	; 6
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
	/***********************************/
}
  9c:	08 95       	ret

0000009e <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLEAR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
  a0:	34 9b       	sbis	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
  a4:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL); //reas the ADCL register
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);//read the whole register
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	return read_val ; // return the converted value
  b4:	08 95       	ret

000000b6 <DIO_vsetPINDir>:
#include "stand.h"
#include "GPIO.h"

void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
  b6:	82 34       	cpi	r24, 0x42	; 66
  b8:	51 f1       	breq	.+84     	; 0x10e <DIO_vsetPINDir+0x58>
  ba:	83 34       	cpi	r24, 0x43	; 67
  bc:	20 f4       	brcc	.+8      	; 0xc6 <DIO_vsetPINDir+0x10>
  be:	81 34       	cpi	r24, 0x41	; 65
  c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_vsetPINDir+0xe>
  c2:	7b c0       	rjmp	.+246    	; 0x1ba <DIO_vsetPINDir+0x104>
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_vsetPINDir+0x1e>
  c6:	83 34       	cpi	r24, 0x43	; 67
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_vsetPINDir+0x16>
  ca:	3e c0       	rjmp	.+124    	; 0x148 <DIO_vsetPINDir+0x92>
  cc:	84 34       	cpi	r24, 0x44	; 68
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_vsetPINDir+0x1c>
  d0:	74 c0       	rjmp	.+232    	; 0x1ba <DIO_vsetPINDir+0x104>
  d2:	57 c0       	rjmp	.+174    	; 0x182 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	69 f4       	brne	.+26     	; 0xf2 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ac 01       	movw	r20, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vsetPINDir+0x30>
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vsetPINDir+0x2c>
  ea:	ba 01       	movw	r22, r20
  ec:	62 2b       	or	r22, r18
  ee:	6a bb       	out	0x1a, r22	; 26
  f0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f2:	2a b3       	in	r18, 0x1a	; 26
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ac 01       	movw	r20, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x4a>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x46>
 104:	ba 01       	movw	r22, r20
 106:	60 95       	com	r22
 108:	62 23       	and	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	69 f4       	brne	.+26     	; 0x12c <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ac 01       	movw	r20, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDir+0x6a>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDir+0x66>
 124:	ba 01       	movw	r22, r20
 126:	62 2b       	or	r22, r18
 128:	67 bb       	out	0x17, r22	; 23
 12a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0x84>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x80>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vsetPINDir+0xa4>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vsetPINDir+0xa0>
 15e:	ba 01       	movw	r22, r20
 160:	62 2b       	or	r22, r18
 162:	64 bb       	out	0x14, r22	; 20
 164:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xbe>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xba>
 178:	ba 01       	movw	r22, r20
 17a:	60 95       	com	r22
 17c:	62 23       	and	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	69 f4       	brne	.+26     	; 0x1a0 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vsetPINDir+0xde>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vsetPINDir+0xda>
 198:	ba 01       	movw	r22, r20
 19a:	62 2b       	or	r22, r18
 19c:	61 bb       	out	0x11, r22	; 17
 19e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ac 01       	movw	r20, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0xf8>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0xf4>
 1b2:	ba 01       	movw	r22, r20
 1b4:	60 95       	com	r22
 1b6:	62 23       	and	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret

000001bc <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 1bc:	82 34       	cpi	r24, 0x42	; 66
 1be:	51 f1       	breq	.+84     	; 0x214 <DIO_write+0x58>
 1c0:	83 34       	cpi	r24, 0x43	; 67
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <DIO_write+0x10>
 1c4:	81 34       	cpi	r24, 0x41	; 65
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_write+0xe>
 1c8:	7b c0       	rjmp	.+246    	; 0x2c0 <DIO_write+0x104>
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <DIO_write+0x1e>
 1cc:	83 34       	cpi	r24, 0x43	; 67
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_write+0x16>
 1d0:	3e c0       	rjmp	.+124    	; 0x24e <DIO_write+0x92>
 1d2:	84 34       	cpi	r24, 0x44	; 68
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_write+0x1c>
 1d6:	74 c0       	rjmp	.+232    	; 0x2c0 <DIO_write+0x104>
 1d8:	57 c0       	rjmp	.+174    	; 0x288 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1de:	2b b3       	in	r18, 0x1b	; 27
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write+0x30>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write+0x2c>
 1f0:	ba 01       	movw	r22, r20
 1f2:	62 2b       	or	r22, r18
 1f4:	6b bb       	out	0x1b, r22	; 27
 1f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ac 01       	movw	r20, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_write+0x4a>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_write+0x46>
 20a:	ba 01       	movw	r22, r20
 20c:	60 95       	com	r22
 20e:	62 23       	and	r22, r18
 210:	6b bb       	out	0x1b, r22	; 27
 212:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write+0x6a>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write+0x66>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	68 bb       	out	0x18, r22	; 24
 230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x84>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x80>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	68 bb       	out	0x18, r22	; 24
 24c:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write+0xa4>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write+0xa0>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	65 bb       	out	0x15, r22	; 21
 26a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xbe>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xba>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	65 bb       	out	0x15, r22	; 21
 286:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 28c:	22 b3       	in	r18, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0xde>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0xda>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	62 bb       	out	0x12, r22	; 18
 2a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 2a6:	22 b3       	in	r18, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0xf8>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0xf4>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	62 bb       	out	0x12, r22	; 18
 2c0:	08 95       	ret

000002c2 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 2c2:	82 34       	cpi	r24, 0x42	; 66
 2c4:	f1 f0       	breq	.+60     	; 0x302 <DIO_u8read+0x40>
 2c6:	83 34       	cpi	r24, 0x43	; 67
 2c8:	20 f4       	brcc	.+8      	; 0x2d2 <DIO_u8read+0x10>
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_u8read+0xe>
 2ce:	4f c0       	rjmp	.+158    	; 0x36e <DIO_u8read+0xac>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <DIO_u8read+0x1c>
 2d2:	83 34       	cpi	r24, 0x43	; 67
 2d4:	41 f1       	breq	.+80     	; 0x326 <DIO_u8read+0x64>
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_u8read+0x1a>
 2da:	49 c0       	rjmp	.+146    	; 0x36e <DIO_u8read+0xac>
 2dc:	36 c0       	rjmp	.+108    	; 0x34a <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 2de:	29 b3       	in	r18, 0x19	; 25
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x2a>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x26>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x3a>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x36>
		break;
 300:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 302:	26 b3       	in	r18, 0x16	; 22
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x4e>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x4a>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x5e>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x5a>
		break;
 324:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 326:	23 b3       	in	r18, 0x13	; 19
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x72>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x6e>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0x82>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0x7e>
		break;
 348:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 34a:	20 b3       	in	r18, 0x10	; 16
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	06 2e       	mov	r0, r22
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8read+0x96>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8read+0x92>
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	82 23       	and	r24, r18
 360:	93 23       	and	r25, r19
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_u8read+0xa6>
 364:	95 95       	asr	r25
 366:	87 95       	ror	r24
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_u8read+0xa2>
		break;
 36c:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 36e:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 370:	08 95       	ret

00000372 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
	switch(portname)
 372:	82 34       	cpi	r24, 0x42	; 66
 374:	b9 f0       	breq	.+46     	; 0x3a4 <DIO_toggle+0x32>
 376:	83 34       	cpi	r24, 0x43	; 67
 378:	18 f4       	brcc	.+6      	; 0x380 <DIO_toggle+0xe>
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	c9 f5       	brne	.+114    	; 0x3f0 <DIO_toggle+0x7e>
 37e:	05 c0       	rjmp	.+10     	; 0x38a <DIO_toggle+0x18>
 380:	83 34       	cpi	r24, 0x43	; 67
 382:	e9 f0       	breq	.+58     	; 0x3be <DIO_toggle+0x4c>
 384:	84 34       	cpi	r24, 0x44	; 68
 386:	a1 f5       	brne	.+104    	; 0x3f0 <DIO_toggle+0x7e>
 388:	27 c0       	rjmp	.+78     	; 0x3d8 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 38a:	2b b3       	in	r18, 0x1b	; 27
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	ac 01       	movw	r20, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_toggle+0x26>
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_toggle+0x22>
 39c:	ba 01       	movw	r22, r20
 39e:	62 27       	eor	r22, r18
 3a0:	6b bb       	out	0x1b, r22	; 27
		break;
 3a2:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 3a4:	28 b3       	in	r18, 0x18	; 24
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_toggle+0x40>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_toggle+0x3c>
 3b6:	ba 01       	movw	r22, r20
 3b8:	62 27       	eor	r22, r18
 3ba:	68 bb       	out	0x18, r22	; 24
		break;
 3bc:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 3be:	25 b3       	in	r18, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	ac 01       	movw	r20, r24
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_toggle+0x5a>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_toggle+0x56>
 3d0:	ba 01       	movw	r22, r20
 3d2:	62 27       	eor	r22, r18
 3d4:	65 bb       	out	0x15, r22	; 21
		break;
 3d6:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3d8:	22 b3       	in	r18, 0x12	; 18
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_toggle+0x74>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_toggle+0x70>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	62 bb       	out	0x12, r22	; 18
 3f0:	08 95       	ret

000003f2 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 3f2:	82 34       	cpi	r24, 0x42	; 66
 3f4:	61 f0       	breq	.+24     	; 0x40e <DIO_write_port+0x1c>
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	18 f4       	brcc	.+6      	; 0x400 <DIO_write_port+0xe>
 3fa:	81 34       	cpi	r24, 0x41	; 65
 3fc:	69 f4       	brne	.+26     	; 0x418 <DIO_write_port+0x26>
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <DIO_write_port+0x18>
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	39 f0       	breq	.+14     	; 0x412 <DIO_write_port+0x20>
 404:	84 34       	cpi	r24, 0x44	; 68
 406:	41 f4       	brne	.+16     	; 0x418 <DIO_write_port+0x26>
 408:	06 c0       	rjmp	.+12     	; 0x416 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 40a:	6b bb       	out	0x1b, r22	; 27
		break ;
 40c:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 40e:	68 bb       	out	0x18, r22	; 24
		break ;
 410:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 412:	65 bb       	out	0x15, r22	; 21
		break ;
 414:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 416:	62 bb       	out	0x12, r22	; 18
 418:	08 95       	ret

0000041a <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(uint8 portname,uint8 value)
{
	switch(portname)
 41a:	82 34       	cpi	r24, 0x42	; 66
 41c:	79 f0       	breq	.+30     	; 0x43c <dio_write_highnibble+0x22>
 41e:	83 34       	cpi	r24, 0x43	; 67
 420:	18 f4       	brcc	.+6      	; 0x428 <dio_write_highnibble+0xe>
 422:	81 34       	cpi	r24, 0x41	; 65
 424:	c9 f4       	brne	.+50     	; 0x458 <dio_write_highnibble+0x3e>
 426:	05 c0       	rjmp	.+10     	; 0x432 <dio_write_highnibble+0x18>
 428:	83 34       	cpi	r24, 0x43	; 67
 42a:	69 f0       	breq	.+26     	; 0x446 <dio_write_highnibble+0x2c>
 42c:	84 34       	cpi	r24, 0x44	; 68
 42e:	a1 f4       	brne	.+40     	; 0x458 <dio_write_highnibble+0x3e>
 430:	0f c0       	rjmp	.+30     	; 0x450 <dio_write_highnibble+0x36>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
 432:	8b b3       	in	r24, 0x1b	; 27
 434:	60 7f       	andi	r22, 0xF0	; 240
 436:	68 2b       	or	r22, r24
 438:	6b bb       	out	0x1b, r22	; 27
		break ;
 43a:	08 95       	ret
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	60 7f       	andi	r22, 0xF0	; 240
 440:	68 2b       	or	r22, r24
 442:	68 bb       	out	0x18, r22	; 24
		break ;
 444:	08 95       	ret
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
 446:	85 b3       	in	r24, 0x15	; 21
 448:	60 7f       	andi	r22, 0xF0	; 240
 44a:	68 2b       	or	r22, r24
 44c:	65 bb       	out	0x15, r22	; 21
		break ;
 44e:	08 95       	ret
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
 450:	82 b3       	in	r24, 0x12	; 18
 452:	60 7f       	andi	r22, 0xF0	; 240
 454:	68 2b       	or	r22, r24
 456:	62 bb       	out	0x12, r22	; 18
 458:	08 95       	ret

0000045a <clear_high_nibble>:
	}
}

void clear_high_nibble(uint8 portname)
{
	switch(portname)
 45a:	82 34       	cpi	r24, 0x42	; 66
 45c:	71 f0       	breq	.+28     	; 0x47a <clear_high_nibble+0x20>
 45e:	83 34       	cpi	r24, 0x43	; 67
 460:	18 f4       	brcc	.+6      	; 0x468 <clear_high_nibble+0xe>
 462:	81 34       	cpi	r24, 0x41	; 65
 464:	a9 f4       	brne	.+42     	; 0x490 <clear_high_nibble+0x36>
 466:	05 c0       	rjmp	.+10     	; 0x472 <clear_high_nibble+0x18>
 468:	83 34       	cpi	r24, 0x43	; 67
 46a:	59 f0       	breq	.+22     	; 0x482 <clear_high_nibble+0x28>
 46c:	84 34       	cpi	r24, 0x44	; 68
 46e:	81 f4       	brne	.+32     	; 0x490 <clear_high_nibble+0x36>
 470:	0c c0       	rjmp	.+24     	; 0x48a <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
 472:	8b b3       	in	r24, 0x1b	; 27
 474:	8f 70       	andi	r24, 0x0F	; 15
 476:	8b bb       	out	0x1b, r24	; 27
		break ;
 478:	08 95       	ret
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
 47a:	88 b3       	in	r24, 0x18	; 24
 47c:	8f 70       	andi	r24, 0x0F	; 15
 47e:	88 bb       	out	0x18, r24	; 24
		break ;
 480:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
 482:	85 b3       	in	r24, 0x15	; 21
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	85 bb       	out	0x15, r24	; 21
		break ;
 488:	08 95       	ret
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
 48a:	82 b3       	in	r24, 0x12	; 18
 48c:	8f 70       	andi	r24, 0x0F	; 15
 48e:	82 bb       	out	0x12, r24	; 18
 490:	08 95       	ret

00000492 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
 492:	82 34       	cpi	r24, 0x42	; 66
 494:	79 f1       	breq	.+94     	; 0x4f4 <DIO_vconnectpullup+0x62>
 496:	83 34       	cpi	r24, 0x43	; 67
 498:	20 f4       	brcc	.+8      	; 0x4a2 <DIO_vconnectpullup+0x10>
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_vconnectpullup+0xe>
 49e:	8f c0       	rjmp	.+286    	; 0x5be <DIO_vconnectpullup+0x12c>
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <DIO_vconnectpullup+0x1e>
 4a2:	83 34       	cpi	r24, 0x43	; 67
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <DIO_vconnectpullup+0x16>
 4a6:	48 c0       	rjmp	.+144    	; 0x538 <DIO_vconnectpullup+0xa6>
 4a8:	84 34       	cpi	r24, 0x44	; 68
 4aa:	09 f0       	breq	.+2      	; 0x4ae <DIO_vconnectpullup+0x1c>
 4ac:	88 c0       	rjmp	.+272    	; 0x5be <DIO_vconnectpullup+0x12c>
 4ae:	66 c0       	rjmp	.+204    	; 0x57c <DIO_vconnectpullup+0xea>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
 4b0:	41 30       	cpi	r20, 0x01	; 1
 4b2:	91 f4       	brne	.+36     	; 0x4d8 <DIO_vconnectpullup+0x46>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRA,pinnumber);
 4b4:	2a b3       	in	r18, 0x1a	; 26
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ac 01       	movw	r20, r24
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_vconnectpullup+0x30>
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_vconnectpullup+0x2c>
 4c6:	ba 01       	movw	r22, r20
 4c8:	84 2f       	mov	r24, r20
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pinnumber);
 4d0:	8b b3       	in	r24, 0x1b	; 27
 4d2:	68 2b       	or	r22, r24
 4d4:	6b bb       	out	0x1b, r22	; 27
 4d6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 4d8:	2b b3       	in	r18, 0x1b	; 27
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ac 01       	movw	r20, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_vconnectpullup+0x54>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_vconnectpullup+0x50>
 4ea:	ba 01       	movw	r22, r20
 4ec:	60 95       	com	r22
 4ee:	62 23       	and	r22, r18
 4f0:	6b bb       	out	0x1b, r22	; 27
 4f2:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
 4f4:	41 30       	cpi	r20, 0x01	; 1
 4f6:	91 f4       	brne	.+36     	; 0x51c <DIO_vconnectpullup+0x8a>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRB,pinnumber);
 4f8:	27 b3       	in	r18, 0x17	; 23
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	ac 01       	movw	r20, r24
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_vconnectpullup+0x74>
 502:	44 0f       	add	r20, r20
 504:	55 1f       	adc	r21, r21
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_vconnectpullup+0x70>
 50a:	ba 01       	movw	r22, r20
 50c:	84 2f       	mov	r24, r20
 50e:	80 95       	com	r24
 510:	82 23       	and	r24, r18
 512:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pinnumber);
 514:	88 b3       	in	r24, 0x18	; 24
 516:	68 2b       	or	r22, r24
 518:	68 bb       	out	0x18, r22	; 24
 51a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 51c:	28 b3       	in	r18, 0x18	; 24
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	ac 01       	movw	r20, r24
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_vconnectpullup+0x98>
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_vconnectpullup+0x94>
 52e:	ba 01       	movw	r22, r20
 530:	60 95       	com	r22
 532:	62 23       	and	r22, r18
 534:	68 bb       	out	0x18, r22	; 24
 536:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
 538:	41 30       	cpi	r20, 0x01	; 1
 53a:	91 f4       	brne	.+36     	; 0x560 <DIO_vconnectpullup+0xce>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRC,pinnumber);
 53c:	24 b3       	in	r18, 0x14	; 20
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	ac 01       	movw	r20, r24
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_vconnectpullup+0xb8>
 546:	44 0f       	add	r20, r20
 548:	55 1f       	adc	r21, r21
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_vconnectpullup+0xb4>
 54e:	ba 01       	movw	r22, r20
 550:	84 2f       	mov	r24, r20
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	84 bb       	out	0x14, r24	; 20
			SET_BIT(PORTC,pinnumber);
 558:	85 b3       	in	r24, 0x15	; 21
 55a:	68 2b       	or	r22, r24
 55c:	65 bb       	out	0x15, r22	; 21
 55e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 560:	25 b3       	in	r18, 0x15	; 21
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	ac 01       	movw	r20, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_vconnectpullup+0xdc>
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_vconnectpullup+0xd8>
 572:	ba 01       	movw	r22, r20
 574:	60 95       	com	r22
 576:	62 23       	and	r22, r18
 578:	65 bb       	out	0x15, r22	; 21
 57a:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	91 f4       	brne	.+36     	; 0x5a4 <DIO_vconnectpullup+0x112>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRD,pinnumber);
 580:	21 b3       	in	r18, 0x11	; 17
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	ac 01       	movw	r20, r24
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_vconnectpullup+0xfc>
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_vconnectpullup+0xf8>
 592:	ba 01       	movw	r22, r20
 594:	84 2f       	mov	r24, r20
 596:	80 95       	com	r24
 598:	82 23       	and	r24, r18
 59a:	81 bb       	out	0x11, r24	; 17
			SET_BIT(PORTD,pinnumber);
 59c:	82 b3       	in	r24, 0x12	; 18
 59e:	68 2b       	or	r22, r24
 5a0:	62 bb       	out	0x12, r22	; 18
 5a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 5a4:	22 b3       	in	r18, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ac 01       	movw	r20, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_vconnectpullup+0x120>
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_vconnectpullup+0x11c>
 5b6:	ba 01       	movw	r22, r20
 5b8:	60 95       	com	r22
 5ba:	62 23       	and	r22, r18
 5bc:	62 bb       	out	0x12, r22	; 18
 5be:	08 95       	ret

000005c0 <LED_vInit>:
*  Author: Mohamed Zaghlol
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 5c0:	41 e0       	ldi	r20, 0x01	; 1
 5c2:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
}
 5c6:	08 95       	ret

000005c8 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
}
 5ce:	08 95       	ret

000005d0 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
}
 5d6:	08 95       	ret

000005d8 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 5d8:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_toggle>
}
 5dc:	08 95       	ret

000005de <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 5de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_u8read>
}
 5e2:	08 95       	ret

000005e4 <main>:
volatile uint8 counter=0;
volatile uint8 required_temperature;
volatile uint16	Temp_SensRead=0;
int main(void)
{
	ADC_vinit();//initialize the ADC of the micro controller
 5e4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
 5e8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
 5ec:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <SPI_vInitSlave>
	

	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 5f0:	81 e4       	ldi	r24, 0x41	; 65
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 5f8:	81 e4       	ldi	r24, 0x41	; 65
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 600:	81 e4       	ldi	r24, 0x41	; 65
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
 608:	81 e4       	ldi	r24, 0x41	; 65
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_vInit>
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
 610:	81 e4       	ldi	r24, 0x41	; 65
 612:	65 e0       	ldi	r22, 0x05	; 5
 614:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_vInit>

		
    while(1)
    {
		SPI_RESPONSE=SPI_ui8TransmitRecive(DEFAULT_ACK);
 618:	8f ef       	ldi	r24, 0xFF	; 255
 61a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
 61e:	80 93 63 00 	sts	0x0063, r24
		switch (SPI_RESPONSE)
 622:	83 32       	cpi	r24, 0x23	; 35
 624:	09 f4       	brne	.+2      	; 0x628 <main+0x44>
 626:	ad c0       	rjmp	.+346    	; 0x782 <main+0x19e>
 628:	84 32       	cpi	r24, 0x24	; 36
 62a:	b8 f4       	brcc	.+46     	; 0x65a <main+0x76>
 62c:	85 31       	cpi	r24, 0x15	; 21
 62e:	09 f4       	brne	.+2      	; 0x632 <main+0x4e>
 630:	88 c0       	rjmp	.+272    	; 0x742 <main+0x15e>
 632:	86 31       	cpi	r24, 0x16	; 22
 634:	48 f4       	brcc	.+18     	; 0x648 <main+0x64>
 636:	82 31       	cpi	r24, 0x12	; 18
 638:	09 f4       	brne	.+2      	; 0x63c <main+0x58>
 63a:	41 c0       	rjmp	.+130    	; 0x6be <main+0xda>
 63c:	83 31       	cpi	r24, 0x13	; 19
 63e:	09 f4       	brne	.+2      	; 0x642 <main+0x5e>
 640:	54 c0       	rjmp	.+168    	; 0x6ea <main+0x106>
 642:	81 31       	cpi	r24, 0x11	; 17
 644:	49 f7       	brne	.-46     	; 0x618 <main+0x34>
 646:	25 c0       	rjmp	.+74     	; 0x692 <main+0xae>
 648:	81 32       	cpi	r24, 0x21	; 33
 64a:	09 f4       	brne	.+2      	; 0x64e <main+0x6a>
 64c:	90 c0       	rjmp	.+288    	; 0x76e <main+0x18a>
 64e:	82 32       	cpi	r24, 0x22	; 34
 650:	08 f0       	brcs	.+2      	; 0x654 <main+0x70>
 652:	92 c0       	rjmp	.+292    	; 0x778 <main+0x194>
 654:	86 31       	cpi	r24, 0x16	; 22
 656:	01 f7       	brne	.-64     	; 0x618 <main+0x34>
 658:	5e c0       	rjmp	.+188    	; 0x716 <main+0x132>
 65a:	82 33       	cpi	r24, 0x32	; 50
 65c:	09 f4       	brne	.+2      	; 0x660 <main+0x7c>
 65e:	a7 c0       	rjmp	.+334    	; 0x7ae <main+0x1ca>
 660:	83 33       	cpi	r24, 0x33	; 51
 662:	48 f4       	brcc	.+18     	; 0x676 <main+0x92>
 664:	86 32       	cpi	r24, 0x26	; 38
 666:	09 f4       	brne	.+2      	; 0x66a <main+0x86>
 668:	91 c0       	rjmp	.+290    	; 0x78c <main+0x1a8>
 66a:	81 33       	cpi	r24, 0x31	; 49
 66c:	09 f4       	brne	.+2      	; 0x670 <main+0x8c>
 66e:	9a c0       	rjmp	.+308    	; 0x7a4 <main+0x1c0>
 670:	85 32       	cpi	r24, 0x25	; 37
 672:	91 f6       	brne	.-92     	; 0x618 <main+0x34>
 674:	92 c0       	rjmp	.+292    	; 0x79a <main+0x1b6>
 676:	85 33       	cpi	r24, 0x35	; 53
 678:	09 f4       	brne	.+2      	; 0x67c <main+0x98>
 67a:	aa c0       	rjmp	.+340    	; 0x7d0 <main+0x1ec>
 67c:	86 33       	cpi	r24, 0x36	; 54
 67e:	18 f4       	brcc	.+6      	; 0x686 <main+0xa2>
 680:	83 33       	cpi	r24, 0x33	; 51
 682:	51 f6       	brne	.-108    	; 0x618 <main+0x34>
 684:	99 c0       	rjmp	.+306    	; 0x7b8 <main+0x1d4>
 686:	86 33       	cpi	r24, 0x36	; 54
 688:	09 f4       	brne	.+2      	; 0x68c <main+0xa8>
 68a:	9b c0       	rjmp	.+310    	; 0x7c2 <main+0x1de>
 68c:	80 34       	cpi	r24, 0x40	; 64
 68e:	21 f6       	brne	.-120    	; 0x618 <main+0x34>
 690:	a4 c0       	rjmp	.+328    	; 0x7da <main+0x1f6>
		{
		case ROOM1_STATUS:
		if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led turned off
 692:	81 e4       	ldi	r24, 0x41	; 65
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 69a:	88 23       	and	r24, r24
 69c:	19 f4       	brne	.+6      	; 0x6a4 <main+0xc0>
		{
			SPI_RESPONSE=OFF_STATUS;  
 69e:	10 92 63 00 	sts	0x0063, r1
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <main+0xd0>
		} 
		else if(LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//IF THE LED TURNED ON
 6a4:	81 e4       	ldi	r24, 0x41	; 65
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <main+0xd0>
		{
			SPI_RESPONSE=ON_STATUS;
 6b0:	80 93 63 00 	sts	0x0063, r24
		}		
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);	
 6b4:	80 91 63 00 	lds	r24, 0x0063
 6b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
			break;
 6bc:	ad cf       	rjmp	.-166    	; 0x618 <main+0x34>
			
		case ROOM2_STATUS:
		if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led turned off
 6be:	81 e4       	ldi	r24, 0x41	; 65
 6c0:	62 e0       	ldi	r22, 0x02	; 2
 6c2:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 6c6:	88 23       	and	r24, r24
 6c8:	19 f4       	brne	.+6      	; 0x6d0 <main+0xec>
		{
			SPI_RESPONSE=OFF_STATUS;
 6ca:	10 92 63 00 	sts	0x0063, r1
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <main+0xfc>
		}
		else if(LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//IF THE LED TURNED ON
 6d0:	81 e4       	ldi	r24, 0x41	; 65
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	11 f4       	brne	.+4      	; 0x6e0 <main+0xfc>
		{
			SPI_RESPONSE=ON_STATUS;
 6dc:	80 93 63 00 	sts	0x0063, r24
		}
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);
 6e0:	80 91 63 00 	lds	r24, 0x0063
 6e4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
		break;	
 6e8:	97 cf       	rjmp	.-210    	; 0x618 <main+0x34>
		
		case ROOM3_STATUS:
		if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led turned off
 6ea:	81 e4       	ldi	r24, 0x41	; 65
 6ec:	63 e0       	ldi	r22, 0x03	; 3
 6ee:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 6f2:	88 23       	and	r24, r24
 6f4:	19 f4       	brne	.+6      	; 0x6fc <main+0x118>
		{
			SPI_RESPONSE=OFF_STATUS;
 6f6:	10 92 63 00 	sts	0x0063, r1
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <main+0x128>
		}
		else if(LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//IF THE LED TURNED ON
 6fc:	81 e4       	ldi	r24, 0x41	; 65
 6fe:	63 e0       	ldi	r22, 0x03	; 3
 700:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	11 f4       	brne	.+4      	; 0x70c <main+0x128>
		{
			SPI_RESPONSE=ON_STATUS;
 708:	80 93 63 00 	sts	0x0063, r24
		}
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);
 70c:	80 91 63 00 	lds	r24, 0x0063
 710:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
		break;	
 714:	81 cf       	rjmp	.-254    	; 0x618 <main+0x34>
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
 716:	81 e4       	ldi	r24, 0x41	; 65
 718:	65 e0       	ldi	r22, 0x05	; 5
 71a:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 71e:	88 23       	and	r24, r24
 720:	19 f4       	brne	.+6      	; 0x728 <main+0x144>
			{
				SPI_RESPONSE = OFF_STATUS;//set the response as off status
 722:	10 92 63 00 	sts	0x0063, r1
 726:	08 c0       	rjmp	.+16     	; 0x738 <main+0x154>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
 728:	81 e4       	ldi	r24, 0x41	; 65
 72a:	65 e0       	ldi	r22, 0x05	; 5
 72c:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	11 f4       	brne	.+4      	; 0x738 <main+0x154>
			{
				SPI_RESPONSE = ON_STATUS;//set the response as on status
 734:	80 93 63 00 	sts	0x0063, r24
			}
			else
			{
			}
			SPI_ui8TransmitRecive(SPI_RESPONSE);//response to the transmitter with the status
 738:	80 91 63 00 	lds	r24, 0x0063
 73c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
			break;
 740:	6b cf       	rjmp	.-298    	; 0x618 <main+0x34>
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
 742:	81 e4       	ldi	r24, 0x41	; 65
 744:	64 e0       	ldi	r22, 0x04	; 4
 746:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 74a:	88 23       	and	r24, r24
 74c:	19 f4       	brne	.+6      	; 0x754 <main+0x170>
			{
				SPI_RESPONSE = OFF_STATUS;//set the response as off status
 74e:	10 92 63 00 	sts	0x0063, r1
 752:	08 c0       	rjmp	.+16     	; 0x764 <main+0x180>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
 754:	81 e4       	ldi	r24, 0x41	; 65
 756:	64 e0       	ldi	r22, 0x04	; 4
 758:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_u8ReadStatus>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	11 f4       	brne	.+4      	; 0x764 <main+0x180>
			{
				SPI_RESPONSE = ON_STATUS;//set the response as on status
 760:	80 93 63 00 	sts	0x0063, r24
			}
			else
			{
			}
			SPI_ui8TransmitRecive(SPI_RESPONSE);//response to the transmitter with the status
 764:	80 91 63 00 	lds	r24, 0x0063
 768:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
			break;//break the switch case
 76c:	55 cf       	rjmp	.-342    	; 0x618 <main+0x34>
				
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 76e:	81 e4       	ldi	r24, 0x41	; 65
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
			break;//break the switch case
 776:	50 cf       	rjmp	.-352    	; 0x618 <main+0x34>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 778:	81 e4       	ldi	r24, 0x41	; 65
 77a:	62 e0       	ldi	r22, 0x02	; 2
 77c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
			break;//break the switch case
 780:	4b cf       	rjmp	.-362    	; 0x618 <main+0x34>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 782:	81 e4       	ldi	r24, 0x41	; 65
 784:	63 e0       	ldi	r22, 0x03	; 3
 786:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
			break;//break the switch case
 78a:	46 cf       	rjmp	.-372    	; 0x618 <main+0x34>
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 78c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
 790:	81 e4       	ldi	r24, 0x41	; 65
 792:	65 e0       	ldi	r22, 0x05	; 5
 794:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
			break;//break the switch case
 798:	3f cf       	rjmp	.-386    	; 0x618 <main+0x34>
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
 79a:	81 e4       	ldi	r24, 0x41	; 65
 79c:	64 e0       	ldi	r22, 0x04	; 4
 79e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
			break;//break the switch case
 7a2:	3a cf       	rjmp	.-396    	; 0x618 <main+0x34>
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 7a4:	81 e4       	ldi	r24, 0x41	; 65
 7a6:	61 e0       	ldi	r22, 0x01	; 1
 7a8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
			break;//break the switch case
 7ac:	35 cf       	rjmp	.-406    	; 0x618 <main+0x34>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 7ae:	81 e4       	ldi	r24, 0x41	; 65
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
			break;//break the switch case
 7b6:	30 cf       	rjmp	.-416    	; 0x618 <main+0x34>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 7b8:	81 e4       	ldi	r24, 0x41	; 65
 7ba:	63 e0       	ldi	r22, 0x03	; 3
 7bc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
			break;//break the switch case
 7c0:	2b cf       	rjmp	.-426    	; 0x618 <main+0x34>
			case AIR_COND_TURN_OFF:
			timer0_stop();
 7c2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
 7c6:	81 e4       	ldi	r24, 0x41	; 65
 7c8:	65 e0       	ldi	r22, 0x05	; 5
 7ca:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
			break;//break the switch case
 7ce:	24 cf       	rjmp	.-440    	; 0x618 <main+0x34>
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
 7d0:	81 e4       	ldi	r24, 0x41	; 65
 7d2:	64 e0       	ldi	r22, 0x04	; 4
 7d4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
			break;//break the switch case
 7d8:	1f cf       	rjmp	.-450    	; 0x618 <main+0x34>
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_ui8TransmitRecive>
 7e0:	80 93 64 00 	sts	0x0064, r24
			break;//break the switch case		
 7e4:	19 cf       	rjmp	.-462    	; 0x618 <main+0x34>

000007e6 <__vector_10>:
		 }
	  }
}

ISR(TIMER0_COMP_vect)
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 93       	push	r18
 7f2:	3f 93       	push	r19
 7f4:	4f 93       	push	r20
 7f6:	5f 93       	push	r21
 7f8:	6f 93       	push	r22
 7fa:	7f 93       	push	r23
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	af 93       	push	r26
 802:	bf 93       	push	r27
 804:	ef 93       	push	r30
 806:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 808:	80 91 62 00 	lds	r24, 0x0062
 80c:	8f 5f       	subi	r24, 0xFF	; 255
 80e:	80 93 62 00 	sts	0x0062, r24
	if(counter>=10)//do that code every 10 ticks
 812:	80 91 62 00 	lds	r24, 0x0062
 816:	8a 30       	cpi	r24, 0x0A	; 10
 818:	b0 f1       	brcs	.+108    	; 0x886 <__stack+0x27>
	{	
		counter=0;
 81a:	10 92 62 00 	sts	0x0062, r1
	Temp_SensRead =(0.25*ADC_u16Read());
 81e:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_u16Read>
 822:	bc 01       	movw	r22, r24
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatunsisf>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	40 e8       	ldi	r20, 0x80	; 128
 832:	5e e3       	ldi	r21, 0x3E	; 62
 834:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3>
 838:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	90 93 61 00 	sts	0x0061, r25
 844:	80 93 60 00 	sts	0x0060, r24
	if (Temp_SensRead<Temp_SensRead)
 848:	20 91 60 00 	lds	r18, 0x0060
 84c:	30 91 61 00 	lds	r19, 0x0061
 850:	80 91 60 00 	lds	r24, 0x0060
 854:	90 91 61 00 	lds	r25, 0x0061
 858:	28 17       	cp	r18, r24
 85a:	39 07       	cpc	r19, r25
 85c:	28 f4       	brcc	.+10     	; 0x868 <__stack+0x9>
	{
		LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);
 85e:	81 e4       	ldi	r24, 0x41	; 65
 860:	65 e0       	ldi	r22, 0x05	; 5
 862:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LED_vTurnOff>
 866:	0f c0       	rjmp	.+30     	; 0x886 <__stack+0x27>
	}
	else if (Temp_SensRead>Temp_SensRead)
 868:	20 91 60 00 	lds	r18, 0x0060
 86c:	30 91 61 00 	lds	r19, 0x0061
 870:	80 91 60 00 	lds	r24, 0x0060
 874:	90 91 61 00 	lds	r25, 0x0061
 878:	82 17       	cp	r24, r18
 87a:	93 07       	cpc	r25, r19
 87c:	20 f4       	brcc	.+8      	; 0x886 <__stack+0x27>
	{
		LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);
 87e:	81 e4       	ldi	r24, 0x41	; 65
 880:	65 e0       	ldi	r22, 0x05	; 5
 882:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LED_vTurnOn>
	}
	}	
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <SPI_vInitMaster>:
#include "SPI.h"


void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
 8a8:	87 b3       	in	r24, 0x17	; 23
 8aa:	80 6b       	ori	r24, 0xB0	; 176
 8ac:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
 8ae:	8d b1       	in	r24, 0x0d	; 13
 8b0:	81 65       	ori	r24, 0x51	; 81
 8b2:	8d b9       	out	0x0d, r24	; 13
}
 8b4:	08 95       	ret

000008b6 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 8b6:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 8b8:	6e 9a       	sbi	0x0d, 6	; 13
}
 8ba:	08 95       	ret

000008bc <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 8bc:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 8be:	77 9b       	sbis	0x0e, 7	; 14
 8c0:	fe cf       	rjmp	.-4      	; 0x8be <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 8c2:	8f b1       	in	r24, 0x0f	; 15
 8c4:	08 95       	ret

000008c6 <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 8c6:	8e e4       	ldi	r24, 0x4E	; 78
 8c8:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	88 60       	ori	r24, 0x08	; 8
 8ce:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 8d0:	83 b7       	in	r24, 0x33	; 51
 8d2:	8f 7b       	andi	r24, 0xBF	; 191
 8d4:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 8d6:	83 b7       	in	r24, 0x33	; 51
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 8dc:	83 b7       	in	r24, 0x33	; 51
 8de:	8d 7f       	andi	r24, 0xFD	; 253
 8e0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 8e2:	83 b7       	in	r24, 0x33	; 51
 8e4:	84 60       	ori	r24, 0x04	; 4
 8e6:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 8e8:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 8ea:	89 b7       	in	r24, 0x39	; 57
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	89 bf       	out	0x39, r24	; 57
}
 8f0:	08 95       	ret

000008f2 <timer0_stop>:

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 8f2:	83 b7       	in	r24, 0x33	; 51
 8f4:	8e 7f       	andi	r24, 0xFE	; 254
 8f6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 8f8:	83 b7       	in	r24, 0x33	; 51
 8fa:	8d 7f       	andi	r24, 0xFD	; 253
 8fc:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 8fe:	83 b7       	in	r24, 0x33	; 51
 900:	8b 7f       	andi	r24, 0xFB	; 251
 902:	83 bf       	out	0x33, r24	; 51
}
 904:	08 95       	ret

00000906 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
 906:	80 e8       	ldi	r24, 0x80	; 128
 908:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00);
 90a:	83 b7       	in	r24, 0x33	; 51
 90c:	80 64       	ori	r24, 0x40	; 64
 90e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 910:	83 b7       	in	r24, 0x33	; 51
 912:	88 60       	ori	r24, 0x08	; 8
 914:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 916:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	80 62       	ori	r24, 0x20	; 32
 91c:	83 bf       	out	0x33, r24	; 51
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
 91e:	89 b7       	in	r24, 0x39	; 57
 920:	81 60       	ori	r24, 0x01	; 1
 922:	89 bf       	out	0x39, r24	; 57
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 924:	83 b7       	in	r24, 0x33	; 51
 926:	81 60       	ori	r24, 0x01	; 1
 928:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 92a:	83 b7       	in	r24, 0x33	; 51
 92c:	8d 7f       	andi	r24, 0xFD	; 253
 92e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 930:	83 b7       	in	r24, 0x33	; 51
 932:	84 60       	ori	r24, 0x04	; 4
 934:	83 bf       	out	0x33, r24	; 51
}
 936:	08 95       	ret

00000938 <change_dutycycle>:
void change_dutycycle(float64 duty)
{
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	48 ec       	ldi	r20, 0xC8	; 200
 93e:	52 e4       	ldi	r21, 0x42	; 66
 940:	0e 94 ac 04 	call	0x958	; 0x958 <__divsf3>
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	40 e8       	ldi	r20, 0x80	; 128
 94a:	53 e4       	ldi	r21, 0x43	; 67
 94c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3>
 950:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
 954:	6c bf       	out	0x3c, r22	; 60
}
 956:	08 95       	ret

00000958 <__divsf3>:
 958:	0c d0       	rcall	.+24     	; 0x972 <__divsf3x>
 95a:	e6 c0       	rjmp	.+460    	; 0xb28 <__fp_round>
 95c:	de d0       	rcall	.+444    	; 0xb1a <__fp_pscB>
 95e:	40 f0       	brcs	.+16     	; 0x970 <__divsf3+0x18>
 960:	d5 d0       	rcall	.+426    	; 0xb0c <__fp_pscA>
 962:	30 f0       	brcs	.+12     	; 0x970 <__divsf3+0x18>
 964:	21 f4       	brne	.+8      	; 0x96e <__divsf3+0x16>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	19 f0       	breq	.+6      	; 0x970 <__divsf3+0x18>
 96a:	c7 c0       	rjmp	.+398    	; 0xafa <__fp_inf>
 96c:	51 11       	cpse	r21, r1
 96e:	10 c1       	rjmp	.+544    	; 0xb90 <__fp_szero>
 970:	ca c0       	rjmp	.+404    	; 0xb06 <__fp_nan>

00000972 <__divsf3x>:
 972:	eb d0       	rcall	.+470    	; 0xb4a <__fp_split3>
 974:	98 f3       	brcs	.-26     	; 0x95c <__divsf3+0x4>

00000976 <__divsf3_pse>:
 976:	99 23       	and	r25, r25
 978:	c9 f3       	breq	.-14     	; 0x96c <__divsf3+0x14>
 97a:	55 23       	and	r21, r21
 97c:	b1 f3       	breq	.-20     	; 0x96a <__divsf3+0x12>
 97e:	95 1b       	sub	r25, r21
 980:	55 0b       	sbc	r21, r21
 982:	bb 27       	eor	r27, r27
 984:	aa 27       	eor	r26, r26
 986:	62 17       	cp	r22, r18
 988:	73 07       	cpc	r23, r19
 98a:	84 07       	cpc	r24, r20
 98c:	38 f0       	brcs	.+14     	; 0x99c <__divsf3_pse+0x26>
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	22 0f       	add	r18, r18
 994:	33 1f       	adc	r19, r19
 996:	44 1f       	adc	r20, r20
 998:	aa 1f       	adc	r26, r26
 99a:	a9 f3       	breq	.-22     	; 0x986 <__divsf3_pse+0x10>
 99c:	33 d0       	rcall	.+102    	; 0xa04 <__divsf3_pse+0x8e>
 99e:	0e 2e       	mov	r0, r30
 9a0:	3a f0       	brmi	.+14     	; 0x9b0 <__divsf3_pse+0x3a>
 9a2:	e0 e8       	ldi	r30, 0x80	; 128
 9a4:	30 d0       	rcall	.+96     	; 0xa06 <__divsf3_pse+0x90>
 9a6:	91 50       	subi	r25, 0x01	; 1
 9a8:	50 40       	sbci	r21, 0x00	; 0
 9aa:	e6 95       	lsr	r30
 9ac:	00 1c       	adc	r0, r0
 9ae:	ca f7       	brpl	.-14     	; 0x9a2 <__divsf3_pse+0x2c>
 9b0:	29 d0       	rcall	.+82     	; 0xa04 <__divsf3_pse+0x8e>
 9b2:	fe 2f       	mov	r31, r30
 9b4:	27 d0       	rcall	.+78     	; 0xa04 <__divsf3_pse+0x8e>
 9b6:	66 0f       	add	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	bb 1f       	adc	r27, r27
 9be:	26 17       	cp	r18, r22
 9c0:	37 07       	cpc	r19, r23
 9c2:	48 07       	cpc	r20, r24
 9c4:	ab 07       	cpc	r26, r27
 9c6:	b0 e8       	ldi	r27, 0x80	; 128
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__divsf3_pse+0x56>
 9ca:	bb 0b       	sbc	r27, r27
 9cc:	80 2d       	mov	r24, r0
 9ce:	bf 01       	movw	r22, r30
 9d0:	ff 27       	eor	r31, r31
 9d2:	93 58       	subi	r25, 0x83	; 131
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	2a f0       	brmi	.+10     	; 0x9e2 <__divsf3_pse+0x6c>
 9d8:	9e 3f       	cpi	r25, 0xFE	; 254
 9da:	51 05       	cpc	r21, r1
 9dc:	68 f0       	brcs	.+26     	; 0x9f8 <__divsf3_pse+0x82>
 9de:	8d c0       	rjmp	.+282    	; 0xafa <__fp_inf>
 9e0:	d7 c0       	rjmp	.+430    	; 0xb90 <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	ec f3       	brlt	.-6      	; 0x9e0 <__divsf3_pse+0x6a>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	dc f3       	brlt	.-10     	; 0x9e0 <__divsf3_pse+0x6a>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	9f 5f       	subi	r25, 0xFF	; 255
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__divsf3_pse+0x74>
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret
 a04:	e1 e0       	ldi	r30, 0x01	; 1
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	bb 1f       	adc	r27, r27
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	ba 07       	cpc	r27, r26
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__divsf3_pse+0xaa>
 a18:	62 1b       	sub	r22, r18
 a1a:	73 0b       	sbc	r23, r19
 a1c:	84 0b       	sbc	r24, r20
 a1e:	ba 0b       	sbc	r27, r26
 a20:	ee 1f       	adc	r30, r30
 a22:	88 f7       	brcc	.-30     	; 0xa06 <__divsf3_pse+0x90>
 a24:	e0 95       	com	r30
 a26:	08 95       	ret

00000a28 <__fixunssfsi>:
 a28:	98 d0       	rcall	.+304    	; 0xb5a <__fp_splitA>
 a2a:	88 f0       	brcs	.+34     	; 0xa4e <__fixunssfsi+0x26>
 a2c:	9f 57       	subi	r25, 0x7F	; 127
 a2e:	90 f0       	brcs	.+36     	; 0xa54 <__fixunssfsi+0x2c>
 a30:	b9 2f       	mov	r27, r25
 a32:	99 27       	eor	r25, r25
 a34:	b7 51       	subi	r27, 0x17	; 23
 a36:	a0 f0       	brcs	.+40     	; 0xa60 <__fixunssfsi+0x38>
 a38:	d1 f0       	breq	.+52     	; 0xa6e <__fixunssfsi+0x46>
 a3a:	66 0f       	add	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	1a f0       	brmi	.+6      	; 0xa4a <__fixunssfsi+0x22>
 a44:	ba 95       	dec	r27
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__fixunssfsi+0x12>
 a48:	12 c0       	rjmp	.+36     	; 0xa6e <__fixunssfsi+0x46>
 a4a:	b1 30       	cpi	r27, 0x01	; 1
 a4c:	81 f0       	breq	.+32     	; 0xa6e <__fixunssfsi+0x46>
 a4e:	9f d0       	rcall	.+318    	; 0xb8e <__fp_zero>
 a50:	b1 e0       	ldi	r27, 0x01	; 1
 a52:	08 95       	ret
 a54:	9c c0       	rjmp	.+312    	; 0xb8e <__fp_zero>
 a56:	67 2f       	mov	r22, r23
 a58:	78 2f       	mov	r23, r24
 a5a:	88 27       	eor	r24, r24
 a5c:	b8 5f       	subi	r27, 0xF8	; 248
 a5e:	39 f0       	breq	.+14     	; 0xa6e <__fixunssfsi+0x46>
 a60:	b9 3f       	cpi	r27, 0xF9	; 249
 a62:	cc f3       	brlt	.-14     	; 0xa56 <__fixunssfsi+0x2e>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b3 95       	inc	r27
 a6c:	d9 f7       	brne	.-10     	; 0xa64 <__fixunssfsi+0x3c>
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__fixunssfsi+0x56>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__floatunsisf>:
 a80:	e8 94       	clt
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <__floatsisf+0x12>

00000a84 <__floatsisf>:
 a84:	97 fb       	bst	r25, 7
 a86:	3e f4       	brtc	.+14     	; 0xa96 <__floatsisf+0x12>
 a88:	90 95       	com	r25
 a8a:	80 95       	com	r24
 a8c:	70 95       	com	r23
 a8e:	61 95       	neg	r22
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	99 23       	and	r25, r25
 a98:	a9 f0       	breq	.+42     	; 0xac4 <__floatsisf+0x40>
 a9a:	f9 2f       	mov	r31, r25
 a9c:	96 e9       	ldi	r25, 0x96	; 150
 a9e:	bb 27       	eor	r27, r27
 aa0:	93 95       	inc	r25
 aa2:	f6 95       	lsr	r31
 aa4:	87 95       	ror	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	b7 95       	ror	r27
 aac:	f1 11       	cpse	r31, r1
 aae:	f8 cf       	rjmp	.-16     	; 0xaa0 <__floatsisf+0x1c>
 ab0:	fa f4       	brpl	.+62     	; 0xaf0 <__floatsisf+0x6c>
 ab2:	bb 0f       	add	r27, r27
 ab4:	11 f4       	brne	.+4      	; 0xaba <__floatsisf+0x36>
 ab6:	60 ff       	sbrs	r22, 0
 ab8:	1b c0       	rjmp	.+54     	; 0xaf0 <__floatsisf+0x6c>
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <__floatsisf+0x6c>
 ac4:	88 23       	and	r24, r24
 ac6:	11 f0       	breq	.+4      	; 0xacc <__floatsisf+0x48>
 ac8:	96 e9       	ldi	r25, 0x96	; 150
 aca:	11 c0       	rjmp	.+34     	; 0xaee <__floatsisf+0x6a>
 acc:	77 23       	and	r23, r23
 ace:	21 f0       	breq	.+8      	; 0xad8 <__floatsisf+0x54>
 ad0:	9e e8       	ldi	r25, 0x8E	; 142
 ad2:	87 2f       	mov	r24, r23
 ad4:	76 2f       	mov	r23, r22
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__floatsisf+0x5e>
 ad8:	66 23       	and	r22, r22
 ada:	71 f0       	breq	.+28     	; 0xaf8 <__floatsisf+0x74>
 adc:	96 e8       	ldi	r25, 0x86	; 134
 ade:	86 2f       	mov	r24, r22
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	2a f0       	brmi	.+10     	; 0xaf0 <__floatsisf+0x6c>
 ae6:	9a 95       	dec	r25
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	da f7       	brpl	.-10     	; 0xae6 <__floatsisf+0x62>
 af0:	88 0f       	add	r24, r24
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__fp_inf>:
 afa:	97 f9       	bld	r25, 7
 afc:	9f 67       	ori	r25, 0x7F	; 127
 afe:	80 e8       	ldi	r24, 0x80	; 128
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	60 e0       	ldi	r22, 0x00	; 0
 b04:	08 95       	ret

00000b06 <__fp_nan>:
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	80 ec       	ldi	r24, 0xC0	; 192
 b0a:	08 95       	ret

00000b0c <__fp_pscA>:
 b0c:	00 24       	eor	r0, r0
 b0e:	0a 94       	dec	r0
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	09 06       	cpc	r0, r25
 b18:	08 95       	ret

00000b1a <__fp_pscB>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	05 06       	cpc	r0, r21
 b26:	08 95       	ret

00000b28 <__fp_round>:
 b28:	09 2e       	mov	r0, r25
 b2a:	03 94       	inc	r0
 b2c:	00 0c       	add	r0, r0
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0xc>
 b30:	88 23       	and	r24, r24
 b32:	52 f0       	brmi	.+20     	; 0xb48 <__fp_round+0x20>
 b34:	bb 0f       	add	r27, r27
 b36:	40 f4       	brcc	.+16     	; 0xb48 <__fp_round+0x20>
 b38:	bf 2b       	or	r27, r31
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0x18>
 b3c:	60 ff       	sbrs	r22, 0
 b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__fp_round+0x20>
 b40:	6f 5f       	subi	r22, 0xFF	; 255
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__fp_split3>:
 b4a:	57 fd       	sbrc	r21, 7
 b4c:	90 58       	subi	r25, 0x80	; 128
 b4e:	44 0f       	add	r20, r20
 b50:	55 1f       	adc	r21, r21
 b52:	59 f0       	breq	.+22     	; 0xb6a <__fp_splitA+0x10>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	71 f0       	breq	.+28     	; 0xb74 <__fp_splitA+0x1a>
 b58:	47 95       	ror	r20

00000b5a <__fp_splitA>:
 b5a:	88 0f       	add	r24, r24
 b5c:	97 fb       	bst	r25, 7
 b5e:	99 1f       	adc	r25, r25
 b60:	61 f0       	breq	.+24     	; 0xb7a <__fp_splitA+0x20>
 b62:	9f 3f       	cpi	r25, 0xFF	; 255
 b64:	79 f0       	breq	.+30     	; 0xb84 <__fp_splitA+0x2a>
 b66:	87 95       	ror	r24
 b68:	08 95       	ret
 b6a:	12 16       	cp	r1, r18
 b6c:	13 06       	cpc	r1, r19
 b6e:	14 06       	cpc	r1, r20
 b70:	55 1f       	adc	r21, r21
 b72:	f2 cf       	rjmp	.-28     	; 0xb58 <__fp_split3+0xe>
 b74:	46 95       	lsr	r20
 b76:	f1 df       	rcall	.-30     	; 0xb5a <__fp_splitA>
 b78:	08 c0       	rjmp	.+16     	; 0xb8a <__fp_splitA+0x30>
 b7a:	16 16       	cp	r1, r22
 b7c:	17 06       	cpc	r1, r23
 b7e:	18 06       	cpc	r1, r24
 b80:	99 1f       	adc	r25, r25
 b82:	f1 cf       	rjmp	.-30     	; 0xb66 <__fp_splitA+0xc>
 b84:	86 95       	lsr	r24
 b86:	71 05       	cpc	r23, r1
 b88:	61 05       	cpc	r22, r1
 b8a:	08 94       	sec
 b8c:	08 95       	ret

00000b8e <__fp_zero>:
 b8e:	e8 94       	clt

00000b90 <__fp_szero>:
 b90:	bb 27       	eor	r27, r27
 b92:	66 27       	eor	r22, r22
 b94:	77 27       	eor	r23, r23
 b96:	cb 01       	movw	r24, r22
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__mulsf3>:
 b9c:	0b d0       	rcall	.+22     	; 0xbb4 <__mulsf3x>
 b9e:	c4 cf       	rjmp	.-120    	; 0xb28 <__fp_round>
 ba0:	b5 df       	rcall	.-150    	; 0xb0c <__fp_pscA>
 ba2:	28 f0       	brcs	.+10     	; 0xbae <__mulsf3+0x12>
 ba4:	ba df       	rcall	.-140    	; 0xb1a <__fp_pscB>
 ba6:	18 f0       	brcs	.+6      	; 0xbae <__mulsf3+0x12>
 ba8:	95 23       	and	r25, r21
 baa:	09 f0       	breq	.+2      	; 0xbae <__mulsf3+0x12>
 bac:	a6 cf       	rjmp	.-180    	; 0xafa <__fp_inf>
 bae:	ab cf       	rjmp	.-170    	; 0xb06 <__fp_nan>
 bb0:	11 24       	eor	r1, r1
 bb2:	ee cf       	rjmp	.-36     	; 0xb90 <__fp_szero>

00000bb4 <__mulsf3x>:
 bb4:	ca df       	rcall	.-108    	; 0xb4a <__fp_split3>
 bb6:	a0 f3       	brcs	.-24     	; 0xba0 <__mulsf3+0x4>

00000bb8 <__mulsf3_pse>:
 bb8:	95 9f       	mul	r25, r21
 bba:	d1 f3       	breq	.-12     	; 0xbb0 <__mulsf3+0x14>
 bbc:	95 0f       	add	r25, r21
 bbe:	50 e0       	ldi	r21, 0x00	; 0
 bc0:	55 1f       	adc	r21, r21
 bc2:	62 9f       	mul	r22, r18
 bc4:	f0 01       	movw	r30, r0
 bc6:	72 9f       	mul	r23, r18
 bc8:	bb 27       	eor	r27, r27
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	63 9f       	mul	r22, r19
 bd0:	aa 27       	eor	r26, r26
 bd2:	f0 0d       	add	r31, r0
 bd4:	b1 1d       	adc	r27, r1
 bd6:	aa 1f       	adc	r26, r26
 bd8:	64 9f       	mul	r22, r20
 bda:	66 27       	eor	r22, r22
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	66 1f       	adc	r22, r22
 be2:	82 9f       	mul	r24, r18
 be4:	22 27       	eor	r18, r18
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	73 9f       	mul	r23, r19
 bee:	b0 0d       	add	r27, r0
 bf0:	a1 1d       	adc	r26, r1
 bf2:	62 1f       	adc	r22, r18
 bf4:	83 9f       	mul	r24, r19
 bf6:	a0 0d       	add	r26, r0
 bf8:	61 1d       	adc	r22, r1
 bfa:	22 1f       	adc	r18, r18
 bfc:	74 9f       	mul	r23, r20
 bfe:	33 27       	eor	r19, r19
 c00:	a0 0d       	add	r26, r0
 c02:	61 1d       	adc	r22, r1
 c04:	23 1f       	adc	r18, r19
 c06:	84 9f       	mul	r24, r20
 c08:	60 0d       	add	r22, r0
 c0a:	21 1d       	adc	r18, r1
 c0c:	82 2f       	mov	r24, r18
 c0e:	76 2f       	mov	r23, r22
 c10:	6a 2f       	mov	r22, r26
 c12:	11 24       	eor	r1, r1
 c14:	9f 57       	subi	r25, 0x7F	; 127
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	8a f0       	brmi	.+34     	; 0xc3c <__mulsf3_pse+0x84>
 c1a:	e1 f0       	breq	.+56     	; 0xc54 <__mulsf3_pse+0x9c>
 c1c:	88 23       	and	r24, r24
 c1e:	4a f0       	brmi	.+18     	; 0xc32 <__mulsf3_pse+0x7a>
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	bb 1f       	adc	r27, r27
 c26:	66 1f       	adc	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	50 40       	sbci	r21, 0x00	; 0
 c30:	a9 f7       	brne	.-22     	; 0xc1c <__mulsf3_pse+0x64>
 c32:	9e 3f       	cpi	r25, 0xFE	; 254
 c34:	51 05       	cpc	r21, r1
 c36:	70 f0       	brcs	.+28     	; 0xc54 <__mulsf3_pse+0x9c>
 c38:	60 cf       	rjmp	.-320    	; 0xafa <__fp_inf>
 c3a:	aa cf       	rjmp	.-172    	; 0xb90 <__fp_szero>
 c3c:	5f 3f       	cpi	r21, 0xFF	; 255
 c3e:	ec f3       	brlt	.-6      	; 0xc3a <__mulsf3_pse+0x82>
 c40:	98 3e       	cpi	r25, 0xE8	; 232
 c42:	dc f3       	brlt	.-10     	; 0xc3a <__mulsf3_pse+0x82>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b7 95       	ror	r27
 c4c:	f7 95       	ror	r31
 c4e:	e7 95       	ror	r30
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x8c>
 c54:	fe 2b       	or	r31, r30
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
