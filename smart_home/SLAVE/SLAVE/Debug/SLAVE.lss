
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000d06  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a94  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000339  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069d  00000000  00000000  00003d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000043e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032b  00000000  00000000  00004624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000712  00000000  00000000  0000494f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	4d 03       	fmul	r20, r21
  56:	63 03       	mulsu	r22, r19
  58:	79 03       	fmul	r23, r17
  5a:	3a 03       	fmul	r19, r18
  5c:	ac 03       	fmulsu	r18, r20
  5e:	8f 03       	fmulsu	r16, r23
  60:	a5 03       	fmuls	r18, r21
  62:	3a 03       	fmul	r19, r18
  64:	3a 03       	fmul	r19, r18
  66:	3a 03       	fmul	r19, r18
  68:	3a 03       	fmul	r19, r18
  6a:	3a 03       	fmul	r19, r18
  6c:	3a 03       	fmul	r19, r18
  6e:	3a 03       	fmul	r19, r18
  70:	3a 03       	fmul	r19, r18
  72:	3a 03       	fmul	r19, r18
  74:	c2 03       	fmuls	r20, r18
  76:	d9 03       	fmulsu	r21, r17
  78:	c7 03       	fmuls	r20, r23
  7a:	de 03       	fmulsu	r21, r22
  7c:	cc 03       	fmulsu	r20, r20
  7e:	e3 03       	fmuls	r22, r19
  80:	d4 03       	fmuls	r21, r20
  82:	ef 03       	fmulsu	r22, r23
  84:	d1 03       	fmuls	r21, r17
  86:	e8 03       	fmulsu	r22, r16
  88:	3a 03       	fmul	r19, r18
  8a:	3a 03       	fmul	r19, r18
  8c:	3a 03       	fmul	r19, r18
  8e:	3a 03       	fmul	r19, r18
  90:	3a 03       	fmul	r19, r18
  92:	3a 03       	fmul	r19, r18
  94:	3a 03       	fmul	r19, r18
  96:	3a 03       	fmul	r19, r18
  98:	3a 03       	fmul	r19, r18
  9a:	3a 03       	fmul	r19, r18
  9c:	3a 03       	fmul	r19, r18
  9e:	3a 03       	fmul	r19, r18
  a0:	3a 03       	fmul	r19, r18
  a2:	3a 03       	fmul	r19, r18
  a4:	3a 03       	fmul	r19, r18
  a6:	3a 03       	fmul	r19, r18
  a8:	3a 03       	fmul	r19, r18
  aa:	3a 03       	fmul	r19, r18
  ac:	3a 03       	fmul	r19, r18
  ae:	3a 03       	fmul	r19, r18
  b0:	3a 03       	fmul	r19, r18
  b2:	f4 03       	fmuls	r23, r20

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e0 e7       	ldi	r30, 0x70	; 112
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 36       	cpi	r26, 0x66	; 102
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 22 03 	call	0x644	; 0x644 <main>
  ea:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_vinit>:
#include "macros.h"
#include "stand.h"
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
  f2:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  f4:	3f 9a       	sbi	0x07, 7	; 7
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
  f8:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  fa:	31 9a       	sbi	0x06, 1	; 6
	/***********************************/
}
  fc:	08 95       	ret

000000fe <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
  fe:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLEAR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
 100:	34 9b       	sbis	0x06, 4	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
 104:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL); //reas the ADCL register
 106:	84 b1       	in	r24, 0x04	; 4
 108:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);//read the whole register
 10a:	45 b1       	in	r20, 0x05	; 5
 10c:	34 2f       	mov	r19, r20
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	82 2b       	or	r24, r18
 112:	93 2b       	or	r25, r19
	return read_val ; // return the converted value
 114:	08 95       	ret

00000116 <DIO_vsetPINDir>:
#include "stand.h"
#include "GPIO.h"

void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 116:	82 34       	cpi	r24, 0x42	; 66
 118:	51 f1       	breq	.+84     	; 0x16e <DIO_vsetPINDir+0x58>
 11a:	83 34       	cpi	r24, 0x43	; 67
 11c:	20 f4       	brcc	.+8      	; 0x126 <DIO_vsetPINDir+0x10>
 11e:	81 34       	cpi	r24, 0x41	; 65
 120:	09 f0       	breq	.+2      	; 0x124 <DIO_vsetPINDir+0xe>
 122:	7b c0       	rjmp	.+246    	; 0x21a <DIO_vsetPINDir+0x104>
 124:	07 c0       	rjmp	.+14     	; 0x134 <DIO_vsetPINDir+0x1e>
 126:	83 34       	cpi	r24, 0x43	; 67
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_vsetPINDir+0x16>
 12a:	3e c0       	rjmp	.+124    	; 0x1a8 <DIO_vsetPINDir+0x92>
 12c:	84 34       	cpi	r24, 0x44	; 68
 12e:	09 f0       	breq	.+2      	; 0x132 <DIO_vsetPINDir+0x1c>
 130:	74 c0       	rjmp	.+232    	; 0x21a <DIO_vsetPINDir+0x104>
 132:	57 c0       	rjmp	.+174    	; 0x1e2 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	69 f4       	brne	.+26     	; 0x152 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_vsetPINDir+0x30>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_vsetPINDir+0x2c>
 14a:	ba 01       	movw	r22, r20
 14c:	62 2b       	or	r22, r18
 14e:	6a bb       	out	0x1a, r22	; 26
 150:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vsetPINDir+0x4a>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vsetPINDir+0x46>
 164:	ba 01       	movw	r22, r20
 166:	60 95       	com	r22
 168:	62 23       	and	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 172:	27 b3       	in	r18, 0x17	; 23
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_vsetPINDir+0x6a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_vsetPINDir+0x66>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	67 bb       	out	0x17, r22	; 23
 18a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 18c:	27 b3       	in	r18, 0x17	; 23
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vsetPINDir+0x84>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vsetPINDir+0x80>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	67 bb       	out	0x17, r22	; 23
 1a6:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1ac:	24 b3       	in	r18, 0x14	; 20
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vsetPINDir+0xa4>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vsetPINDir+0xa0>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	64 bb       	out	0x14, r22	; 20
 1c4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1c6:	24 b3       	in	r18, 0x14	; 20
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_vsetPINDir+0xbe>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_vsetPINDir+0xba>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	64 bb       	out	0x14, r22	; 20
 1e0:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	69 f4       	brne	.+26     	; 0x200 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1e6:	21 b3       	in	r18, 0x11	; 17
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ac 01       	movw	r20, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_vsetPINDir+0xde>
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_vsetPINDir+0xda>
 1f8:	ba 01       	movw	r22, r20
 1fa:	62 2b       	or	r22, r18
 1fc:	61 bb       	out	0x11, r22	; 17
 1fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_vsetPINDir+0xf8>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_vsetPINDir+0xf4>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	08 95       	ret

0000021c <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 21c:	82 34       	cpi	r24, 0x42	; 66
 21e:	51 f1       	breq	.+84     	; 0x274 <DIO_write+0x58>
 220:	83 34       	cpi	r24, 0x43	; 67
 222:	20 f4       	brcc	.+8      	; 0x22c <DIO_write+0x10>
 224:	81 34       	cpi	r24, 0x41	; 65
 226:	09 f0       	breq	.+2      	; 0x22a <DIO_write+0xe>
 228:	7b c0       	rjmp	.+246    	; 0x320 <DIO_write+0x104>
 22a:	07 c0       	rjmp	.+14     	; 0x23a <DIO_write+0x1e>
 22c:	83 34       	cpi	r24, 0x43	; 67
 22e:	09 f4       	brne	.+2      	; 0x232 <DIO_write+0x16>
 230:	3e c0       	rjmp	.+124    	; 0x2ae <DIO_write+0x92>
 232:	84 34       	cpi	r24, 0x44	; 68
 234:	09 f0       	breq	.+2      	; 0x238 <DIO_write+0x1c>
 236:	74 c0       	rjmp	.+232    	; 0x320 <DIO_write+0x104>
 238:	57 c0       	rjmp	.+174    	; 0x2e8 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	69 f4       	brne	.+26     	; 0x258 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0x30>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x2c>
 250:	ba 01       	movw	r22, r20
 252:	62 2b       	or	r22, r18
 254:	6b bb       	out	0x1b, r22	; 27
 256:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 258:	2b b3       	in	r18, 0x1b	; 27
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_write+0x4a>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_write+0x46>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	6b bb       	out	0x1b, r22	; 27
 272:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	69 f4       	brne	.+26     	; 0x292 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 278:	28 b3       	in	r18, 0x18	; 24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ac 01       	movw	r20, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write+0x6a>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write+0x66>
 28a:	ba 01       	movw	r22, r20
 28c:	62 2b       	or	r22, r18
 28e:	68 bb       	out	0x18, r22	; 24
 290:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 292:	28 b3       	in	r18, 0x18	; 24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	ac 01       	movw	r20, r24
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0x84>
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0x80>
 2a4:	ba 01       	movw	r22, r20
 2a6:	60 95       	com	r22
 2a8:	62 23       	and	r22, r18
 2aa:	68 bb       	out	0x18, r22	; 24
 2ac:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	69 f4       	brne	.+26     	; 0x2cc <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0xa4>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0xa0>
 2c4:	ba 01       	movw	r22, r20
 2c6:	62 2b       	or	r22, r18
 2c8:	65 bb       	out	0x15, r22	; 21
 2ca:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 2cc:	25 b3       	in	r18, 0x15	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	ac 01       	movw	r20, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0xbe>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0xba>
 2de:	ba 01       	movw	r22, r20
 2e0:	60 95       	com	r22
 2e2:	62 23       	and	r22, r18
 2e4:	65 bb       	out	0x15, r22	; 21
 2e6:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	69 f4       	brne	.+26     	; 0x306 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	ac 01       	movw	r20, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_write+0xde>
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_write+0xda>
 2fe:	ba 01       	movw	r22, r20
 300:	62 2b       	or	r22, r18
 302:	62 bb       	out	0x12, r22	; 18
 304:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 306:	22 b3       	in	r18, 0x12	; 18
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac 01       	movw	r20, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xf8>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0xf4>
 318:	ba 01       	movw	r22, r20
 31a:	60 95       	com	r22
 31c:	62 23       	and	r22, r18
 31e:	62 bb       	out	0x12, r22	; 18
 320:	08 95       	ret

00000322 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	f1 f0       	breq	.+60     	; 0x362 <DIO_u8read+0x40>
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	20 f4       	brcc	.+8      	; 0x332 <DIO_u8read+0x10>
 32a:	81 34       	cpi	r24, 0x41	; 65
 32c:	09 f0       	breq	.+2      	; 0x330 <DIO_u8read+0xe>
 32e:	4f c0       	rjmp	.+158    	; 0x3ce <DIO_u8read+0xac>
 330:	06 c0       	rjmp	.+12     	; 0x33e <DIO_u8read+0x1c>
 332:	83 34       	cpi	r24, 0x43	; 67
 334:	41 f1       	breq	.+80     	; 0x386 <DIO_u8read+0x64>
 336:	84 34       	cpi	r24, 0x44	; 68
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_u8read+0x1a>
 33a:	49 c0       	rjmp	.+146    	; 0x3ce <DIO_u8read+0xac>
 33c:	36 c0       	rjmp	.+108    	; 0x3aa <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 33e:	29 b3       	in	r18, 0x19	; 25
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	06 2e       	mov	r0, r22
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_u8read+0x2a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_u8read+0x26>
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	82 23       	and	r24, r18
 354:	93 23       	and	r25, r19
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_u8read+0x3a>
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_u8read+0x36>
		break;
 360:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 362:	26 b3       	in	r18, 0x16	; 22
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	06 2e       	mov	r0, r22
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8read+0x4e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8read+0x4a>
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	82 23       	and	r24, r18
 378:	93 23       	and	r25, r19
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8read+0x5e>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8read+0x5a>
		break;
 384:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 386:	23 b3       	in	r18, 0x13	; 19
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	06 2e       	mov	r0, r22
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8read+0x72>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8read+0x6e>
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	82 23       	and	r24, r18
 39c:	93 23       	and	r25, r19
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8read+0x82>
 3a0:	95 95       	asr	r25
 3a2:	87 95       	ror	r24
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8read+0x7e>
		break;
 3a8:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 3aa:	20 b3       	in	r18, 0x10	; 16
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	06 2e       	mov	r0, r22
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8read+0x96>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8read+0x92>
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	82 23       	and	r24, r18
 3c0:	93 23       	and	r25, r19
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_u8read+0xa6>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_u8read+0xa2>
		break;
 3cc:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 3d0:	08 95       	ret

000003d2 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
	switch(portname)
 3d2:	82 34       	cpi	r24, 0x42	; 66
 3d4:	b9 f0       	breq	.+46     	; 0x404 <DIO_toggle+0x32>
 3d6:	83 34       	cpi	r24, 0x43	; 67
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <DIO_toggle+0xe>
 3da:	81 34       	cpi	r24, 0x41	; 65
 3dc:	c9 f5       	brne	.+114    	; 0x450 <DIO_toggle+0x7e>
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <DIO_toggle+0x18>
 3e0:	83 34       	cpi	r24, 0x43	; 67
 3e2:	e9 f0       	breq	.+58     	; 0x41e <DIO_toggle+0x4c>
 3e4:	84 34       	cpi	r24, 0x44	; 68
 3e6:	a1 f5       	brne	.+104    	; 0x450 <DIO_toggle+0x7e>
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 3ea:	2b b3       	in	r18, 0x1b	; 27
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_toggle+0x26>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_toggle+0x22>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 27       	eor	r22, r18
 400:	6b bb       	out	0x1b, r22	; 27
		break;
 402:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_toggle+0x40>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_toggle+0x3c>
 416:	ba 01       	movw	r22, r20
 418:	62 27       	eor	r22, r18
 41a:	68 bb       	out	0x18, r22	; 24
		break;
 41c:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_toggle+0x5a>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_toggle+0x56>
 430:	ba 01       	movw	r22, r20
 432:	62 27       	eor	r22, r18
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 438:	22 b3       	in	r18, 0x12	; 18
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_toggle+0x74>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_toggle+0x70>
 44a:	ba 01       	movw	r22, r20
 44c:	62 27       	eor	r22, r18
 44e:	62 bb       	out	0x12, r22	; 18
 450:	08 95       	ret

00000452 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 452:	82 34       	cpi	r24, 0x42	; 66
 454:	61 f0       	breq	.+24     	; 0x46e <DIO_write_port+0x1c>
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	18 f4       	brcc	.+6      	; 0x460 <DIO_write_port+0xe>
 45a:	81 34       	cpi	r24, 0x41	; 65
 45c:	69 f4       	brne	.+26     	; 0x478 <DIO_write_port+0x26>
 45e:	05 c0       	rjmp	.+10     	; 0x46a <DIO_write_port+0x18>
 460:	83 34       	cpi	r24, 0x43	; 67
 462:	39 f0       	breq	.+14     	; 0x472 <DIO_write_port+0x20>
 464:	84 34       	cpi	r24, 0x44	; 68
 466:	41 f4       	brne	.+16     	; 0x478 <DIO_write_port+0x26>
 468:	06 c0       	rjmp	.+12     	; 0x476 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 46a:	6b bb       	out	0x1b, r22	; 27
		break ;
 46c:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 46e:	68 bb       	out	0x18, r22	; 24
		break ;
 470:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 472:	65 bb       	out	0x15, r22	; 21
		break ;
 474:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 476:	62 bb       	out	0x12, r22	; 18
 478:	08 95       	ret

0000047a <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(uint8 portname,uint8 value)
{
	switch(portname)
 47a:	82 34       	cpi	r24, 0x42	; 66
 47c:	79 f0       	breq	.+30     	; 0x49c <dio_write_highnibble+0x22>
 47e:	83 34       	cpi	r24, 0x43	; 67
 480:	18 f4       	brcc	.+6      	; 0x488 <dio_write_highnibble+0xe>
 482:	81 34       	cpi	r24, 0x41	; 65
 484:	c9 f4       	brne	.+50     	; 0x4b8 <dio_write_highnibble+0x3e>
 486:	05 c0       	rjmp	.+10     	; 0x492 <dio_write_highnibble+0x18>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	69 f0       	breq	.+26     	; 0x4a6 <dio_write_highnibble+0x2c>
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	a1 f4       	brne	.+40     	; 0x4b8 <dio_write_highnibble+0x3e>
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <dio_write_highnibble+0x36>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
 492:	8b b3       	in	r24, 0x1b	; 27
 494:	60 7f       	andi	r22, 0xF0	; 240
 496:	68 2b       	or	r22, r24
 498:	6b bb       	out	0x1b, r22	; 27
		break ;
 49a:	08 95       	ret
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
 49c:	88 b3       	in	r24, 0x18	; 24
 49e:	60 7f       	andi	r22, 0xF0	; 240
 4a0:	68 2b       	or	r22, r24
 4a2:	68 bb       	out	0x18, r22	; 24
		break ;
 4a4:	08 95       	ret
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
 4a6:	85 b3       	in	r24, 0x15	; 21
 4a8:	60 7f       	andi	r22, 0xF0	; 240
 4aa:	68 2b       	or	r22, r24
 4ac:	65 bb       	out	0x15, r22	; 21
		break ;
 4ae:	08 95       	ret
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
 4b0:	82 b3       	in	r24, 0x12	; 18
 4b2:	60 7f       	andi	r22, 0xF0	; 240
 4b4:	68 2b       	or	r22, r24
 4b6:	62 bb       	out	0x12, r22	; 18
 4b8:	08 95       	ret

000004ba <clear_high_nibble>:
	}
}

void clear_high_nibble(uint8 portname)
{
	switch(portname)
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	71 f0       	breq	.+28     	; 0x4da <clear_high_nibble+0x20>
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <clear_high_nibble+0xe>
 4c2:	81 34       	cpi	r24, 0x41	; 65
 4c4:	a9 f4       	brne	.+42     	; 0x4f0 <clear_high_nibble+0x36>
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <clear_high_nibble+0x18>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	59 f0       	breq	.+22     	; 0x4e2 <clear_high_nibble+0x28>
 4cc:	84 34       	cpi	r24, 0x44	; 68
 4ce:	81 f4       	brne	.+32     	; 0x4f0 <clear_high_nibble+0x36>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
 4d2:	8b b3       	in	r24, 0x1b	; 27
 4d4:	8f 70       	andi	r24, 0x0F	; 15
 4d6:	8b bb       	out	0x1b, r24	; 27
		break ;
 4d8:	08 95       	ret
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
 4da:	88 b3       	in	r24, 0x18	; 24
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	88 bb       	out	0x18, r24	; 24
		break ;
 4e0:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
 4e2:	85 b3       	in	r24, 0x15	; 21
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	85 bb       	out	0x15, r24	; 21
		break ;
 4e8:	08 95       	ret
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
 4ea:	82 b3       	in	r24, 0x12	; 18
 4ec:	8f 70       	andi	r24, 0x0F	; 15
 4ee:	82 bb       	out	0x12, r24	; 18
 4f0:	08 95       	ret

000004f2 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
 4f2:	82 34       	cpi	r24, 0x42	; 66
 4f4:	79 f1       	breq	.+94     	; 0x554 <DIO_vconnectpullup+0x62>
 4f6:	83 34       	cpi	r24, 0x43	; 67
 4f8:	20 f4       	brcc	.+8      	; 0x502 <DIO_vconnectpullup+0x10>
 4fa:	81 34       	cpi	r24, 0x41	; 65
 4fc:	09 f0       	breq	.+2      	; 0x500 <DIO_vconnectpullup+0xe>
 4fe:	8f c0       	rjmp	.+286    	; 0x61e <DIO_vconnectpullup+0x12c>
 500:	07 c0       	rjmp	.+14     	; 0x510 <DIO_vconnectpullup+0x1e>
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	09 f4       	brne	.+2      	; 0x508 <DIO_vconnectpullup+0x16>
 506:	48 c0       	rjmp	.+144    	; 0x598 <DIO_vconnectpullup+0xa6>
 508:	84 34       	cpi	r24, 0x44	; 68
 50a:	09 f0       	breq	.+2      	; 0x50e <DIO_vconnectpullup+0x1c>
 50c:	88 c0       	rjmp	.+272    	; 0x61e <DIO_vconnectpullup+0x12c>
 50e:	66 c0       	rjmp	.+204    	; 0x5dc <DIO_vconnectpullup+0xea>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
 510:	41 30       	cpi	r20, 0x01	; 1
 512:	91 f4       	brne	.+36     	; 0x538 <DIO_vconnectpullup+0x46>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRA,pinnumber);
 514:	2a b3       	in	r18, 0x1a	; 26
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ac 01       	movw	r20, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_vconnectpullup+0x30>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_vconnectpullup+0x2c>
 526:	ba 01       	movw	r22, r20
 528:	84 2f       	mov	r24, r20
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pinnumber);
 530:	8b b3       	in	r24, 0x1b	; 27
 532:	68 2b       	or	r22, r24
 534:	6b bb       	out	0x1b, r22	; 27
 536:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 538:	2b b3       	in	r18, 0x1b	; 27
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	ac 01       	movw	r20, r24
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_vconnectpullup+0x54>
 542:	44 0f       	add	r20, r20
 544:	55 1f       	adc	r21, r21
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_vconnectpullup+0x50>
 54a:	ba 01       	movw	r22, r20
 54c:	60 95       	com	r22
 54e:	62 23       	and	r22, r18
 550:	6b bb       	out	0x1b, r22	; 27
 552:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
 554:	41 30       	cpi	r20, 0x01	; 1
 556:	91 f4       	brne	.+36     	; 0x57c <DIO_vconnectpullup+0x8a>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRB,pinnumber);
 558:	27 b3       	in	r18, 0x17	; 23
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	ac 01       	movw	r20, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_vconnectpullup+0x74>
 562:	44 0f       	add	r20, r20
 564:	55 1f       	adc	r21, r21
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_vconnectpullup+0x70>
 56a:	ba 01       	movw	r22, r20
 56c:	84 2f       	mov	r24, r20
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pinnumber);
 574:	88 b3       	in	r24, 0x18	; 24
 576:	68 2b       	or	r22, r24
 578:	68 bb       	out	0x18, r22	; 24
 57a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	ac 01       	movw	r20, r24
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_vconnectpullup+0x98>
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_vconnectpullup+0x94>
 58e:	ba 01       	movw	r22, r20
 590:	60 95       	com	r22
 592:	62 23       	and	r22, r18
 594:	68 bb       	out	0x18, r22	; 24
 596:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
 598:	41 30       	cpi	r20, 0x01	; 1
 59a:	91 f4       	brne	.+36     	; 0x5c0 <DIO_vconnectpullup+0xce>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRC,pinnumber);
 59c:	24 b3       	in	r18, 0x14	; 20
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	ac 01       	movw	r20, r24
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_vconnectpullup+0xb8>
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_vconnectpullup+0xb4>
 5ae:	ba 01       	movw	r22, r20
 5b0:	84 2f       	mov	r24, r20
 5b2:	80 95       	com	r24
 5b4:	82 23       	and	r24, r18
 5b6:	84 bb       	out	0x14, r24	; 20
			SET_BIT(PORTC,pinnumber);
 5b8:	85 b3       	in	r24, 0x15	; 21
 5ba:	68 2b       	or	r22, r24
 5bc:	65 bb       	out	0x15, r22	; 21
 5be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 5c0:	25 b3       	in	r18, 0x15	; 21
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	ac 01       	movw	r20, r24
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_vconnectpullup+0xdc>
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_vconnectpullup+0xd8>
 5d2:	ba 01       	movw	r22, r20
 5d4:	60 95       	com	r22
 5d6:	62 23       	and	r22, r18
 5d8:	65 bb       	out	0x15, r22	; 21
 5da:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
 5dc:	41 30       	cpi	r20, 0x01	; 1
 5de:	91 f4       	brne	.+36     	; 0x604 <DIO_vconnectpullup+0x112>
		{
			//CLR_BIT(SFIOR,PUD);
			CLR_BIT(DDRD,pinnumber);
 5e0:	21 b3       	in	r18, 0x11	; 17
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	ac 01       	movw	r20, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_vconnectpullup+0xfc>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_vconnectpullup+0xf8>
 5f2:	ba 01       	movw	r22, r20
 5f4:	84 2f       	mov	r24, r20
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	81 bb       	out	0x11, r24	; 17
			SET_BIT(PORTD,pinnumber);
 5fc:	82 b3       	in	r24, 0x12	; 18
 5fe:	68 2b       	or	r22, r24
 600:	62 bb       	out	0x12, r22	; 18
 602:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 604:	22 b3       	in	r18, 0x12	; 18
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	ac 01       	movw	r20, r24
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_vconnectpullup+0x120>
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_vconnectpullup+0x11c>
 616:	ba 01       	movw	r22, r20
 618:	60 95       	com	r22
 61a:	62 23       	and	r22, r18
 61c:	62 bb       	out	0x12, r22	; 18
 61e:	08 95       	ret

00000620 <LED_vInit>:
*  Author: Mohamed Zaghlol
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_vsetPINDir>
}
 626:	08 95       	ret

00000628 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write>
}
 62e:	08 95       	ret

00000630 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write>
}
 636:	08 95       	ret

00000638 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 638:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_toggle>
}
 63c:	08 95       	ret

0000063e <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 63e:	0e 94 91 01 	call	0x322	; 0x322 <DIO_u8read>
}
 642:	08 95       	ret

00000644 <main>:
volatile uint8 required_temperature=24;  //default temp
volatile uint16	Temp_SensRead=0;
//uint8 AIR_COND_POS=OFF_STATUS;
int main(void)
{
	ADC_vinit();//initialize the ADC of the micro controller
 644:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_vinit>
//	timer0_initializeCTC();//Initialize the timer zero of the micro controller
	SPI_vInitSlave();//initialize the SPI as a slave
 648:	0e 94 60 04 	call	0x8c0	; 0x8c0 <SPI_vInitSlave>
	

	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 64c:	81 e4       	ldi	r24, 0x41	; 65
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	0e 94 10 03 	call	0x620	; 0x620 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 654:	81 e4       	ldi	r24, 0x41	; 65
 656:	62 e0       	ldi	r22, 0x02	; 2
 658:	0e 94 10 03 	call	0x620	; 0x620 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 65c:	81 e4       	ldi	r24, 0x41	; 65
 65e:	63 e0       	ldi	r22, 0x03	; 3
 660:	0e 94 10 03 	call	0x620	; 0x620 <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
 664:	81 e4       	ldi	r24, 0x41	; 65
 666:	64 e0       	ldi	r22, 0x04	; 4
 668:	0e 94 10 03 	call	0x620	; 0x620 <LED_vInit>
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
 66c:	81 e4       	ldi	r24, 0x41	; 65
 66e:	65 e0       	ldi	r22, 0x05	; 5
 670:	0e 94 10 03 	call	0x620	; 0x620 <LED_vInit>

		
    while(1)
    {
		SPI_RESPONSE=SPI_ui8TransmitRecive(DEFAULT_ACK);
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
 67a:	80 93 65 00 	sts	0x0065, r24
		switch (SPI_RESPONSE)
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	41 97       	sbiw	r24, 0x11	; 17
 682:	80 33       	cpi	r24, 0x30	; 48
 684:	91 05       	cpc	r25, r1
 686:	b0 f7       	brcc	.-20     	; 0x674 <main+0x30>
 688:	86 5d       	subi	r24, 0xD6	; 214
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	fc 01       	movw	r30, r24
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	05 90       	lpm	r0, Z+
 694:	f4 91       	lpm	r31, Z
 696:	e0 2d       	mov	r30, r0
 698:	09 94       	ijmp
		{
		case ROOM1_STATUS:
		if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led turned off
 69a:	81 e4       	ldi	r24, 0x41	; 65
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 6a2:	88 23       	and	r24, r24
 6a4:	19 f4       	brne	.+6      	; 0x6ac <main+0x68>
		{
			SPI_RESPONSE=OFF_STATUS;  
 6a6:	10 92 65 00 	sts	0x0065, r1
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <main+0x78>
		} 
		else if(LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//IF THE LED TURNED ON
 6ac:	81 e4       	ldi	r24, 0x41	; 65
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	11 f4       	brne	.+4      	; 0x6bc <main+0x78>
		{
			SPI_RESPONSE=ON_STATUS;
 6b8:	80 93 65 00 	sts	0x0065, r24
		}		
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);	
 6bc:	80 91 65 00 	lds	r24, 0x0065
 6c0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
			break;
 6c4:	d7 cf       	rjmp	.-82     	; 0x674 <main+0x30>
			
		case ROOM2_STATUS:
		if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led turned off
 6c6:	81 e4       	ldi	r24, 0x41	; 65
 6c8:	62 e0       	ldi	r22, 0x02	; 2
 6ca:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 6ce:	88 23       	and	r24, r24
 6d0:	19 f4       	brne	.+6      	; 0x6d8 <main+0x94>
		{
			SPI_RESPONSE=OFF_STATUS;
 6d2:	10 92 65 00 	sts	0x0065, r1
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <main+0xa4>
		}
		else if(LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//IF THE LED TURNED ON
 6d8:	81 e4       	ldi	r24, 0x41	; 65
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	11 f4       	brne	.+4      	; 0x6e8 <main+0xa4>
		{
			SPI_RESPONSE=ON_STATUS;
 6e4:	80 93 65 00 	sts	0x0065, r24
		}
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);
 6e8:	80 91 65 00 	lds	r24, 0x0065
 6ec:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
		break;	
 6f0:	c1 cf       	rjmp	.-126    	; 0x674 <main+0x30>
		
		case ROOM3_STATUS:
		if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led turned off
 6f2:	81 e4       	ldi	r24, 0x41	; 65
 6f4:	63 e0       	ldi	r22, 0x03	; 3
 6f6:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 6fa:	88 23       	and	r24, r24
 6fc:	19 f4       	brne	.+6      	; 0x704 <main+0xc0>
		{
			SPI_RESPONSE=OFF_STATUS;
 6fe:	10 92 65 00 	sts	0x0065, r1
 702:	08 c0       	rjmp	.+16     	; 0x714 <main+0xd0>
		}
		else if(LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//IF THE LED TURNED ON
 704:	81 e4       	ldi	r24, 0x41	; 65
 706:	63 e0       	ldi	r22, 0x03	; 3
 708:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	11 f4       	brne	.+4      	; 0x714 <main+0xd0>
		{
			SPI_RESPONSE=ON_STATUS;
 710:	80 93 65 00 	sts	0x0065, r24
		}
		
		SPI_ui8TransmitRecive(SPI_RESPONSE);
 714:	80 91 65 00 	lds	r24, 0x0065
 718:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
		break;	
 71c:	ab cf       	rjmp	.-170    	; 0x674 <main+0x30>
		case AIR_COND_STATUS:
		if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
 71e:	81 e4       	ldi	r24, 0x41	; 65
 720:	65 e0       	ldi	r22, 0x05	; 5
 722:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 726:	88 23       	and	r24, r24
 728:	19 f4       	brne	.+6      	; 0x730 <main+0xec>
		{
			SPI_RESPONSE = OFF_STATUS;//set the response as off status
 72a:	10 92 65 00 	sts	0x0065, r1
 72e:	08 c0       	rjmp	.+16     	; 0x740 <main+0xfc>
		}
		else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
 730:	81 e4       	ldi	r24, 0x41	; 65
 732:	65 e0       	ldi	r22, 0x05	; 5
 734:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	11 f4       	brne	.+4      	; 0x740 <main+0xfc>
		{
			SPI_RESPONSE = ON_STATUS;//set the response as on status
 73c:	80 93 65 00 	sts	0x0065, r24
		}
		SPI_ui8TransmitRecive(SPI_RESPONSE);//response to the transmitter with the status
 740:	80 91 65 00 	lds	r24, 0x0065
 744:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
		break;
 748:	95 cf       	rjmp	.-214    	; 0x674 <main+0x30>
		case TEMP_STATUS:

			SPI_RESPONSE = required_temperature;
 74a:	80 91 60 00 	lds	r24, 0x0060
 74e:	80 93 65 00 	sts	0x0065, r24
			SPI_ui8TransmitRecive(SPI_RESPONSE);//response to the transmitter with the status
 752:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
		break;
 756:	8e cf       	rjmp	.-228    	; 0x674 <main+0x30>
		case TV_STATUS:
		if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
 758:	81 e4       	ldi	r24, 0x41	; 65
 75a:	64 e0       	ldi	r22, 0x04	; 4
 75c:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 760:	88 23       	and	r24, r24
 762:	19 f4       	brne	.+6      	; 0x76a <main+0x126>
		{
			SPI_RESPONSE = OFF_STATUS;//set the response as off status
 764:	10 92 65 00 	sts	0x0065, r1
 768:	08 c0       	rjmp	.+16     	; 0x77a <main+0x136>
		}
		else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
 76a:	81 e4       	ldi	r24, 0x41	; 65
 76c:	64 e0       	ldi	r22, 0x04	; 4
 76e:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_u8ReadStatus>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	11 f4       	brne	.+4      	; 0x77a <main+0x136>
		{
			SPI_RESPONSE = ON_STATUS;//set the response as on status
 776:	80 93 65 00 	sts	0x0065, r24
		}
		SPI_ui8TransmitRecive(SPI_RESPONSE);//response to the transmitter with the status
 77a:	80 91 65 00 	lds	r24, 0x0065
 77e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
		break;//break the switch case
 782:	78 cf       	rjmp	.-272    	; 0x674 <main+0x30>
			
		/*********************************   TURN ON COMMANDS ********************************/
		case ROOM1_TURN_ON:
		LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 784:	81 e4       	ldi	r24, 0x41	; 65
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	0e 94 14 03 	call	0x628	; 0x628 <LED_vTurnOn>
		break;//break the switch case
 78c:	73 cf       	rjmp	.-282    	; 0x674 <main+0x30>
		case ROOM2_TURN_ON:
		LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 78e:	81 e4       	ldi	r24, 0x41	; 65
 790:	62 e0       	ldi	r22, 0x02	; 2
 792:	0e 94 14 03 	call	0x628	; 0x628 <LED_vTurnOn>
		break;//break the switch case
 796:	6e cf       	rjmp	.-292    	; 0x674 <main+0x30>
		case ROOM3_TURN_ON:
		LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 798:	81 e4       	ldi	r24, 0x41	; 65
 79a:	63 e0       	ldi	r22, 0x03	; 3
 79c:	0e 94 14 03 	call	0x628	; 0x628 <LED_vTurnOn>
		break;//break the switch case
 7a0:	69 cf       	rjmp	.-302    	; 0x674 <main+0x30>
		case AIR_COND_TURN_ON:
		timer0_initializeCTC();		
 7a2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <timer0_initializeCTC>
		//LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
		break;//break the switch case
 7a6:	66 cf       	rjmp	.-308    	; 0x674 <main+0x30>
		case TV_TURN_ON:
		LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
 7a8:	81 e4       	ldi	r24, 0x41	; 65
 7aa:	64 e0       	ldi	r22, 0x04	; 4
 7ac:	0e 94 14 03 	call	0x628	; 0x628 <LED_vTurnOn>
		break;//break the switch case
 7b0:	61 cf       	rjmp	.-318    	; 0x674 <main+0x30>
			
		/*********************************   TURN OFF COMMANDS ********************************/
		case ROOM1_TURN_OFF:
		LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
		break;//break the switch case
 7ba:	5c cf       	rjmp	.-328    	; 0x674 <main+0x30>
		case ROOM2_TURN_OFF:
		LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 7bc:	81 e4       	ldi	r24, 0x41	; 65
 7be:	62 e0       	ldi	r22, 0x02	; 2
 7c0:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
		break;//break the switch case
 7c4:	57 cf       	rjmp	.-338    	; 0x674 <main+0x30>
		case ROOM3_TURN_OFF:
		LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 7c6:	81 e4       	ldi	r24, 0x41	; 65
 7c8:	63 e0       	ldi	r22, 0x03	; 3
 7ca:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
		break;//break the switch case
 7ce:	52 cf       	rjmp	.-348    	; 0x674 <main+0x30>
		case AIR_COND_TURN_OFF:
		timer0_stop();
 7d0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <timer0_stop>
		LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
 7d4:	81 e4       	ldi	r24, 0x41	; 65
 7d6:	65 e0       	ldi	r22, 0x05	; 5
 7d8:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
		break;//break the switch case
 7dc:	4b cf       	rjmp	.-362    	; 0x674 <main+0x30>
		case TV_TURN_OFF:
		LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
 7de:	81 e4       	ldi	r24, 0x41	; 65
 7e0:	64 e0       	ldi	r22, 0x04	; 4
 7e2:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
		break;//break the switch case
 7e6:	46 cf       	rjmp	.-372    	; 0x674 <main+0x30>
		
		/*********************************   Set temperature   ********************************/
		case SET_TEMPERATURE:
		required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_ui8TransmitRecive>
 7ee:	80 93 60 00 	sts	0x0060, r24
		break;//break the switch case		
 7f2:	40 cf       	rjmp	.-384    	; 0x674 <main+0x30>

000007f4 <__vector_10>:
		 }
	  }
}

ISR(TIMER0_COMP_vect)
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	2f 93       	push	r18
 800:	3f 93       	push	r19
 802:	4f 93       	push	r20
 804:	5f 93       	push	r21
 806:	6f 93       	push	r22
 808:	7f 93       	push	r23
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	af 93       	push	r26
 810:	bf 93       	push	r27
 812:	ef 93       	push	r30
 814:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 816:	80 91 64 00 	lds	r24, 0x0064
 81a:	8f 5f       	subi	r24, 0xFF	; 255
 81c:	80 93 64 00 	sts	0x0064, r24
	if(counter>=10)//do that code every 10 ticks
 820:	80 91 64 00 	lds	r24, 0x0064
 824:	8a 30       	cpi	r24, 0x0A	; 10
 826:	a0 f1       	brcs	.+104    	; 0x890 <__stack+0x31>
	{	
		counter=0;
 828:	10 92 64 00 	sts	0x0064, r1
	Temp_SensRead =(0.25*ADC_u16Read());
 82c:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_u16Read>
 830:	bc 01       	movw	r22, r24
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 45 05 	call	0xa8a	; 0xa8a <__floatunsisf>
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	40 e8       	ldi	r20, 0x80	; 128
 840:	5e e3       	ldi	r21, 0x3E	; 62
 842:	0e 94 d3 05 	call	0xba6	; 0xba6 <__mulsf3>
 846:	0e 94 19 05 	call	0xa32	; 0xa32 <__fixunssfsi>
 84a:	dc 01       	movw	r26, r24
 84c:	cb 01       	movw	r24, r22
 84e:	90 93 63 00 	sts	0x0063, r25
 852:	80 93 62 00 	sts	0x0062, r24
	if (Temp_SensRead<required_temperature)
 856:	20 91 60 00 	lds	r18, 0x0060
 85a:	80 91 62 00 	lds	r24, 0x0062
 85e:	90 91 63 00 	lds	r25, 0x0063
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	82 17       	cp	r24, r18
 866:	93 07       	cpc	r25, r19
 868:	28 f4       	brcc	.+10     	; 0x874 <__stack+0x15>
	{
		LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);
 86a:	81 e4       	ldi	r24, 0x41	; 65
 86c:	65 e0       	ldi	r22, 0x05	; 5
 86e:	0e 94 18 03 	call	0x630	; 0x630 <LED_vTurnOff>
 872:	0e c0       	rjmp	.+28     	; 0x890 <__stack+0x31>
	}
	else if (Temp_SensRead>required_temperature)
 874:	20 91 60 00 	lds	r18, 0x0060
 878:	80 91 62 00 	lds	r24, 0x0062
 87c:	90 91 63 00 	lds	r25, 0x0063
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	28 17       	cp	r18, r24
 884:	39 07       	cpc	r19, r25
 886:	20 f4       	brcc	.+8      	; 0x890 <__stack+0x31>
	{
		LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);
 888:	81 e4       	ldi	r24, 0x41	; 65
 88a:	65 e0       	ldi	r22, 0x05	; 5
 88c:	0e 94 14 03 	call	0x628	; 0x628 <LED_vTurnOn>
	}
	}	
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <SPI_vInitMaster>:
#include "SPI.h"


void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
 8b2:	87 b3       	in	r24, 0x17	; 23
 8b4:	80 6b       	ori	r24, 0xB0	; 176
 8b6:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
 8b8:	8d b1       	in	r24, 0x0d	; 13
 8ba:	81 65       	ori	r24, 0x51	; 81
 8bc:	8d b9       	out	0x0d, r24	; 13
}
 8be:	08 95       	ret

000008c0 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 8c0:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 8c2:	6e 9a       	sbi	0x0d, 6	; 13
}
 8c4:	08 95       	ret

000008c6 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 8c6:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 8c8:	77 9b       	sbis	0x0e, 7	; 14
 8ca:	fe cf       	rjmp	.-4      	; 0x8c8 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 8cc:	8f b1       	in	r24, 0x0f	; 15
 8ce:	08 95       	ret

000008d0 <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 8d0:	8e e4       	ldi	r24, 0x4E	; 78
 8d2:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	88 60       	ori	r24, 0x08	; 8
 8d8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	8f 7b       	andi	r24, 0xBF	; 191
 8de:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	8d 7f       	andi	r24, 0xFD	; 253
 8ea:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 8ec:	83 b7       	in	r24, 0x33	; 51
 8ee:	84 60       	ori	r24, 0x04	; 4
 8f0:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 8f2:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 8f4:	89 b7       	in	r24, 0x39	; 57
 8f6:	82 60       	ori	r24, 0x02	; 2
 8f8:	89 bf       	out	0x39, r24	; 57
}
 8fa:	08 95       	ret

000008fc <timer0_stop>:

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	8e 7f       	andi	r24, 0xFE	; 254
 900:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 902:	83 b7       	in	r24, 0x33	; 51
 904:	8d 7f       	andi	r24, 0xFD	; 253
 906:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	8b 7f       	andi	r24, 0xFB	; 251
 90c:	83 bf       	out	0x33, r24	; 51
}
 90e:	08 95       	ret

00000910 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
 910:	80 e8       	ldi	r24, 0x80	; 128
 912:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00);
 914:	83 b7       	in	r24, 0x33	; 51
 916:	80 64       	ori	r24, 0x40	; 64
 918:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 91a:	83 b7       	in	r24, 0x33	; 51
 91c:	88 60       	ori	r24, 0x08	; 8
 91e:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 920:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
 922:	83 b7       	in	r24, 0x33	; 51
 924:	80 62       	ori	r24, 0x20	; 32
 926:	83 bf       	out	0x33, r24	; 51
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
 928:	89 b7       	in	r24, 0x39	; 57
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	89 bf       	out	0x39, r24	; 57
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	81 60       	ori	r24, 0x01	; 1
 932:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 934:	83 b7       	in	r24, 0x33	; 51
 936:	8d 7f       	andi	r24, 0xFD	; 253
 938:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 93a:	83 b7       	in	r24, 0x33	; 51
 93c:	84 60       	ori	r24, 0x04	; 4
 93e:	83 bf       	out	0x33, r24	; 51
}
 940:	08 95       	ret

00000942 <change_dutycycle>:
void change_dutycycle(float64 duty)
{
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	48 ec       	ldi	r20, 0xC8	; 200
 948:	52 e4       	ldi	r21, 0x42	; 66
 94a:	0e 94 b1 04 	call	0x962	; 0x962 <__divsf3>
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	40 e8       	ldi	r20, 0x80	; 128
 954:	53 e4       	ldi	r21, 0x43	; 67
 956:	0e 94 d3 05 	call	0xba6	; 0xba6 <__mulsf3>
 95a:	0e 94 19 05 	call	0xa32	; 0xa32 <__fixunssfsi>
 95e:	6c bf       	out	0x3c, r22	; 60
}
 960:	08 95       	ret

00000962 <__divsf3>:
 962:	0c d0       	rcall	.+24     	; 0x97c <__divsf3x>
 964:	e6 c0       	rjmp	.+460    	; 0xb32 <__fp_round>
 966:	de d0       	rcall	.+444    	; 0xb24 <__fp_pscB>
 968:	40 f0       	brcs	.+16     	; 0x97a <__divsf3+0x18>
 96a:	d5 d0       	rcall	.+426    	; 0xb16 <__fp_pscA>
 96c:	30 f0       	brcs	.+12     	; 0x97a <__divsf3+0x18>
 96e:	21 f4       	brne	.+8      	; 0x978 <__divsf3+0x16>
 970:	5f 3f       	cpi	r21, 0xFF	; 255
 972:	19 f0       	breq	.+6      	; 0x97a <__divsf3+0x18>
 974:	c7 c0       	rjmp	.+398    	; 0xb04 <__fp_inf>
 976:	51 11       	cpse	r21, r1
 978:	10 c1       	rjmp	.+544    	; 0xb9a <__fp_szero>
 97a:	ca c0       	rjmp	.+404    	; 0xb10 <__fp_nan>

0000097c <__divsf3x>:
 97c:	eb d0       	rcall	.+470    	; 0xb54 <__fp_split3>
 97e:	98 f3       	brcs	.-26     	; 0x966 <__divsf3+0x4>

00000980 <__divsf3_pse>:
 980:	99 23       	and	r25, r25
 982:	c9 f3       	breq	.-14     	; 0x976 <__divsf3+0x14>
 984:	55 23       	and	r21, r21
 986:	b1 f3       	breq	.-20     	; 0x974 <__divsf3+0x12>
 988:	95 1b       	sub	r25, r21
 98a:	55 0b       	sbc	r21, r21
 98c:	bb 27       	eor	r27, r27
 98e:	aa 27       	eor	r26, r26
 990:	62 17       	cp	r22, r18
 992:	73 07       	cpc	r23, r19
 994:	84 07       	cpc	r24, r20
 996:	38 f0       	brcs	.+14     	; 0x9a6 <__divsf3_pse+0x26>
 998:	9f 5f       	subi	r25, 0xFF	; 255
 99a:	5f 4f       	sbci	r21, 0xFF	; 255
 99c:	22 0f       	add	r18, r18
 99e:	33 1f       	adc	r19, r19
 9a0:	44 1f       	adc	r20, r20
 9a2:	aa 1f       	adc	r26, r26
 9a4:	a9 f3       	breq	.-22     	; 0x990 <__divsf3_pse+0x10>
 9a6:	33 d0       	rcall	.+102    	; 0xa0e <__divsf3_pse+0x8e>
 9a8:	0e 2e       	mov	r0, r30
 9aa:	3a f0       	brmi	.+14     	; 0x9ba <__divsf3_pse+0x3a>
 9ac:	e0 e8       	ldi	r30, 0x80	; 128
 9ae:	30 d0       	rcall	.+96     	; 0xa10 <__divsf3_pse+0x90>
 9b0:	91 50       	subi	r25, 0x01	; 1
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	e6 95       	lsr	r30
 9b6:	00 1c       	adc	r0, r0
 9b8:	ca f7       	brpl	.-14     	; 0x9ac <__divsf3_pse+0x2c>
 9ba:	29 d0       	rcall	.+82     	; 0xa0e <__divsf3_pse+0x8e>
 9bc:	fe 2f       	mov	r31, r30
 9be:	27 d0       	rcall	.+78     	; 0xa0e <__divsf3_pse+0x8e>
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	bb 1f       	adc	r27, r27
 9c8:	26 17       	cp	r18, r22
 9ca:	37 07       	cpc	r19, r23
 9cc:	48 07       	cpc	r20, r24
 9ce:	ab 07       	cpc	r26, r27
 9d0:	b0 e8       	ldi	r27, 0x80	; 128
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__divsf3_pse+0x56>
 9d4:	bb 0b       	sbc	r27, r27
 9d6:	80 2d       	mov	r24, r0
 9d8:	bf 01       	movw	r22, r30
 9da:	ff 27       	eor	r31, r31
 9dc:	93 58       	subi	r25, 0x83	; 131
 9de:	5f 4f       	sbci	r21, 0xFF	; 255
 9e0:	2a f0       	brmi	.+10     	; 0x9ec <__divsf3_pse+0x6c>
 9e2:	9e 3f       	cpi	r25, 0xFE	; 254
 9e4:	51 05       	cpc	r21, r1
 9e6:	68 f0       	brcs	.+26     	; 0xa02 <__divsf3_pse+0x82>
 9e8:	8d c0       	rjmp	.+282    	; 0xb04 <__fp_inf>
 9ea:	d7 c0       	rjmp	.+430    	; 0xb9a <__fp_szero>
 9ec:	5f 3f       	cpi	r21, 0xFF	; 255
 9ee:	ec f3       	brlt	.-6      	; 0x9ea <__divsf3_pse+0x6a>
 9f0:	98 3e       	cpi	r25, 0xE8	; 232
 9f2:	dc f3       	brlt	.-10     	; 0x9ea <__divsf3_pse+0x6a>
 9f4:	86 95       	lsr	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b7 95       	ror	r27
 9fc:	f7 95       	ror	r31
 9fe:	9f 5f       	subi	r25, 0xFF	; 255
 a00:	c9 f7       	brne	.-14     	; 0x9f4 <__divsf3_pse+0x74>
 a02:	88 0f       	add	r24, r24
 a04:	91 1d       	adc	r25, r1
 a06:	96 95       	lsr	r25
 a08:	87 95       	ror	r24
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret
 a0e:	e1 e0       	ldi	r30, 0x01	; 1
 a10:	66 0f       	add	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	bb 1f       	adc	r27, r27
 a18:	62 17       	cp	r22, r18
 a1a:	73 07       	cpc	r23, r19
 a1c:	84 07       	cpc	r24, r20
 a1e:	ba 07       	cpc	r27, r26
 a20:	20 f0       	brcs	.+8      	; 0xa2a <__divsf3_pse+0xaa>
 a22:	62 1b       	sub	r22, r18
 a24:	73 0b       	sbc	r23, r19
 a26:	84 0b       	sbc	r24, r20
 a28:	ba 0b       	sbc	r27, r26
 a2a:	ee 1f       	adc	r30, r30
 a2c:	88 f7       	brcc	.-30     	; 0xa10 <__divsf3_pse+0x90>
 a2e:	e0 95       	com	r30
 a30:	08 95       	ret

00000a32 <__fixunssfsi>:
 a32:	98 d0       	rcall	.+304    	; 0xb64 <__fp_splitA>
 a34:	88 f0       	brcs	.+34     	; 0xa58 <__fixunssfsi+0x26>
 a36:	9f 57       	subi	r25, 0x7F	; 127
 a38:	90 f0       	brcs	.+36     	; 0xa5e <__fixunssfsi+0x2c>
 a3a:	b9 2f       	mov	r27, r25
 a3c:	99 27       	eor	r25, r25
 a3e:	b7 51       	subi	r27, 0x17	; 23
 a40:	a0 f0       	brcs	.+40     	; 0xa6a <__fixunssfsi+0x38>
 a42:	d1 f0       	breq	.+52     	; 0xa78 <__fixunssfsi+0x46>
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a f0       	brmi	.+6      	; 0xa54 <__fixunssfsi+0x22>
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__fixunssfsi+0x12>
 a52:	12 c0       	rjmp	.+36     	; 0xa78 <__fixunssfsi+0x46>
 a54:	b1 30       	cpi	r27, 0x01	; 1
 a56:	81 f0       	breq	.+32     	; 0xa78 <__fixunssfsi+0x46>
 a58:	9f d0       	rcall	.+318    	; 0xb98 <__fp_zero>
 a5a:	b1 e0       	ldi	r27, 0x01	; 1
 a5c:	08 95       	ret
 a5e:	9c c0       	rjmp	.+312    	; 0xb98 <__fp_zero>
 a60:	67 2f       	mov	r22, r23
 a62:	78 2f       	mov	r23, r24
 a64:	88 27       	eor	r24, r24
 a66:	b8 5f       	subi	r27, 0xF8	; 248
 a68:	39 f0       	breq	.+14     	; 0xa78 <__fixunssfsi+0x46>
 a6a:	b9 3f       	cpi	r27, 0xF9	; 249
 a6c:	cc f3       	brlt	.-14     	; 0xa60 <__fixunssfsi+0x2e>
 a6e:	86 95       	lsr	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b3 95       	inc	r27
 a76:	d9 f7       	brne	.-10     	; 0xa6e <__fixunssfsi+0x3c>
 a78:	3e f4       	brtc	.+14     	; 0xa88 <__fixunssfsi+0x56>
 a7a:	90 95       	com	r25
 a7c:	80 95       	com	r24
 a7e:	70 95       	com	r23
 a80:	61 95       	neg	r22
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__floatunsisf>:
 a8a:	e8 94       	clt
 a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <__floatsisf+0x12>

00000a8e <__floatsisf>:
 a8e:	97 fb       	bst	r25, 7
 a90:	3e f4       	brtc	.+14     	; 0xaa0 <__floatsisf+0x12>
 a92:	90 95       	com	r25
 a94:	80 95       	com	r24
 a96:	70 95       	com	r23
 a98:	61 95       	neg	r22
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	99 23       	and	r25, r25
 aa2:	a9 f0       	breq	.+42     	; 0xace <__floatsisf+0x40>
 aa4:	f9 2f       	mov	r31, r25
 aa6:	96 e9       	ldi	r25, 0x96	; 150
 aa8:	bb 27       	eor	r27, r27
 aaa:	93 95       	inc	r25
 aac:	f6 95       	lsr	r31
 aae:	87 95       	ror	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b7 95       	ror	r27
 ab6:	f1 11       	cpse	r31, r1
 ab8:	f8 cf       	rjmp	.-16     	; 0xaaa <__floatsisf+0x1c>
 aba:	fa f4       	brpl	.+62     	; 0xafa <__floatsisf+0x6c>
 abc:	bb 0f       	add	r27, r27
 abe:	11 f4       	brne	.+4      	; 0xac4 <__floatsisf+0x36>
 ac0:	60 ff       	sbrs	r22, 0
 ac2:	1b c0       	rjmp	.+54     	; 0xafa <__floatsisf+0x6c>
 ac4:	6f 5f       	subi	r22, 0xFF	; 255
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	16 c0       	rjmp	.+44     	; 0xafa <__floatsisf+0x6c>
 ace:	88 23       	and	r24, r24
 ad0:	11 f0       	breq	.+4      	; 0xad6 <__floatsisf+0x48>
 ad2:	96 e9       	ldi	r25, 0x96	; 150
 ad4:	11 c0       	rjmp	.+34     	; 0xaf8 <__floatsisf+0x6a>
 ad6:	77 23       	and	r23, r23
 ad8:	21 f0       	breq	.+8      	; 0xae2 <__floatsisf+0x54>
 ada:	9e e8       	ldi	r25, 0x8E	; 142
 adc:	87 2f       	mov	r24, r23
 ade:	76 2f       	mov	r23, r22
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <__floatsisf+0x5e>
 ae2:	66 23       	and	r22, r22
 ae4:	71 f0       	breq	.+28     	; 0xb02 <__floatsisf+0x74>
 ae6:	96 e8       	ldi	r25, 0x86	; 134
 ae8:	86 2f       	mov	r24, r22
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	60 e0       	ldi	r22, 0x00	; 0
 aee:	2a f0       	brmi	.+10     	; 0xafa <__floatsisf+0x6c>
 af0:	9a 95       	dec	r25
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	da f7       	brpl	.-10     	; 0xaf0 <__floatsisf+0x62>
 afa:	88 0f       	add	r24, r24
 afc:	96 95       	lsr	r25
 afe:	87 95       	ror	r24
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

00000b04 <__fp_inf>:
 b04:	97 f9       	bld	r25, 7
 b06:	9f 67       	ori	r25, 0x7F	; 127
 b08:	80 e8       	ldi	r24, 0x80	; 128
 b0a:	70 e0       	ldi	r23, 0x00	; 0
 b0c:	60 e0       	ldi	r22, 0x00	; 0
 b0e:	08 95       	ret

00000b10 <__fp_nan>:
 b10:	9f ef       	ldi	r25, 0xFF	; 255
 b12:	80 ec       	ldi	r24, 0xC0	; 192
 b14:	08 95       	ret

00000b16 <__fp_pscA>:
 b16:	00 24       	eor	r0, r0
 b18:	0a 94       	dec	r0
 b1a:	16 16       	cp	r1, r22
 b1c:	17 06       	cpc	r1, r23
 b1e:	18 06       	cpc	r1, r24
 b20:	09 06       	cpc	r0, r25
 b22:	08 95       	ret

00000b24 <__fp_pscB>:
 b24:	00 24       	eor	r0, r0
 b26:	0a 94       	dec	r0
 b28:	12 16       	cp	r1, r18
 b2a:	13 06       	cpc	r1, r19
 b2c:	14 06       	cpc	r1, r20
 b2e:	05 06       	cpc	r0, r21
 b30:	08 95       	ret

00000b32 <__fp_round>:
 b32:	09 2e       	mov	r0, r25
 b34:	03 94       	inc	r0
 b36:	00 0c       	add	r0, r0
 b38:	11 f4       	brne	.+4      	; 0xb3e <__fp_round+0xc>
 b3a:	88 23       	and	r24, r24
 b3c:	52 f0       	brmi	.+20     	; 0xb52 <__fp_round+0x20>
 b3e:	bb 0f       	add	r27, r27
 b40:	40 f4       	brcc	.+16     	; 0xb52 <__fp_round+0x20>
 b42:	bf 2b       	or	r27, r31
 b44:	11 f4       	brne	.+4      	; 0xb4a <__fp_round+0x18>
 b46:	60 ff       	sbrs	r22, 0
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fp_round+0x20>
 b4a:	6f 5f       	subi	r22, 0xFF	; 255
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
 b4e:	8f 4f       	sbci	r24, 0xFF	; 255
 b50:	9f 4f       	sbci	r25, 0xFF	; 255
 b52:	08 95       	ret

00000b54 <__fp_split3>:
 b54:	57 fd       	sbrc	r21, 7
 b56:	90 58       	subi	r25, 0x80	; 128
 b58:	44 0f       	add	r20, r20
 b5a:	55 1f       	adc	r21, r21
 b5c:	59 f0       	breq	.+22     	; 0xb74 <__fp_splitA+0x10>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	71 f0       	breq	.+28     	; 0xb7e <__fp_splitA+0x1a>
 b62:	47 95       	ror	r20

00000b64 <__fp_splitA>:
 b64:	88 0f       	add	r24, r24
 b66:	97 fb       	bst	r25, 7
 b68:	99 1f       	adc	r25, r25
 b6a:	61 f0       	breq	.+24     	; 0xb84 <__fp_splitA+0x20>
 b6c:	9f 3f       	cpi	r25, 0xFF	; 255
 b6e:	79 f0       	breq	.+30     	; 0xb8e <__fp_splitA+0x2a>
 b70:	87 95       	ror	r24
 b72:	08 95       	ret
 b74:	12 16       	cp	r1, r18
 b76:	13 06       	cpc	r1, r19
 b78:	14 06       	cpc	r1, r20
 b7a:	55 1f       	adc	r21, r21
 b7c:	f2 cf       	rjmp	.-28     	; 0xb62 <__fp_split3+0xe>
 b7e:	46 95       	lsr	r20
 b80:	f1 df       	rcall	.-30     	; 0xb64 <__fp_splitA>
 b82:	08 c0       	rjmp	.+16     	; 0xb94 <__fp_splitA+0x30>
 b84:	16 16       	cp	r1, r22
 b86:	17 06       	cpc	r1, r23
 b88:	18 06       	cpc	r1, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	f1 cf       	rjmp	.-30     	; 0xb70 <__fp_splitA+0xc>
 b8e:	86 95       	lsr	r24
 b90:	71 05       	cpc	r23, r1
 b92:	61 05       	cpc	r22, r1
 b94:	08 94       	sec
 b96:	08 95       	ret

00000b98 <__fp_zero>:
 b98:	e8 94       	clt

00000b9a <__fp_szero>:
 b9a:	bb 27       	eor	r27, r27
 b9c:	66 27       	eor	r22, r22
 b9e:	77 27       	eor	r23, r23
 ba0:	cb 01       	movw	r24, r22
 ba2:	97 f9       	bld	r25, 7
 ba4:	08 95       	ret

00000ba6 <__mulsf3>:
 ba6:	0b d0       	rcall	.+22     	; 0xbbe <__mulsf3x>
 ba8:	c4 cf       	rjmp	.-120    	; 0xb32 <__fp_round>
 baa:	b5 df       	rcall	.-150    	; 0xb16 <__fp_pscA>
 bac:	28 f0       	brcs	.+10     	; 0xbb8 <__mulsf3+0x12>
 bae:	ba df       	rcall	.-140    	; 0xb24 <__fp_pscB>
 bb0:	18 f0       	brcs	.+6      	; 0xbb8 <__mulsf3+0x12>
 bb2:	95 23       	and	r25, r21
 bb4:	09 f0       	breq	.+2      	; 0xbb8 <__mulsf3+0x12>
 bb6:	a6 cf       	rjmp	.-180    	; 0xb04 <__fp_inf>
 bb8:	ab cf       	rjmp	.-170    	; 0xb10 <__fp_nan>
 bba:	11 24       	eor	r1, r1
 bbc:	ee cf       	rjmp	.-36     	; 0xb9a <__fp_szero>

00000bbe <__mulsf3x>:
 bbe:	ca df       	rcall	.-108    	; 0xb54 <__fp_split3>
 bc0:	a0 f3       	brcs	.-24     	; 0xbaa <__mulsf3+0x4>

00000bc2 <__mulsf3_pse>:
 bc2:	95 9f       	mul	r25, r21
 bc4:	d1 f3       	breq	.-12     	; 0xbba <__mulsf3+0x14>
 bc6:	95 0f       	add	r25, r21
 bc8:	50 e0       	ldi	r21, 0x00	; 0
 bca:	55 1f       	adc	r21, r21
 bcc:	62 9f       	mul	r22, r18
 bce:	f0 01       	movw	r30, r0
 bd0:	72 9f       	mul	r23, r18
 bd2:	bb 27       	eor	r27, r27
 bd4:	f0 0d       	add	r31, r0
 bd6:	b1 1d       	adc	r27, r1
 bd8:	63 9f       	mul	r22, r19
 bda:	aa 27       	eor	r26, r26
 bdc:	f0 0d       	add	r31, r0
 bde:	b1 1d       	adc	r27, r1
 be0:	aa 1f       	adc	r26, r26
 be2:	64 9f       	mul	r22, r20
 be4:	66 27       	eor	r22, r22
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	66 1f       	adc	r22, r22
 bec:	82 9f       	mul	r24, r18
 bee:	22 27       	eor	r18, r18
 bf0:	b0 0d       	add	r27, r0
 bf2:	a1 1d       	adc	r26, r1
 bf4:	62 1f       	adc	r22, r18
 bf6:	73 9f       	mul	r23, r19
 bf8:	b0 0d       	add	r27, r0
 bfa:	a1 1d       	adc	r26, r1
 bfc:	62 1f       	adc	r22, r18
 bfe:	83 9f       	mul	r24, r19
 c00:	a0 0d       	add	r26, r0
 c02:	61 1d       	adc	r22, r1
 c04:	22 1f       	adc	r18, r18
 c06:	74 9f       	mul	r23, r20
 c08:	33 27       	eor	r19, r19
 c0a:	a0 0d       	add	r26, r0
 c0c:	61 1d       	adc	r22, r1
 c0e:	23 1f       	adc	r18, r19
 c10:	84 9f       	mul	r24, r20
 c12:	60 0d       	add	r22, r0
 c14:	21 1d       	adc	r18, r1
 c16:	82 2f       	mov	r24, r18
 c18:	76 2f       	mov	r23, r22
 c1a:	6a 2f       	mov	r22, r26
 c1c:	11 24       	eor	r1, r1
 c1e:	9f 57       	subi	r25, 0x7F	; 127
 c20:	50 40       	sbci	r21, 0x00	; 0
 c22:	8a f0       	brmi	.+34     	; 0xc46 <__mulsf3_pse+0x84>
 c24:	e1 f0       	breq	.+56     	; 0xc5e <__mulsf3_pse+0x9c>
 c26:	88 23       	and	r24, r24
 c28:	4a f0       	brmi	.+18     	; 0xc3c <__mulsf3_pse+0x7a>
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	bb 1f       	adc	r27, r27
 c30:	66 1f       	adc	r22, r22
 c32:	77 1f       	adc	r23, r23
 c34:	88 1f       	adc	r24, r24
 c36:	91 50       	subi	r25, 0x01	; 1
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	a9 f7       	brne	.-22     	; 0xc26 <__mulsf3_pse+0x64>
 c3c:	9e 3f       	cpi	r25, 0xFE	; 254
 c3e:	51 05       	cpc	r21, r1
 c40:	70 f0       	brcs	.+28     	; 0xc5e <__mulsf3_pse+0x9c>
 c42:	60 cf       	rjmp	.-320    	; 0xb04 <__fp_inf>
 c44:	aa cf       	rjmp	.-172    	; 0xb9a <__fp_szero>
 c46:	5f 3f       	cpi	r21, 0xFF	; 255
 c48:	ec f3       	brlt	.-6      	; 0xc44 <__mulsf3_pse+0x82>
 c4a:	98 3e       	cpi	r25, 0xE8	; 232
 c4c:	dc f3       	brlt	.-10     	; 0xc44 <__mulsf3_pse+0x82>
 c4e:	86 95       	lsr	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	b7 95       	ror	r27
 c56:	f7 95       	ror	r31
 c58:	e7 95       	ror	r30
 c5a:	9f 5f       	subi	r25, 0xFF	; 255
 c5c:	c1 f7       	brne	.-16     	; 0xc4e <__mulsf3_pse+0x8c>
 c5e:	fe 2b       	or	r31, r30
 c60:	88 0f       	add	r24, r24
 c62:	91 1d       	adc	r25, r1
 c64:	96 95       	lsr	r25
 c66:	87 95       	ror	r24
 c68:	97 f9       	bld	r25, 7
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
