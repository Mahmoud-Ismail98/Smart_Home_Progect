
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00000b38  00000bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008001e6  008001e6  00000d52  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000017f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167a  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1e  00000000  00000000  000037d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000044f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083b  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3f       	cpi	r26, 0xF4	; 244
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8 Mode = NO_MODE;
uint8 SPI_RESPONSE;

int main(void)
{
   	LCD_INISTIALIZATION();
  92:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_INISTIALIZATION>
	SPI_vInitMaster();//initializes the communication protocol of SPI
  96:	0e 94 46 05 	call	0xa8c	; 0xa8c <SPI_vInitMaster>
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	SEND_STRING("wellcome to smart");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e9       	ldi	r24, 0x9F	; 159
  aa:	96 e8       	ldi	r25, 0x86	; 134
  ac:	a1 e0       	ldi	r26, 0x01	; 1
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x26>
  b8:	00 00       	nop
	_delay_ms(500);
	GO_LOC(2,3);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("home system");
  c2:	82 e7       	ldi	r24, 0x72	; 114
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	} 
	while (Mode==NO_MODE)
	{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
	GO_LOC(2,1);
	SEND_STRING("selec mode");
  ca:	ce e7       	ldi	r28, 0x7E	; 126
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	GO_LOC(3,1);
	SEND_STRING("0:Owner 1:Guest");
  ce:	09 e8       	ldi	r16, 0x89	; 137
  d0:	10 e0       	ldi	r17, 0x00	; 0
	{
		SelectModePass(&OWNER_MODE_STRUCT);
	} 
	else if (key_pressed=='1')
	{
		SelectModePass(&GUEST_MODE_STRUCT);
  d2:	0f 2e       	mov	r0, r31
  d4:	fd ec       	ldi	r31, 0xCD	; 205
  d6:	cf 2e       	mov	r12, r31
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	df 2e       	mov	r13, r31
  dc:	f0 2d       	mov	r31, r0
	SEND_STRING("0:Owner 1:Guest");
	_delay_ms(2000);				
	key_pressed=keyfind();
	if (key_pressed=='0')
	{
		SelectModePass(&OWNER_MODE_STRUCT);
  de:	0f 2e       	mov	r0, r31
  e0:	fb ed       	ldi	r31, 0xDB	; 219
  e2:	ef 2e       	mov	r14, r31
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ff 2e       	mov	r15, r31
  e8:	f0 2d       	mov	r31, r0
		SelectModePass(&GUEST_MODE_STRUCT);
	}
	}			
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
	GO_LOC(1,1);	
	SEND_STRING("1:ROOM1 2:ROOM2");
  ea:	0f 2e       	mov	r0, r31
  ec:	f9 e9       	ldi	r31, 0x99	; 153
  ee:	af 2e       	mov	r10, r31
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	bf 2e       	mov	r11, r31
  f4:	f0 2d       	mov	r31, r0
	GO_LOC(2,1);
	SEND_STRING("3:ROOM3 ");	
  f6:	0f 2e       	mov	r0, r31
  f8:	f9 ea       	ldi	r31, 0xA9	; 169
  fa:	8f 2e       	mov	r8, r31
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	9f 2e       	mov	r9, r31
 100:	f0 2d       	mov	r31, r0
	
	if (Mode==OWNER_MODE)
	{
			SEND_STRING("4:TV");		
 102:	0f 2e       	mov	r0, r31
 104:	f2 eb       	ldi	r31, 0xB2	; 178
 106:	6f 2e       	mov	r6, r31
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	7f 2e       	mov	r7, r31
 10c:	f0 2d       	mov	r31, r0
			GO_LOC(3,3);
			SEND_STRING("5:AIR_Condition");
 10e:	0f 2e       	mov	r0, r31
 110:	f7 eb       	ldi	r31, 0xB7	; 183
 112:	4f 2e       	mov	r4, r31
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	5f 2e       	mov	r5, r31
 118:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	GO_LOC(2,3);
	SEND_STRING("home system");
while (1)
{
	if (EEPROM_ui8ReadByteFromAddress(Login_status)==0xFF)
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 ef 00 	call	0x1de	; 0x1de <EEPROM_ui8ReadByteFromAddress>
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	81 f5       	brne	.+96     	; 0x186 <main+0xf4>
	{		
		vEnterFirstTime();
 126:	0e 94 58 02 	call	0x4b0	; 0x4b0 <vEnterFirstTime>
 12a:	2d c0       	rjmp	.+90     	; 0x186 <main+0xf4>
	} 
	while (Mode==NO_MODE)
	{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	GO_LOC(2,1);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("selec mode");
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	GO_LOC(3,1);
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("0:Owner 1:Guest");
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 14e:	8f e7       	ldi	r24, 0x7F	; 127
 150:	9a e1       	ldi	r25, 0x1A	; 26
 152:	a6 e0       	ldi	r26, 0x06	; 6
 154:	81 50       	subi	r24, 0x01	; 1
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	a0 40       	sbci	r26, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xc2>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xcc>
 15e:	00 00       	nop
	_delay_ms(2000);				
	key_pressed=keyfind();
 160:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 164:	80 93 f3 01 	sts	0x01F3, r24
	if (key_pressed=='0')
 168:	80 91 f3 01 	lds	r24, 0x01F3
 16c:	80 33       	cpi	r24, 0x30	; 48
 16e:	21 f4       	brne	.+8      	; 0x178 <main+0xe6>
	{
		SelectModePass(&OWNER_MODE_STRUCT);
 170:	c7 01       	movw	r24, r14
 172:	0e 94 4e 03 	call	0x69c	; 0x69c <SelectModePass>
 176:	07 c0       	rjmp	.+14     	; 0x186 <main+0xf4>
	} 
	else if (key_pressed=='1')
 178:	80 91 f3 01 	lds	r24, 0x01F3
 17c:	81 33       	cpi	r24, 0x31	; 49
 17e:	19 f4       	brne	.+6      	; 0x186 <main+0xf4>
	{
		SelectModePass(&GUEST_MODE_STRUCT);
 180:	c6 01       	movw	r24, r12
 182:	0e 94 4e 03 	call	0x69c	; 0x69c <SelectModePass>
{
	if (EEPROM_ui8ReadByteFromAddress(Login_status)==0xFF)
	{		
		vEnterFirstTime();
	} 
	while (Mode==NO_MODE)
 186:	80 91 e6 01 	lds	r24, 0x01E6
 18a:	88 23       	and	r24, r24
 18c:	79 f2       	breq	.-98     	; 0x12c <main+0x9a>
	else if (key_pressed=='1')
	{
		SelectModePass(&GUEST_MODE_STRUCT);
	}
	}			
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	GO_LOC(1,1);	
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("1:ROOM1 2:ROOM2");
 19c:	c5 01       	movw	r24, r10
 19e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	GO_LOC(2,1);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("3:ROOM3 ");	
 1aa:	c4 01       	movw	r24, r8
 1ac:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	
	if (Mode==OWNER_MODE)
 1b0:	80 91 e6 01 	lds	r24, 0x01E6
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	51 f4       	brne	.+20     	; 0x1cc <main+0x13a>
	{
			SEND_STRING("4:TV");		
 1b8:	c3 01       	movw	r24, r6
 1ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
			GO_LOC(3,3);
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			SEND_STRING("5:AIR_Condition");
 1c6:	c2 01       	movw	r24, r4
 1c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	}
	key_pressed=keyfind();
 1cc:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 1d0:	80 93 f3 01 	sts	0x01F3, r24
	
	u8EnterRoonConfig(key_pressed);				
 1d4:	80 91 f3 01 	lds	r24, 0x01F3
 1d8:	0e 94 99 04 	call	0x932	; 0x932 <u8EnterRoonConfig>
			
			
	}			
 1dc:	9e cf       	rjmp	.-196    	; 0x11a <main+0x88>

000001de <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 1de:	e1 99       	sbic	0x1c, 1	; 28
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
 1e2:	9f bb       	out	0x1f, r25	; 31
 1e4:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
 1e6:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 1e8:	8d b3       	in	r24, 0x1d	; 29
}
 1ea:	08 95       	ret

000001ec <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
 1ec:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 1ee:	e1 99       	sbic	0x1c, 1	; 28
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <EEPROM_vReadBlockFromAddress+0x2>
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 1f2:	41 15       	cp	r20, r1
 1f4:	51 05       	cpc	r21, r1
 1f6:	89 f0       	breq	.+34     	; 0x21a <EEPROM_vReadBlockFromAddress+0x2e>
 1f8:	e6 2f       	mov	r30, r22
 1fa:	f7 2f       	mov	r31, r23
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
	EECR |= (1 << EERE);
	/* Return data from data register */
	return EEDR;
}

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
 200:	c9 01       	movw	r24, r18
 202:	8a 0f       	add	r24, r26
 204:	9b 1f       	adc	r25, r27
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
 206:	9f bb       	out	0x1f, r25	; 31
 208:	8e bb       	out	0x1e, r24	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
 20a:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
 20c:	8d b3       	in	r24, 0x1d	; 29
 20e:	81 93       	st	Z+, r24

		counter++;//increase the bytes counter
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 214:	24 17       	cp	r18, r20
 216:	35 07       	cpc	r19, r21
 218:	99 f7       	brne	.-26     	; 0x200 <EEPROM_vReadBlockFromAddress+0x14>
 21a:	08 95       	ret

0000021c <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 21c:	e1 99       	sbic	0x1c, 1	; 28
 21e:	fe cf       	rjmp	.-4      	; 0x21c <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
 220:	9f bb       	out	0x1f, r25	; 31
 222:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
 224:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
 226:	8d b3       	in	r24, 0x1d	; 29
 228:	86 17       	cp	r24, r22
 22a:	19 f0       	breq	.+6      	; 0x232 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
 22c:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
 22e:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
 230:	e1 9a       	sbi	0x1c, 1	; 28
 232:	08 95       	ret

00000234 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
 234:	dc 01       	movw	r26, r24
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 236:	41 15       	cp	r20, r1
 238:	51 05       	cpc	r21, r1
 23a:	c1 f0       	breq	.+48     	; 0x26c <EEPROM_vWriteBlockToAddress+0x38>
 23c:	e6 2f       	mov	r30, r22
 23e:	f7 2f       	mov	r31, r23

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 244:	e1 99       	sbic	0x1c, 1	; 28
 246:	fe cf       	rjmp	.-4      	; 0x244 <EEPROM_vWriteBlockToAddress+0x10>

	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
 248:	c9 01       	movw	r24, r18
 24a:	8a 0f       	add	r24, r26
 24c:	9b 1f       	adc	r25, r27
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
 24e:	9f bb       	out	0x1f, r25	; 31
 250:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
 252:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
 254:	9d b3       	in	r25, 0x1d	; 29
 256:	81 91       	ld	r24, Z+
 258:	98 17       	cp	r25, r24
 25a:	19 f0       	breq	.+6      	; 0x262 <EEPROM_vWriteBlockToAddress+0x2e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
 25c:	8d bb       	out	0x1d, r24	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
 25e:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
 260:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 266:	24 17       	cp	r18, r20
 268:	35 07       	cpc	r19, r21
 26a:	61 f7       	brne	.-40     	; 0x244 <EEPROM_vWriteBlockToAddress+0x10>
 26c:	08 95       	ret

0000026e <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 26e:	40 ef       	ldi	r20, 0xF0	; 240
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 270:	3f ef       	ldi	r19, 0xFF	; 255
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);   

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 272:	2f ee       	ldi	r18, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 274:	9f ed       	ldi	r25, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 276:	6f eb       	ldi	r22, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 278:	5f e7       	ldi	r21, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 27a:	41 bb       	out	0x11, r20	; 17
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 27c:	32 bb       	out	0x12, r19	; 18

		do
		{
				
			KEY_PRT &= 0x0F;      //  ROW OUT LOW // mask PORT for column read only
 27e:	82 b3       	in	r24, 0x12	; 18
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 284:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);//  read status of column
 286:	80 b3       	in	r24, 0x10	; 16
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	80 93 f1 01 	sts	0x01F1, r24
		}while(colloc != 0x0F);
 28e:	8f 30       	cpi	r24, 0x0F	; 15
 290:	b1 f7       	brne	.-20     	; 0x27e <keyfind+0x10>
 292:	e7 e8       	ldi	r30, 0x87	; 135
 294:	f3 e1       	ldi	r31, 0x13	; 19
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <keyfind+0x28>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <keyfind+0x2e>
 29c:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);            //  20ms key debounce time
				colloc = (KEY_PIN & 0x0F);  //read status of column
 29e:	80 b3       	in	r24, 0x10	; 16
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	80 93 f1 01 	sts	0x01F1, r24
			}while(colloc == 0x0F);         //check for any key press
 2a6:	8f 30       	cpi	r24, 0x0F	; 15
 2a8:	a1 f3       	breq	.-24     	; 0x292 <keyfind+0x24>
 2aa:	ef e0       	ldi	r30, 0x0F	; 15
 2ac:	f7 e2       	ldi	r31, 0x27	; 39
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <keyfind+0x40>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <keyfind+0x46>
 2b4:	00 00       	nop
			
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
 2b6:	80 b3       	in	r24, 0x10	; 16
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	80 93 f1 01 	sts	0x01F1, r24
		}while(colloc == 0x0F);   
 2be:	8f 30       	cpi	r24, 0x0F	; 15
 2c0:	41 f3       	breq	.-48     	; 0x292 <keyfind+0x24>

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 2c2:	22 bb       	out	0x12, r18	; 18
		asm("NOP");
 2c4:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2c6:	80 b3       	in	r24, 0x10	; 16
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	80 93 f1 01 	sts	0x01F1, r24
		if(colloc != 0x0F)
 2ce:	8f 30       	cpi	r24, 0x0F	; 15
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <keyfind+0x6a>
		{
			rowloc = 0;
 2d2:	10 92 f2 01 	sts	0x01F2, r1
			break;
 2d6:	24 c0       	rjmp	.+72     	; 0x320 <keyfind+0xb2>
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 2d8:	92 bb       	out	0x12, r25	; 18
		asm("NOP");
 2da:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2dc:	80 b3       	in	r24, 0x10	; 16
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	80 93 f1 01 	sts	0x01F1, r24
		if(colloc != 0x0F)
 2e4:	8f 30       	cpi	r24, 0x0F	; 15
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <keyfind+0x82>
		{
			rowloc = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 f2 01 	sts	0x01F2, r24
			break;
 2ee:	18 c0       	rjmp	.+48     	; 0x320 <keyfind+0xb2>
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 2f0:	62 bb       	out	0x12, r22	; 18
		asm("NOP");
 2f2:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2f4:	80 b3       	in	r24, 0x10	; 16
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	80 93 f1 01 	sts	0x01F1, r24
		if(colloc != 0x0F)
 2fc:	8f 30       	cpi	r24, 0x0F	; 15
 2fe:	21 f0       	breq	.+8      	; 0x308 <keyfind+0x9a>
		{
			rowloc = 2;
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	80 93 f2 01 	sts	0x01F2, r24
			break;
 306:	0c c0       	rjmp	.+24     	; 0x320 <keyfind+0xb2>
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 308:	52 bb       	out	0x12, r21	; 18
		asm("NOP");
 30a:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 30c:	80 b3       	in	r24, 0x10	; 16
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	80 93 f1 01 	sts	0x01F1, r24
		if(colloc != 0x0F)
 314:	8f 30       	cpi	r24, 0x0F	; 15
 316:	09 f4       	brne	.+2      	; 0x31a <keyfind+0xac>
 318:	b0 cf       	rjmp	.-160    	; 0x27a <keyfind+0xc>
		{
			rowloc = 3;
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	80 93 f2 01 	sts	0x01F2, r24
			break;
		}
	}

	if(colloc == 0x0E)
 320:	80 91 f1 01 	lds	r24, 0x01F1
 324:	8e 30       	cpi	r24, 0x0E	; 14
 326:	59 f4       	brne	.+22     	; 0x33e <keyfind+0xd0>
	return(keypad[rowloc][0]);
 328:	e0 91 f2 01 	lds	r30, 0x01F2
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	ed 51       	subi	r30, 0x1D	; 29
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 81       	ld	r24, Z
 33c:	08 95       	ret
	else if(colloc == 0x0D)
 33e:	8d 30       	cpi	r24, 0x0D	; 13
 340:	59 f4       	brne	.+22     	; 0x358 <keyfind+0xea>
	return(keypad[rowloc][1]);
 342:	e0 91 f2 01 	lds	r30, 0x01F2
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	ed 51       	subi	r30, 0x1D	; 29
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	81 81       	ldd	r24, Z+1	; 0x01
 356:	08 95       	ret
	else if(colloc == 0x0B)
 358:	8b 30       	cpi	r24, 0x0B	; 11
 35a:	59 f4       	brne	.+22     	; 0x372 <keyfind+0x104>
	return(keypad[rowloc][2]);
 35c:	e0 91 f2 01 	lds	r30, 0x01F2
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	ed 51       	subi	r30, 0x1D	; 29
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	08 95       	ret
	else
	return(keypad[rowloc][3]);
 372:	e0 91 f2 01 	lds	r30, 0x01F2
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	ed 51       	subi	r30, 0x1D	; 29
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	83 81       	ldd	r24, Z+3	; 0x03
}
 386:	08 95       	ret

00000388 <HI_LO_PULS_EN>:
	HI_LO_PULS_EN();
}

void HI_LO_PULS_EN(void)
{
	CONTRLO_PINS_HI_LO|=(1<<ENABLE);
 388:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	00 00       	nop
	_delay_us(1);
	CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
 38c:	c1 98       	cbi	0x18, 1	; 24
 38e:	81 e2       	ldi	r24, 0x21	; 33
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <HI_LO_PULS_EN+0x8>
 394:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	83 ec       	ldi	r24, 0xC3	; 195
 398:	99 e0       	ldi	r25, 0x09	; 9
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <HI_LO_PULS_EN+0x12>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <HI_LO_PULS_EN+0x18>
 3a0:	00 00       	nop
	_delay_us(100);
	_delay_ms(10);
}
 3a2:	08 95       	ret

000003a4 <SEND_COMND>:

}

void SEND_COMND(unsigned char CMD)
{
	CONTRLO_PINS_HI_LO&=~((1<<RE_WR)|(1<<REG_SEL)) ;
 3a4:	98 b3       	in	r25, 0x18	; 24
 3a6:	93 7f       	andi	r25, 0xF3	; 243
 3a8:	98 bb       	out	0x18, r25	; 24
	DATE_HI_LO=CMD;
 3aa:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 3ac:	0e 94 c4 01 	call	0x388	; 0x388 <HI_LO_PULS_EN>
}
 3b0:	08 95       	ret

000003b2 <LCD_INISTIALIZATION>:
 */ 
#include "lcd.h"

void LCD_INISTIALIZATION(void)
{
	DATE_IN_OUT =0xFF;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	8a bb       	out	0x1a, r24	; 26
	CONTRLO_PINS_IN_OUT|=((1<<ENABLE)|(1<<RE_WR)|(1<<REG_SEL));
 3b6:	87 b3       	in	r24, 0x17	; 23
 3b8:	8e 60       	ori	r24, 0x0E	; 14
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	87 e8       	ldi	r24, 0x87	; 135
 3be:	93 e1       	ldi	r25, 0x13	; 19
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_INISTIALIZATION+0xe>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_INISTIALIZATION+0x14>
 3c6:	00 00       	nop
	//CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
	
	_delay_ms(20);       //wait for start initialization
	SEND_COMND(0x38);   //8bit mode
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	SEND_COMND(0x0E);   //curser not be blinking
 3ce:	8e e0       	ldi	r24, 0x0E	; 14
 3d0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	SEND_COMND(0x01);   // clear display
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
 3da:	83 ef       	ldi	r24, 0xF3	; 243
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_INISTIALIZATION+0x2c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_INISTIALIZATION+0x32>
 3e4:	00 00       	nop
	_delay_ms(2);
	SEND_COMND(0x06);   //INCREAMENT CURSOR TO RIGHT
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>

}
 3ec:	08 95       	ret

000003ee <SEND_DATE>:
	_delay_ms(10);
}

void SEND_DATE(unsigned char DATE)
{
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
 3ee:	c2 98       	cbi	0x18, 2	; 24
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
 3f0:	c3 9a       	sbi	0x18, 3	; 24
	DATE_HI_LO=DATE;
 3f2:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 3f4:	0e 94 c4 01 	call	0x388	; 0x388 <HI_LO_PULS_EN>
}
 3f8:	08 95       	ret

000003fa <SEND_STRING>:
void SEND_STRING(unsigned char *STR)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	while(*STR>0)
 400:	88 81       	ld	r24, Y
 402:	88 23       	and	r24, r24
 404:	31 f0       	breq	.+12     	; 0x412 <SEND_STRING+0x18>
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
 406:	21 96       	adiw	r28, 0x01	; 1
{
	while(*STR>0)
	{
		
		SEND_DATE(*STR++);  //first send and then increament
 408:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
{
	while(*STR>0)
 40c:	89 91       	ld	r24, Y+
 40e:	88 23       	and	r24, r24
 410:	d9 f7       	brne	.-10     	; 0x408 <SEND_STRING+0xe>
	{
		
		SEND_DATE(*STR++);  //first send and then increament
		
	}
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <GO_LOC>:
char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
void GO_LOC(uint8_t x,uint8_t y)
{
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
 418:	61 50       	subi	r22, 0x01	; 1
 41a:	e8 2f       	mov	r30, r24
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ee 50       	subi	r30, 0x0E	; 14
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	80 81       	ld	r24, Z
 424:	86 0f       	add	r24, r22
 426:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
}
 42a:	08 95       	ret

0000042c <SEND_LONG_NUM>:

void SEND_LONG_NUM(char *p,int siz)
{
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ec 01       	movw	r28, r24
 43e:	6b 01       	movw	r12, r22
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	b4 f4       	brge	.+44     	; 0x472 <SEND_LONG_NUM+0x46>
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
}

void SEND_LONG_NUM(char *p,int siz)
 446:	8c 01       	movw	r16, r24
 448:	06 0f       	add	r16, r22
 44a:	17 1f       	adc	r17, r23
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
	{
		itoa(*p,NUM_ST,10);
 44c:	0f 2e       	mov	r0, r31
 44e:	f7 ee       	ldi	r31, 0xE7	; 231
 450:	ef 2e       	mov	r14, r31
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	ff 2e       	mov	r15, r31
 456:	f0 2d       	mov	r31, r0
 458:	89 91       	ld	r24, Y+
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	b7 01       	movw	r22, r14
 45e:	4a e0       	ldi	r20, 0x0A	; 10
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	0e 94 55 05 	call	0xaaa	; 0xaaa <itoa>
		SEND_STRING(NUM_ST);
 466:	c7 01       	movw	r24, r14
 468:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
}

void SEND_LONG_NUM(char *p,int siz)
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 46c:	c0 17       	cp	r28, r16
 46e:	d1 07       	cpc	r29, r17
 470:	99 f7       	brne	.-26     	; 0x458 <SEND_LONG_NUM+0x2c>
		SEND_STRING(NUM_ST);
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
 472:	c4 e1       	ldi	r28, 0x14	; 20
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	cc 19       	sub	r28, r12
 478:	dd 09       	sbc	r29, r13
 47a:	0a f4       	brpl	.+2      	; 0x47e <SEND_LONG_NUM+0x52>
 47c:	21 96       	adiw	r28, 0x01	; 1
 47e:	d5 95       	asr	r29
 480:	c7 95       	ror	r28
 482:	64 96       	adiw	r28, 0x14	; 20
	for (int i=0;i<sift;i++)
 484:	1c 16       	cp	r1, r28
 486:	1d 06       	cpc	r1, r29
 488:	54 f4       	brge	.+20     	; 0x49e <SEND_LONG_NUM+0x72>
 48a:	00 e0       	ldi	r16, 0x00	; 0
 48c:	10 e0       	ldi	r17, 0x00	; 0
	{
		SEND_COMND(0x1C);
 48e:	8c e1       	ldi	r24, 0x1C	; 28
 490:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
	for (int i=0;i<sift;i++)
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	0c 17       	cp	r16, r28
 49a:	1d 07       	cpc	r17, r29
 49c:	c4 f3       	brlt	.-16     	; 0x48e <SEND_LONG_NUM+0x62>
	{
		SEND_COMND(0x1C);
	}
	
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	08 95       	ret

000004b0 <vEnterFirstTime>:
volatile char key_pressed;
uint8 Mode;
						
vEnterFirstTime()
{
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
			GO_LOC(2,1);
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			SEND_STRING("login for first time");
 4be:	87 ef       	ldi	r24, 0xF7	; 247
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
			GO_LOC(2,1);
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			SEND_STRING("Set Admin Pass");
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
			GO_LOC(3,1);
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			SEND_STRING("Admin Pass:");
 4e4:	8b e1       	ldi	r24, 0x1B	; 27
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
			
			while (pass_count<4)
 4ec:	80 91 eb 01 	lds	r24, 0x01EB
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <vEnterFirstTime+0x46>
 4f4:	61 c0       	rjmp	.+194    	; 0x5b8 <vEnterFirstTime+0x108>
			{
				key_pressed =keyfind();
 4f6:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 4fa:	80 93 f3 01 	sts	0x01F3, r24
				pass[pass_count]=(key_pressed-48);
 4fe:	80 91 f3 01 	lds	r24, 0x01F3
 502:	e0 91 eb 01 	lds	r30, 0x01EB
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e3 51       	subi	r30, 0x13	; 19
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	80 53       	subi	r24, 0x30	; 48
 50e:	80 83       	st	Z, r24
				SEND_DATE(key_pressed);
 510:	80 91 f3 01 	lds	r24, 0x01F3
 514:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
				_delay_ms(00);
				pass_count++;
 518:	80 91 eb 01 	lds	r24, 0x01EB
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	80 93 eb 01 	sts	0x01EB, r24
			GO_LOC(2,1);
			SEND_STRING("Set Admin Pass");
			GO_LOC(3,1);
			SEND_STRING("Admin Pass:");
			
			while (pass_count<4)
 522:	84 30       	cpi	r24, 0x04	; 4
 524:	40 f3       	brcs	.-48     	; 0x4f6 <vEnterFirstTime+0x46>
				pass[pass_count]=(key_pressed-48);
				SEND_DATE(key_pressed);
				_delay_ms(00);
				pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 526:	81 e2       	ldi	r24, 0x21	; 33
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	6d ee       	ldi	r22, 0xED	; 237
 52c:	71 e0       	ldi	r23, 0x01	; 1
 52e:	44 e0       	ldi	r20, 0x04	; 4
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_vWriteBlockToAddress>
			
		//pass={0};
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
		GO_LOC(2,1);
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("Set Guest Pass");
 544:	87 e2       	ldi	r24, 0x27	; 39
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		GO_LOC(3,1);
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("guest Pass:");
 554:	86 e3       	ldi	r24, 0x36	; 54
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		pass_count=0;
 55c:	10 92 eb 01 	sts	0x01EB, r1
		while (pass_count<4)
		{
			key_pressed=keyfind();
 560:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 564:	80 93 f3 01 	sts	0x01F3, r24
			pass[pass_count]=(key_pressed-48);
 568:	80 91 f3 01 	lds	r24, 0x01F3
 56c:	e0 91 eb 01 	lds	r30, 0x01EB
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	e3 51       	subi	r30, 0x13	; 19
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	80 53       	subi	r24, 0x30	; 48
 578:	80 83       	st	Z, r24
			SEND_DATE(key_pressed);
 57a:	80 91 f3 01 	lds	r24, 0x01F3
 57e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
 582:	87 ea       	ldi	r24, 0xA7	; 167
 584:	91 e6       	ldi	r25, 0x61	; 97
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <vEnterFirstTime+0xd6>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <vEnterFirstTime+0xdc>
 58c:	00 00       	nop
			_delay_ms(100);
			pass_count++;
 58e:	80 91 eb 01 	lds	r24, 0x01EB
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	80 93 eb 01 	sts	0x01EB, r24
		GO_LOC(2,1);
		SEND_STRING("Set Guest Pass");
		GO_LOC(3,1);
		SEND_STRING("guest Pass:");
		pass_count=0;
		while (pass_count<4)
 598:	84 30       	cpi	r24, 0x04	; 4
 59a:	10 f3       	brcs	.-60     	; 0x560 <vEnterFirstTime+0xb0>
			pass[pass_count]=(key_pressed-48);
			SEND_DATE(key_pressed);
			_delay_ms(100);
			pass_count++;
		}
		EEPROM_vWriteBlockToAddress(Guest_PASS_ADD,pass,4);
 59c:	85 e2       	ldi	r24, 0x25	; 37
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	6d ee       	ldi	r22, 0xED	; 237
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	44 e0       	ldi	r20, 0x04	; 4
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(Login_status,0x00);
 5ac:	80 e2       	ldi	r24, 0x20	; 32
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	0e 94 0e 01 	call	0x21c	; 0x21c <EEPROM_vWriteByteToAddress>
}
 5b6:	08 95       	ret
				pass[pass_count]=(key_pressed-48);
				SEND_DATE(key_pressed);
				_delay_ms(00);
				pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 5b8:	81 e2       	ldi	r24, 0x21	; 33
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	6d ee       	ldi	r22, 0xED	; 237
 5be:	71 e0       	ldi	r23, 0x01	; 1
 5c0:	44 e0       	ldi	r20, 0x04	; 4
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_vWriteBlockToAddress>
			
		//pass={0};
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
		GO_LOC(2,1);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("Set Guest Pass");
 5d6:	87 e2       	ldi	r24, 0x27	; 39
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		GO_LOC(3,1);
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("guest Pass:");
 5e6:	86 e3       	ldi	r24, 0x36	; 54
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		pass_count=0;
 5ee:	10 92 eb 01 	sts	0x01EB, r1
 5f2:	b6 cf       	rjmp	.-148    	; 0x560 <vEnterFirstTime+0xb0>

000005f4 <u8CheckPass>:
	    PORTC&=(~(1<<BLOCK_BUZ_PIN));
	}

}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	e8 2e       	mov	r14, r24
			i++;
			
		}
		else
		{
			pass_count=FALSE;
 604:	cd ee       	ldi	r28, 0xED	; 237
 606:	d1 e0       	ldi	r29, 0x01	; 1
	    PORTC&=(~(1<<BLOCK_BUZ_PIN));
	}

}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
 608:	1c e0       	ldi	r17, 0x0C	; 12
//uint8 Mode;
	uint8 pass_count=0;
	while (pass_count<4)
	{
		key_pressed=keyfind();
 60a:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 60e:	80 93 f3 01 	sts	0x01F3, r24
		pass[pass_count]=(key_pressed);
 612:	80 91 f3 01 	lds	r24, 0x01F3
 616:	89 93       	st	Y+, r24
		SEND_DATE(key_pressed);
 618:	80 91 f3 01 	lds	r24, 0x01F3
 61c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
 620:	87 ea       	ldi	r24, 0xA7	; 167
 622:	91 e6       	ldi	r25, 0x61	; 97
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <u8CheckPass+0x30>
 628:	00 c0       	rjmp	.+0      	; 0x62a <u8CheckPass+0x36>
 62a:	00 00       	nop
		_delay_ms(100);
		GO_LOC(3,12+pass_count);
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	61 2f       	mov	r22, r17
 630:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_DATE('*');
 634:	8a e2       	ldi	r24, 0x2A	; 42
 636:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
 63a:	87 ea       	ldi	r24, 0xA7	; 167
 63c:	91 e6       	ldi	r25, 0x61	; 97
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <u8CheckPass+0x4a>
 642:	00 c0       	rjmp	.+0      	; 0x644 <u8CheckPass+0x50>
 644:	00 00       	nop
 646:	1f 5f       	subi	r17, 0xFF	; 255
}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
//uint8 Mode;
	uint8 pass_count=0;
	while (pass_count<4)
 648:	10 31       	cpi	r17, 0x10	; 16
 64a:	f9 f6       	brne	.-66     	; 0x60a <u8CheckPass+0x16>
 64c:	10 e0       	ldi	r17, 0x00	; 0
		SEND_DATE(key_pressed);
		_delay_ms(100);
		GO_LOC(3,12+pass_count);
		SEND_DATE('*');
		_delay_ms(100);
		pass_count++;
 64e:	04 e0       	ldi	r16, 0x04	; 4
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
	{
		
		EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(u8Mode_Add+i);
 650:	ff 24       	eor	r15, r15
			pass_count=FALSE;
			break;
		}
		if(i==3)
		{
			pass_count=TRUE;
 652:	dd 24       	eor	r13, r13
 654:	d3 94       	inc	r13
 656:	01 c0       	rjmp	.+2      	; 0x65a <u8CheckPass+0x66>
 658:	0d 2d       	mov	r16, r13
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
	{
		
		EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(u8Mode_Add+i);
 65a:	c1 2f       	mov	r28, r17
 65c:	d0 e0       	ldi	r29, 0x00	; 0
 65e:	c7 01       	movw	r24, r14
 660:	8c 0f       	add	r24, r28
 662:	9d 1f       	adc	r25, r29
 664:	0e 94 ef 00 	call	0x1de	; 0x1de <EEPROM_ui8ReadByteFromAddress>
		if (EEPROM_Pass==(pass[i]-48))
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	c3 51       	subi	r28, 0x13	; 19
 66c:	de 4f       	sbci	r29, 0xFE	; 254
 66e:	28 81       	ld	r18, Y
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	20 53       	subi	r18, 0x30	; 48
 674:	30 40       	sbci	r19, 0x00	; 0
 676:	82 17       	cp	r24, r18
 678:	93 07       	cpc	r25, r19
 67a:	31 f4       	brne	.+12     	; 0x688 <u8CheckPass+0x94>
		{
			i++;
 67c:	1f 5f       	subi	r17, 0xFF	; 255
		else
		{
			pass_count=FALSE;
			break;
		}
		if(i==3)
 67e:	13 30       	cpi	r17, 0x03	; 3
 680:	59 f3       	breq	.-42     	; 0x658 <u8CheckPass+0x64>
		_delay_ms(100);
		pass_count++;
	}
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
 682:	14 30       	cpi	r17, 0x04	; 4
 684:	50 f3       	brcs	.-44     	; 0x65a <u8CheckPass+0x66>
 686:	01 c0       	rjmp	.+2      	; 0x68a <u8CheckPass+0x96>
			i++;
			
		}
		else
		{
			pass_count=FALSE;
 688:	00 e0       	ldi	r16, 0x00	; 0
		{
			pass_count=TRUE;
		}
	}	
	return pass_count;	
}	
 68a:	80 2f       	mov	r24, r16
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	08 95       	ret

0000069c <SelectModePass>:
		EEPROM_vWriteBlockToAddress(Guest_PASS_ADD,pass,4);
		EEPROM_vWriteByteToAddress(Login_status,0x00);
}

void SelectModePass(struct_modecnf *ps)
{
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	ec 01       	movw	r28, r24
	while (Wrong_Tries < ALLWED_TRIES)
	{
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
		GO_LOC(2,1);
		SEND_STRING(ps->ptr_mode);
		SEND_STRING(" MODE");
 6aa:	02 e4       	ldi	r16, 0x42	; 66
 6ac:	11 e0       	ldi	r17, 0x01	; 1
		GO_LOC(3,1);
		SEND_STRING("Enter Pass:");
 6ae:	0f 2e       	mov	r0, r31
 6b0:	f8 e4       	ldi	r31, 0x48	; 72
 6b2:	ef 2e       	mov	r14, r31
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	ff 2e       	mov	r15, r31
 6b8:	f0 2d       	mov	r31, r0
{
	uint8 Wrong_Tries=0;
	int pass;
	while (Wrong_Tries < ALLWED_TRIES)
	{
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
		GO_LOC(2,1);
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING(ps->ptr_mode);
 6c8:	88 81       	ld	r24, Y
 6ca:	99 81       	ldd	r25, Y+1	; 0x01
 6cc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		SEND_STRING(" MODE");
 6d0:	c8 01       	movw	r24, r16
 6d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		GO_LOC(3,1);
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("Enter Pass:");
 6de:	c7 01       	movw	r24, r14
 6e0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 6e4:	87 ea       	ldi	r24, 0xA7	; 167
 6e6:	91 e6       	ldi	r25, 0x61	; 97
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <SelectModePass+0x4c>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <SelectModePass+0x52>
 6ee:	00 00       	nop
		_delay_ms(100);
		pass = u8CheckPass(ps->PASS_ADD);
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <u8CheckPass>
 6f6:	90 e0       	ldi	r25, 0x00	; 0
		if (pass==TRUE)
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	91 05       	cpc	r25, r1
 6fc:	c9 f4       	brne	.+50     	; 0x730 <SelectModePass+0x94>
		{
			Mode=ps->mode;
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	80 93 e6 01 	sts	0x01E6, r24
			DDRC|=(1<<ps->MODE_LED_PIN);
 704:	44 b3       	in	r20, 0x14	; 20
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	9c 01       	movw	r18, r24
 70c:	0f 80       	ldd	r0, Y+7	; 0x07
 70e:	02 c0       	rjmp	.+4      	; 0x714 <SelectModePass+0x78>
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <SelectModePass+0x74>
 718:	24 2b       	or	r18, r20
 71a:	24 bb       	out	0x14, r18	; 20
			PORTC|=(1<<ps->MODE_LED_PIN);
 71c:	25 b3       	in	r18, 0x15	; 21
 71e:	0f 80       	ldd	r0, Y+7	; 0x07
 720:	02 c0       	rjmp	.+4      	; 0x726 <SelectModePass+0x8a>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	0a 94       	dec	r0
 728:	e2 f7       	brpl	.-8      	; 0x722 <SelectModePass+0x86>
 72a:	82 2b       	or	r24, r18
 72c:	85 bb       	out	0x15, r24	; 21
 72e:	3a c0       	rjmp	.+116    	; 0x7a4 <SelectModePass+0x108>
			break;
		}
		else if(pass==FALSE)
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	19 f6       	brne	.-122    	; 0x6ba <SelectModePass+0x1e>
		{
			Wrong_Tries++;
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
			GO_LOC(2,4);
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	64 e0       	ldi	r22, 0x04	; 4
 73e:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			//SEND_STRING(ps->mode);
			SEND_STRING("Rong Pass");
 742:	84 e5       	ldi	r24, 0x54	; 84
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
			GO_LOC(3,4);
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	64 e0       	ldi	r22, 0x04	; 4
 74e:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
			SEND_STRING("TRY Again");
 752:	8e e5       	ldi	r24, 0x5E	; 94
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 75a:	af e4       	ldi	r26, 0x4F	; 79
 75c:	b3 ec       	ldi	r27, 0xC3	; 195
 75e:	11 97       	sbiw	r26, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <SelectModePass+0xc2>
 762:	00 c0       	rjmp	.+0      	; 0x764 <SelectModePass+0xc8>
 764:	00 00       	nop
			_delay_ms(200);
		}
	}
	if (Wrong_Tries>=ALLWED_TRIES)
	{
		DDRC|=(1<<BLOCK_BUZ_PIN);
 766:	a2 9a       	sbi	0x14, 2	; 20
		PORTC |=(1<<BLOCK_BUZ_PIN);
 768:	aa 9a       	sbi	0x15, 2	; 21
		//PORTC|=(1<<3);
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
		GO_LOC(2,4);
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	64 e0       	ldi	r22, 0x04	; 4
 774:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		Wrong_Tries=0;
		SEND_STRING("blocked mode");
 778:	88 e6       	ldi	r24, 0x68	; 104
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		GO_LOC(3,4);
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	64 e0       	ldi	r22, 0x04	; 4
 784:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("wait 20 sec");
 788:	85 e7       	ldi	r24, 0x75	; 117
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 790:	8f e3       	ldi	r24, 0x3F	; 63
 792:	97 e7       	ldi	r25, 0x77	; 119
 794:	ab e1       	ldi	r26, 0x1B	; 27
 796:	81 50       	subi	r24, 0x01	; 1
 798:	90 40       	sbci	r25, 0x00	; 0
 79a:	a0 40       	sbci	r26, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <SelectModePass+0xfa>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <SelectModePass+0x104>
 7a0:	00 00       	nop
		_delay_ms(9000);
	    PORTC&=(~(1<<BLOCK_BUZ_PIN));
 7a2:	aa 98       	cbi	0x15, 2	; 21
	}

}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	ff 90       	pop	r15
 7ae:	ef 90       	pop	r14
 7b0:	08 95       	ret

000007b2 <vShowState>:
	}
	
}

void vShowState(uint8 State,char Num)
{
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	d8 2f       	mov	r29, r24
 7b8:	c6 2f       	mov	r28, r22
	uint8 SPI_RESPONSE;	
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	GO_LOC(2,1);
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	if (Num==TV_CNFG)
 7c8:	c4 33       	cpi	r28, 0x34	; 52
 7ca:	49 f4       	brne	.+18     	; 0x7de <vShowState+0x2c>
	{
	SEND_STRING("TV:");
 7cc:	81 e8       	ldi	r24, 0x81	; 129
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	SEND_STRING(" State:");		
 7d4:	85 e8       	ldi	r24, 0x85	; 133
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <vShowState+0x42>
	}
	if (Num==AIRCOND_CNFG)
 7de:	c5 33       	cpi	r28, 0x35	; 53
 7e0:	49 f4       	brne	.+18     	; 0x7f4 <vShowState+0x42>
	{
		SEND_STRING("AIR_COND:");
 7e2:	8d e8       	ldi	r24, 0x8D	; 141
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
		SEND_STRING(" State:");
 7ea:	85 e8       	ldi	r24, 0x85	; 133
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 7f2:	0b c0       	rjmp	.+22     	; 0x80a <vShowState+0x58>
	}
	else
	{
	SEND_STRING("ROOM:");
 7f4:	87 e9       	ldi	r24, 0x97	; 151
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	SEND_DATE(Num);
 7fc:	8c 2f       	mov	r24, r28
 7fe:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
	SEND_STRING(" State:");
 802:	85 e8       	ldi	r24, 0x85	; 133
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	}	

	SPI_ui8TransmitRecive(State);	//demand the status from the slave
 80a:	8d 2f       	mov	r24, r29
 80c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
 810:	87 ea       	ldi	r24, 0xA7	; 167
 812:	91 e6       	ldi	r25, 0x61	; 97
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <vShowState+0x62>
 818:	00 c0       	rjmp	.+0      	; 0x81a <vShowState+0x68>
 81a:	00 00       	nop
	_delay_ms(100);//Halt the system for the given time in (ms)	
	SPI_RESPONSE = SPI_ui8TransmitRecive(DEMAND_RESPONSE);	
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
	if(SPI_RESPONSE == ON_STATUS)//if the response from the slave was on status
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	29 f4       	brne	.+10     	; 0x830 <vShowState+0x7e>
	{
		SEND_STRING("ON");//print the status on
 826:	8d e9       	ldi	r24, 0x9D	; 157
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 82e:	0b c0       	rjmp	.+22     	; 0x846 <vShowState+0x94>
	}
	else if(SPI_RESPONSE == OFF_STATUS)//if the response from the slave was off status
 830:	88 23       	and	r24, r24
 832:	29 f4       	brne	.+10     	; 0x83e <vShowState+0x8c>
	{
		SEND_STRING("OFF");//print the status off
 834:	80 ea       	ldi	r24, 0xA0	; 160
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 83c:	04 c0       	rjmp	.+8      	; 0x846 <vShowState+0x94>
	}
	else 
	{
		SEND_STRING("");//print the status off
 83e:	84 ea       	ldi	r24, 0xA4	; 164
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	}	
	GO_LOC(3,1);
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("ON:1   OFF:2  RET:0");
 84e:	85 ea       	ldi	r24, 0xA5	; 165
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	if (Num==AIRCOND_CNFG)
 856:	c5 33       	cpi	r28, 0x35	; 53
 858:	41 f4       	brne	.+16     	; 0x86a <__stack+0xb>
	{
		GO_LOC(4,1);
 85a:	84 e0       	ldi	r24, 0x04	; 4
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
		SEND_STRING("control temp:3");
 862:	89 eb       	ldi	r24, 0xB9	; 185
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>

	}
		
}	
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <vTurnOnOf>:

void vTurnOnOf(char key,uint8 MESSAGE)
{	
	if (key==TURN_ON)
 870:	81 33       	cpi	r24, 0x31	; 49
 872:	21 f4       	brne	.+8      	; 0x87c <vTurnOnOf+0xc>
	{
		SPI_ui8TransmitRecive(MESSAGE);
 874:	86 2f       	mov	r24, r22
 876:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
 87a:	08 95       	ret
	}
	else if(key_pressed==TURN_OFF)
 87c:	80 91 f3 01 	lds	r24, 0x01F3
 880:	82 33       	cpi	r24, 0x32	; 50
 882:	21 f4       	brne	.+8      	; 0x88c <vTurnOnOf+0x1c>
	{
		SPI_ui8TransmitRecive(MESSAGE+1);
 884:	86 2f       	mov	r24, r22
 886:	8f 5f       	subi	r24, 0xFF	; 255
 888:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
 88c:	08 95       	ret

0000088e <vSetTempMenue>:
	}	
	
}	

void vSetTempMenue(void)
{
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
	
	uint8 temp[2];
	uint8 Temp_Value;
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	GO_LOC(2,1);
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	0e 94 0c 02 	call	0x418	; 0x418 <GO_LOC>
	SEND_STRING("enter temp:");
 8a0:	88 ec       	ldi	r24, 0xC8	; 200
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
	key_pressed=keyfind();
 8a8:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 8ac:	80 93 f3 01 	sts	0x01F3, r24
	temp[0]=key_pressed;
 8b0:	d0 91 f3 01 	lds	r29, 0x01F3
	SEND_DATE(key_pressed);
 8b4:	80 91 f3 01 	lds	r24, 0x01F3
 8b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
 8bc:	8f e4       	ldi	r24, 0x4F	; 79
 8be:	93 ec       	ldi	r25, 0xC3	; 195
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	f1 f7       	brne	.-4      	; 0x8c0 <vSetTempMenue+0x32>
 8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <vSetTempMenue+0x38>
 8c6:	00 00       	nop
	_delay_ms(200);
	key_pressed=keyfind();
 8c8:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 8cc:	80 93 f3 01 	sts	0x01F3, r24
	temp[1]=key_pressed;
 8d0:	c0 91 f3 01 	lds	r28, 0x01F3
	SEND_DATE(key_pressed);
 8d4:	80 91 f3 01 	lds	r24, 0x01F3
 8d8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEND_DATE>
 8dc:	af e4       	ldi	r26, 0x4F	; 79
 8de:	b3 ec       	ldi	r27, 0xC3	; 195
 8e0:	11 97       	sbiw	r26, 0x01	; 1
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <vSetTempMenue+0x52>
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <vSetTempMenue+0x58>
 8e6:	00 00       	nop
	_delay_ms(200);
	SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
 8e8:	80 e4       	ldi	r24, 0x40	; 64
 8ea:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
 8ee:	8f e4       	ldi	r24, 0x4F	; 79
 8f0:	93 ec       	ldi	r25, 0xC3	; 195
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	f1 f7       	brne	.-4      	; 0x8f2 <vSetTempMenue+0x64>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <vSetTempMenue+0x6a>
 8f8:	00 00       	nop
	_delay_ms(200);//Halt the system to prevent write collision
	Temp_Value=temp[0]*10+temp[1];
 8fa:	dd 0f       	add	r29, r29
 8fc:	8d 2f       	mov	r24, r29
 8fe:	88 0f       	add	r24, r24
 900:	88 0f       	add	r24, r24
 902:	d8 0f       	add	r29, r24
	SPI_ui8TransmitRecive(Temp_Value);//send the entered temperature
 904:	8d 2f       	mov	r24, r29
 906:	8c 0f       	add	r24, r28
 908:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SPI_ui8TransmitRecive>
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically//
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SEND_COMND>
	SEND_STRING("Temperature Sent");//show the message
 912:	84 ed       	ldi	r24, 0xD4	; 212
 914:	91 e0       	ldi	r25, 0x01	; 1
 916:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SEND_STRING>
 91a:	8f e9       	ldi	r24, 0x9F	; 159
 91c:	96 e8       	ldi	r25, 0x86	; 134
 91e:	a1 e0       	ldi	r26, 0x01	; 1
 920:	81 50       	subi	r24, 0x01	; 1
 922:	90 40       	sbci	r25, 0x00	; 0
 924:	a0 40       	sbci	r26, 0x00	; 0
 926:	e1 f7       	brne	.-8      	; 0x920 <vSetTempMenue+0x92>
 928:	00 c0       	rjmp	.+0      	; 0x92a <vSetTempMenue+0x9c>
 92a:	00 00       	nop
	_delay_ms(500);//Halt the system for the given time in (ms)
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret

00000932 <u8EnterRoonConfig>:
}	

uint8 u8EnterRoonConfig(char Key)
{
	
	switch (Key)
 932:	83 33       	cpi	r24, 0x33	; 51
 934:	a1 f1       	breq	.+104    	; 0x99e <u8EnterRoonConfig+0x6c>
 936:	84 33       	cpi	r24, 0x34	; 52
 938:	30 f4       	brcc	.+12     	; 0x946 <u8EnterRoonConfig+0x14>
 93a:	81 33       	cpi	r24, 0x31	; 49
 93c:	51 f0       	breq	.+20     	; 0x952 <u8EnterRoonConfig+0x20>
 93e:	82 33       	cpi	r24, 0x32	; 50
 940:	09 f0       	breq	.+2      	; 0x944 <u8EnterRoonConfig+0x12>
 942:	69 c0       	rjmp	.+210    	; 0xa16 <u8EnterRoonConfig+0xe4>
 944:	19 c0       	rjmp	.+50     	; 0x978 <u8EnterRoonConfig+0x46>
 946:	84 33       	cpi	r24, 0x34	; 52
 948:	e1 f1       	breq	.+120    	; 0x9c2 <u8EnterRoonConfig+0x90>
 94a:	85 33       	cpi	r24, 0x35	; 53
 94c:	09 f0       	breq	.+2      	; 0x950 <u8EnterRoonConfig+0x1e>
 94e:	63 c0       	rjmp	.+198    	; 0xa16 <u8EnterRoonConfig+0xe4>
 950:	4a c0       	rjmp	.+148    	; 0x9e6 <u8EnterRoonConfig+0xb4>
	{
	case ROOM1_CNFG:
		vShowState(ROOM1_STATUS,ROOM1_CNFG);
 952:	81 e1       	ldi	r24, 0x11	; 17
 954:	61 e3       	ldi	r22, 0x31	; 49
 956:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vShowState>
		key_pressed=keyfind();
 95a:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 95e:	80 93 f3 01 	sts	0x01F3, r24
		if (key_pressed==RET) break;				
 962:	80 91 f3 01 	lds	r24, 0x01F3
 966:	80 33       	cpi	r24, 0x30	; 48
 968:	09 f4       	brne	.+2      	; 0x96c <u8EnterRoonConfig+0x3a>
 96a:	55 c0       	rjmp	.+170    	; 0xa16 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM1_OFFSET);	
 96c:	80 91 f3 01 	lds	r24, 0x01F3
 970:	61 e2       	ldi	r22, 0x21	; 33
 972:	0e 94 38 04 	call	0x870	; 0x870 <vTurnOnOf>
		break;
 976:	08 95       	ret
	case ROOM2_CNFG:	
		vShowState(ROOM2_STATUS,ROOM2_CNFG);
 978:	82 e1       	ldi	r24, 0x12	; 18
 97a:	62 e3       	ldi	r22, 0x32	; 50
 97c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vShowState>
		key_pressed=keyfind();
 980:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 984:	80 93 f3 01 	sts	0x01F3, r24
		if (key_pressed==RET) break;			
 988:	80 91 f3 01 	lds	r24, 0x01F3
 98c:	80 33       	cpi	r24, 0x30	; 48
 98e:	09 f4       	brne	.+2      	; 0x992 <u8EnterRoonConfig+0x60>
 990:	42 c0       	rjmp	.+132    	; 0xa16 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM2_OFFSET);
 992:	80 91 f3 01 	lds	r24, 0x01F3
 996:	63 e2       	ldi	r22, 0x23	; 35
 998:	0e 94 38 04 	call	0x870	; 0x870 <vTurnOnOf>
		break;	
 99c:	08 95       	ret
	case ROOM3_CNFG:
		vShowState(ROOM3_STATUS,ROOM3_CNFG);
 99e:	83 e1       	ldi	r24, 0x13	; 19
 9a0:	63 e3       	ldi	r22, 0x33	; 51
 9a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vShowState>
		key_pressed=keyfind();
 9a6:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 9aa:	80 93 f3 01 	sts	0x01F3, r24
		if (key_pressed==RET) break;			
 9ae:	80 91 f3 01 	lds	r24, 0x01F3
 9b2:	80 33       	cpi	r24, 0x30	; 48
 9b4:	81 f1       	breq	.+96     	; 0xa16 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM3_OFFSET);
 9b6:	80 91 f3 01 	lds	r24, 0x01F3
 9ba:	65 e2       	ldi	r22, 0x25	; 37
 9bc:	0e 94 38 04 	call	0x870	; 0x870 <vTurnOnOf>
		break;
 9c0:	08 95       	ret
	case TV_CNFG:
		vShowState(TV_STATUS,TV_CNFG);
 9c2:	85 e1       	ldi	r24, 0x15	; 21
 9c4:	64 e3       	ldi	r22, 0x34	; 52
 9c6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vShowState>
		key_pressed=keyfind();
 9ca:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 9ce:	80 93 f3 01 	sts	0x01F3, r24
		if (key_pressed==RET) break;			
 9d2:	80 91 f3 01 	lds	r24, 0x01F3
 9d6:	80 33       	cpi	r24, 0x30	; 48
 9d8:	f1 f0       	breq	.+60     	; 0xa16 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+TV_OFFSET);
 9da:	80 91 f3 01 	lds	r24, 0x01F3
 9de:	67 e2       	ldi	r22, 0x27	; 39
 9e0:	0e 94 38 04 	call	0x870	; 0x870 <vTurnOnOf>
		break;	
 9e4:	08 95       	ret
	case AIRCOND_CNFG:
		vShowState(AIR_COND,AIRCOND_CNFG);
 9e6:	86 e0       	ldi	r24, 0x06	; 6
 9e8:	65 e3       	ldi	r22, 0x35	; 53
 9ea:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vShowState>
		key_pressed=keyfind();
 9ee:	0e 94 37 01 	call	0x26e	; 0x26e <keyfind>
 9f2:	80 93 f3 01 	sts	0x01F3, r24
		if (key_pressed==RET) break;	
 9f6:	80 91 f3 01 	lds	r24, 0x01F3
 9fa:	80 33       	cpi	r24, 0x30	; 48
 9fc:	61 f0       	breq	.+24     	; 0xa16 <u8EnterRoonConfig+0xe4>
		if (key_pressed=='3')  //entering control temperture of air conditioning
 9fe:	80 91 f3 01 	lds	r24, 0x01F3
 a02:	83 33       	cpi	r24, 0x33	; 51
 a04:	19 f4       	brne	.+6      	; 0xa0c <u8EnterRoonConfig+0xda>
		{
			vSetTempMenue();
 a06:	0e 94 47 04 	call	0x88e	; 0x88e <vSetTempMenue>
 a0a:	08 95       	ret
		} 
		else
		{
		   vTurnOnOf(key_pressed,OFFSET_MESSAGE+AIRCOND_OFFSET);
 a0c:	80 91 f3 01 	lds	r24, 0x01F3
 a10:	69 e2       	ldi	r22, 0x29	; 41
 a12:	0e 94 38 04 	call	0x870	; 0x870 <vTurnOnOf>
		}
		break;			
		
	}
	
}
 a16:	08 95       	ret

00000a18 <OUTPUT_MODE>:

#include "microconf.h"

void OUTPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *INPUT_TRISTATE_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 a18:	fc 01       	movw	r30, r24
 a1a:	db 01       	movw	r26, r22
	SET_BIT(*DIR_ADRESSS,PIN_NO);
 a1c:	30 81       	ld	r19, Z
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	bc 01       	movw	r22, r24
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <OUTPUT_MODE+0x12>
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	4a 95       	dec	r20
 a2c:	e2 f7       	brpl	.-8      	; 0xa26 <OUTPUT_MODE+0xe>
 a2e:	ab 01       	movw	r20, r22
 a30:	86 2f       	mov	r24, r22
 a32:	96 2f       	mov	r25, r22
 a34:	93 2b       	or	r25, r19
 a36:	90 83       	st	Z, r25
	
	switch (PIN_MODE)
 a38:	22 23       	and	r18, r18
 a3a:	39 f0       	breq	.+14     	; 0xa4a <OUTPUT_MODE+0x32>
 a3c:	21 30       	cpi	r18, 0x01	; 1
 a3e:	41 f4       	brne	.+16     	; 0xa50 <OUTPUT_MODE+0x38>
	{
			case INPUT_FLOAT:
			CLEAR_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 a40:	8c 91       	ld	r24, X
 a42:	40 95       	com	r20
 a44:	48 23       	and	r20, r24
 a46:	4c 93       	st	X, r20
			break;
 a48:	08 95       	ret
			
			case INPUT_PULLUP:
			SET_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 a4a:	9c 91       	ld	r25, X
 a4c:	89 2b       	or	r24, r25
 a4e:	8c 93       	st	X, r24
 a50:	08 95       	ret

00000a52 <INPUT_MODE>:



void INPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *OUT_FLOATORPULL_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 a52:	fc 01       	movw	r30, r24
 a54:	db 01       	movw	r26, r22
	CLEAR_BIT(*DIR_ADRESSS,PIN_NO);
 a56:	30 81       	ld	r19, Z
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	bc 01       	movw	r22, r24
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <INPUT_MODE+0x12>
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	4a 95       	dec	r20
 a66:	e2 f7       	brpl	.-8      	; 0xa60 <INPUT_MODE+0xe>
 a68:	ab 01       	movw	r20, r22
 a6a:	86 2f       	mov	r24, r22
 a6c:	80 95       	com	r24
 a6e:	98 2f       	mov	r25, r24
 a70:	93 23       	and	r25, r19
 a72:	90 83       	st	Z, r25
	
	switch(PIN_MODE)
 a74:	22 30       	cpi	r18, 0x02	; 2
 a76:	31 f0       	breq	.+12     	; 0xa84 <INPUT_MODE+0x32>
 a78:	23 30       	cpi	r18, 0x03	; 3
 a7a:	39 f4       	brne	.+14     	; 0xa8a <INPUT_MODE+0x38>
{
	
	case OUTPUT_BLOCK:
	SET_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 a7c:	8c 91       	ld	r24, X
 a7e:	48 2b       	or	r20, r24
 a80:	4c 93       	st	X, r20
	break;
 a82:	08 95       	ret
	
	case OUTPUT_PASS:
	CLEAR_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 a84:	9c 91       	ld	r25, X
 a86:	89 23       	and	r24, r25
 a88:	8c 93       	st	X, r24
 a8a:	08 95       	ret

00000a8c <SPI_vInitMaster>:
#include "SPI.h"


void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
 a8c:	87 b3       	in	r24, 0x17	; 23
 a8e:	80 6b       	ori	r24, 0xB0	; 176
 a90:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
 a92:	8d b1       	in	r24, 0x0d	; 13
 a94:	81 65       	ori	r24, 0x51	; 81
 a96:	8d b9       	out	0x0d, r24	; 13
}
 a98:	08 95       	ret

00000a9a <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 a9a:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 a9c:	6e 9a       	sbi	0x0d, 6	; 13
}
 a9e:	08 95       	ret

00000aa0 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 aa0:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 aa2:	77 9b       	sbis	0x0e, 7	; 14
 aa4:	fe cf       	rjmp	.-4      	; 0xaa2 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 aa6:	8f b1       	in	r24, 0x0f	; 15
 aa8:	08 95       	ret

00000aaa <itoa>:
 aaa:	fb 01       	movw	r30, r22
 aac:	9f 01       	movw	r18, r30
 aae:	e8 94       	clt
 ab0:	42 30       	cpi	r20, 0x02	; 2
 ab2:	c4 f0       	brlt	.+48     	; 0xae4 <itoa+0x3a>
 ab4:	45 32       	cpi	r20, 0x25	; 37
 ab6:	b4 f4       	brge	.+44     	; 0xae4 <itoa+0x3a>
 ab8:	4a 30       	cpi	r20, 0x0A	; 10
 aba:	29 f4       	brne	.+10     	; 0xac6 <itoa+0x1c>
 abc:	97 fb       	bst	r25, 7
 abe:	1e f4       	brtc	.+6      	; 0xac6 <itoa+0x1c>
 ac0:	90 95       	com	r25
 ac2:	81 95       	neg	r24
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	64 2f       	mov	r22, r20
 ac8:	77 27       	eor	r23, r23
 aca:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 ace:	80 5d       	subi	r24, 0xD0	; 208
 ad0:	8a 33       	cpi	r24, 0x3A	; 58
 ad2:	0c f0       	brlt	.+2      	; 0xad6 <itoa+0x2c>
 ad4:	89 5d       	subi	r24, 0xD9	; 217
 ad6:	81 93       	st	Z+, r24
 ad8:	cb 01       	movw	r24, r22
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	a1 f7       	brne	.-24     	; 0xac6 <itoa+0x1c>
 ade:	16 f4       	brtc	.+4      	; 0xae4 <itoa+0x3a>
 ae0:	5d e2       	ldi	r21, 0x2D	; 45
 ae2:	51 93       	st	Z+, r21
 ae4:	10 82       	st	Z, r1
 ae6:	c9 01       	movw	r24, r18
 ae8:	0c 94 76 05 	jmp	0xaec	; 0xaec <strrev>

00000aec <strrev>:
 aec:	dc 01       	movw	r26, r24
 aee:	fc 01       	movw	r30, r24
 af0:	67 2f       	mov	r22, r23
 af2:	71 91       	ld	r23, Z+
 af4:	77 23       	and	r23, r23
 af6:	e1 f7       	brne	.-8      	; 0xaf0 <strrev+0x4>
 af8:	32 97       	sbiw	r30, 0x02	; 2
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <strrev+0x18>
 afc:	7c 91       	ld	r23, X
 afe:	6d 93       	st	X+, r22
 b00:	70 83       	st	Z, r23
 b02:	62 91       	ld	r22, -Z
 b04:	ae 17       	cp	r26, r30
 b06:	bf 07       	cpc	r27, r31
 b08:	c8 f3       	brcs	.-14     	; 0xafc <strrev+0x10>
 b0a:	08 95       	ret

00000b0c <__udivmodhi4>:
 b0c:	aa 1b       	sub	r26, r26
 b0e:	bb 1b       	sub	r27, r27
 b10:	51 e1       	ldi	r21, 0x11	; 17
 b12:	07 c0       	rjmp	.+14     	; 0xb22 <__udivmodhi4_ep>

00000b14 <__udivmodhi4_loop>:
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	a6 17       	cp	r26, r22
 b1a:	b7 07       	cpc	r27, r23
 b1c:	10 f0       	brcs	.+4      	; 0xb22 <__udivmodhi4_ep>
 b1e:	a6 1b       	sub	r26, r22
 b20:	b7 0b       	sbc	r27, r23

00000b22 <__udivmodhi4_ep>:
 b22:	88 1f       	adc	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	5a 95       	dec	r21
 b28:	a9 f7       	brne	.-22     	; 0xb14 <__udivmodhi4_loop>
 b2a:	80 95       	com	r24
 b2c:	90 95       	com	r25
 b2e:	bc 01       	movw	r22, r24
 b30:	cd 01       	movw	r24, r26
 b32:	08 95       	ret

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
