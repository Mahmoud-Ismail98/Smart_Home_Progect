
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080020a  0080020a  00000e8a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001930  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000183e  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  000032ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df2  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000048fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000881  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	aa e0       	ldi	r26, 0x0A	; 10
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 31       	cpi	r26, 0x1B	; 27
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8 SPI_RESPONSE;

int main(void)
{
	
	LCD_INISTIALIZATION();
  92:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_INISTIALIZATION>
	SPI_vInitMaster();//initializes the communication protocol of SPI
  96:	0e 94 c4 05 	call	0xb88	; 0xb88 <SPI_vInitMaster>
	} 
	while (Mode==NO_MODE)
	{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
	GO_LOC(2,5);
	SEND_STRING("select mode");
  9a:	ce e7       	ldi	r28, 0x7E	; 126
  9c:	d0 e0       	ldi	r29, 0x00	; 0
	GO_LOC(3,3);
	SEND_STRING("0:Owner 1:Guest");
  9e:	0a e8       	ldi	r16, 0x8A	; 138
  a0:	10 e0       	ldi	r17, 0x00	; 0
	{
		SelectModePass(&OWNER_MODE_STRUCT);
	} 
	else if (key_pressed=='1')
	{
		SelectModePass(&GUEST_MODE_STRUCT);
  a2:	0f 2e       	mov	r0, r31
  a4:	fc ed       	ldi	r31, 0xDC	; 220
  a6:	cf 2e       	mov	r12, r31
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	df 2e       	mov	r13, r31
  ac:	f0 2d       	mov	r31, r0
	SEND_STRING("0:Owner 1:Guest");
	_delay_ms(2000);				
	key_pressed=keyfind();
	if (key_pressed=='0')
	{
		SelectModePass(&OWNER_MODE_STRUCT);
  ae:	0f 2e       	mov	r0, r31
  b0:	fa ee       	ldi	r31, 0xEA	; 234
  b2:	ef 2e       	mov	r14, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ff 2e       	mov	r15, r31
  b8:	f0 2d       	mov	r31, r0
	
	LCD_INISTIALIZATION();
	SPI_vInitMaster();//initializes the communication protocol of SPI
while (1)
{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	GO_LOC(2,2);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("wellcome to smart");
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	GO_LOC(3,5);
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("home system");
  d8:	82 e7       	ldi	r24, 0x72	; 114
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	9d e0       	ldi	r25, 0x0D	; 13
  e4:	a3 e0       	ldi	r26, 0x03	; 3
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	a0 40       	sbci	r26, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5e>
  f0:	00 00       	nop
		SelectModePass(&GUEST_MODE_STRUCT);
	}
	}			
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
	GO_LOC(1,3);	
	SEND_STRING("1:ROOM1 2:ROOM2");
  f2:	0f 2e       	mov	r0, r31
  f4:	fa e9       	ldi	r31, 0x9A	; 154
  f6:	af 2e       	mov	r10, r31
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	bf 2e       	mov	r11, r31
  fc:	f0 2d       	mov	r31, r0
	GO_LOC(2,3);
	SEND_STRING("3:ROOM3 ");	
  fe:	0f 2e       	mov	r0, r31
 100:	fa ea       	ldi	r31, 0xAA	; 170
 102:	8f 2e       	mov	r8, r31
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	9f 2e       	mov	r9, r31
 108:	f0 2d       	mov	r31, r0
	
	if (Mode==OWNER_MODE)
	{
			SEND_STRING("4:TV");		
 10a:	0f 2e       	mov	r0, r31
 10c:	f3 eb       	ldi	r31, 0xB3	; 179
 10e:	4f 2e       	mov	r4, r31
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	5f 2e       	mov	r5, r31
 114:	f0 2d       	mov	r31, r0
			GO_LOC(3,3);
			SEND_STRING("5:AIR_Condition");
 116:	0f 2e       	mov	r0, r31
 118:	f8 eb       	ldi	r31, 0xB8	; 184
 11a:	2f 2e       	mov	r2, r31
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	3f 2e       	mov	r3, r31
 120:	f0 2d       	mov	r31, r0
	else
	{
		GO_LOC(3,4);
	}

	SEND_STRING("EXIT PRESS:* ");
 122:	0f 2e       	mov	r0, r31
 124:	f8 ec       	ldi	r31, 0xC8	; 200
 126:	6f 2e       	mov	r6, r31
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	7f 2e       	mov	r7, r31
 12c:	f0 2d       	mov	r31, r0
	GO_LOC(3,5);
	SEND_STRING("home system");
	_delay_ms(1000);
while (1)
{
	if (EEPROM_ui8ReadByteFromAddress(Login_status)==0xFF)
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 12 01 	call	0x224	; 0x224 <EEPROM_ui8ReadByteFromAddress>
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	81 f5       	brne	.+96     	; 0x19a <main+0x108>
	{		
		vEnterFirstTime();
 13a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vEnterFirstTime>
 13e:	2d c0       	rjmp	.+90     	; 0x19a <main+0x108>
	} 
	while (Mode==NO_MODE)
	{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	GO_LOC(2,5);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("select mode");
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	GO_LOC(3,3);
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("0:Owner 1:Guest");
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 162:	8f e7       	ldi	r24, 0x7F	; 127
 164:	9a e1       	ldi	r25, 0x1A	; 26
 166:	a6 e0       	ldi	r26, 0x06	; 6
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	a0 40       	sbci	r26, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xd6>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xe0>
 172:	00 00       	nop
	_delay_ms(2000);				
	key_pressed=keyfind();
 174:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 178:	80 93 19 02 	sts	0x0219, r24
	if (key_pressed=='0')
 17c:	80 91 19 02 	lds	r24, 0x0219
 180:	80 33       	cpi	r24, 0x30	; 48
 182:	21 f4       	brne	.+8      	; 0x18c <main+0xfa>
	{
		SelectModePass(&OWNER_MODE_STRUCT);
 184:	c7 01       	movw	r24, r14
 186:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SelectModePass>
 18a:	07 c0       	rjmp	.+14     	; 0x19a <main+0x108>
	} 
	else if (key_pressed=='1')
 18c:	80 91 19 02 	lds	r24, 0x0219
 190:	81 33       	cpi	r24, 0x31	; 49
 192:	19 f4       	brne	.+6      	; 0x19a <main+0x108>
	{
		SelectModePass(&GUEST_MODE_STRUCT);
 194:	c6 01       	movw	r24, r12
 196:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SelectModePass>
{
	if (EEPROM_ui8ReadByteFromAddress(Login_status)==0xFF)
	{		
		vEnterFirstTime();
	} 
	while (Mode==NO_MODE)
 19a:	80 91 0a 02 	lds	r24, 0x020A
 19e:	88 23       	and	r24, r24
 1a0:	79 f2       	breq	.-98     	; 0x140 <main+0xae>
	else if (key_pressed=='1')
	{
		SelectModePass(&GUEST_MODE_STRUCT);
	}
	}			
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	GO_LOC(1,3);	
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("1:ROOM1 2:ROOM2");
 1b0:	c5 01       	movw	r24, r10
 1b2:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	GO_LOC(2,3);
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("3:ROOM3 ");	
 1be:	c4 01       	movw	r24, r8
 1c0:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	
	if (Mode==OWNER_MODE)
 1c4:	80 91 0a 02 	lds	r24, 0x020A
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	99 f4       	brne	.+38     	; 0x1f2 <main+0x160>
	{
			SEND_STRING("4:TV");		
 1cc:	c2 01       	movw	r24, r4
 1ce:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
			GO_LOC(3,3);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			SEND_STRING("5:AIR_Condition");
 1da:	c1 01       	movw	r24, r2
 1dc:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	}
	if (Mode==OWNER_MODE)
 1e0:	80 91 0a 02 	lds	r24, 0x020A
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <main+0x160>
	{
		GO_LOC(4,4);
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <main+0x168>
	} 
	else
	{
		GO_LOC(3,4);
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	}

	SEND_STRING("EXIT PRESS:* ");
 1fa:	c3 01       	movw	r24, r6
 1fc:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		
	key_pressed=keyfind();
 200:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 204:	80 93 19 02 	sts	0x0219, r24
	if (key_pressed=='*')
 208:	80 91 19 02 	lds	r24, 0x0219
 20c:	8a 32       	cpi	r24, 0x2A	; 42
 20e:	29 f4       	brne	.+10     	; 0x21a <main+0x188>
	{
		Mode=NO_MODE;
 210:	10 92 0a 02 	sts	0x020A, r1
		PORTC&=(~(1<<OWNER_PIN));
 214:	a8 98       	cbi	0x15, 0	; 21
		PORTC&=(~(1<<GUEST_PIN));
 216:	a9 98       	cbi	0x15, 1	; 21
	else
	{
	u8EnterRoonConfig(key_pressed);		
	}										
}
	}			
 218:	50 cf       	rjmp	.-352    	; 0xba <main+0x28>
		PORTC&=(~(1<<GUEST_PIN));
		break;
	}
	else
	{
	u8EnterRoonConfig(key_pressed);		
 21a:	80 91 19 02 	lds	r24, 0x0219
 21e:	0e 94 17 05 	call	0xa2e	; 0xa2e <u8EnterRoonConfig>
	}										
}
 222:	85 cf       	rjmp	.-246    	; 0x12e <main+0x9c>

00000224 <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 224:	e1 99       	sbic	0x1c, 1	; 28
 226:	fe cf       	rjmp	.-4      	; 0x224 <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
 228:	9f bb       	out	0x1f, r25	; 31
 22a:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
 22c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 22e:	8d b3       	in	r24, 0x1d	; 29
}
 230:	08 95       	ret

00000232 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
 232:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 234:	e1 99       	sbic	0x1c, 1	; 28
 236:	fe cf       	rjmp	.-4      	; 0x234 <EEPROM_vReadBlockFromAddress+0x2>
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 238:	41 15       	cp	r20, r1
 23a:	51 05       	cpc	r21, r1
 23c:	89 f0       	breq	.+34     	; 0x260 <EEPROM_vReadBlockFromAddress+0x2e>
 23e:	e6 2f       	mov	r30, r22
 240:	f7 2f       	mov	r31, r23
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
	EECR |= (1 << EERE);
	/* Return data from data register */
	return EEDR;
}

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
 246:	c9 01       	movw	r24, r18
 248:	8a 0f       	add	r24, r26
 24a:	9b 1f       	adc	r25, r27
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
 24c:	9f bb       	out	0x1f, r25	; 31
 24e:	8e bb       	out	0x1e, r24	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
 250:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
 252:	8d b3       	in	r24, 0x1d	; 29
 254:	81 93       	st	Z+, r24

		counter++;//increase the bytes counter
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 25a:	24 17       	cp	r18, r20
 25c:	35 07       	cpc	r19, r21
 25e:	99 f7       	brne	.-26     	; 0x246 <EEPROM_vReadBlockFromAddress+0x14>
 260:	08 95       	ret

00000262 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 262:	e1 99       	sbic	0x1c, 1	; 28
 264:	fe cf       	rjmp	.-4      	; 0x262 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
 266:	9f bb       	out	0x1f, r25	; 31
 268:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
 26a:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
 26c:	8d b3       	in	r24, 0x1d	; 29
 26e:	86 17       	cp	r24, r22
 270:	19 f0       	breq	.+6      	; 0x278 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
 272:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
 274:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
 276:	e1 9a       	sbi	0x1c, 1	; 28
 278:	08 95       	ret

0000027a <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
 27a:	dc 01       	movw	r26, r24
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	c1 f0       	breq	.+48     	; 0x2b2 <EEPROM_vWriteBlockToAddress+0x38>
 282:	e6 2f       	mov	r30, r22
 284:	f7 2f       	mov	r31, r23

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 28a:	e1 99       	sbic	0x1c, 1	; 28
 28c:	fe cf       	rjmp	.-4      	; 0x28a <EEPROM_vWriteBlockToAddress+0x10>

	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
 28e:	c9 01       	movw	r24, r18
 290:	8a 0f       	add	r24, r26
 292:	9b 1f       	adc	r25, r27
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
 294:	9f bb       	out	0x1f, r25	; 31
 296:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
 298:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
 29a:	9d b3       	in	r25, 0x1d	; 29
 29c:	81 91       	ld	r24, Z+
 29e:	98 17       	cp	r25, r24
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <EEPROM_vWriteBlockToAddress+0x2e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
 2a2:	8d bb       	out	0x1d, r24	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
 2a4:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
 2a6:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 2ac:	24 17       	cp	r18, r20
 2ae:	35 07       	cpc	r19, r21
 2b0:	61 f7       	brne	.-40     	; 0x28a <EEPROM_vWriteBlockToAddress+0x10>
 2b2:	08 95       	ret

000002b4 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 2b4:	40 ef       	ldi	r20, 0xF0	; 240
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 2b6:	3f ef       	ldi	r19, 0xFF	; 255
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);   

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 2b8:	2f ee       	ldi	r18, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 2ba:	9f ed       	ldi	r25, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 2bc:	6f eb       	ldi	r22, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 2be:	5f e7       	ldi	r21, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 2c0:	41 bb       	out	0x11, r20	; 17
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 2c2:	32 bb       	out	0x12, r19	; 18

		do
		{
				
			KEY_PRT &= 0x0F;      //  ROW OUT LOW // mask PORT for column read only
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2ca:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);//  read status of column
 2cc:	80 b3       	in	r24, 0x10	; 16
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	80 93 15 02 	sts	0x0215, r24
		}while(colloc != 0x0F);
 2d4:	8f 30       	cpi	r24, 0x0F	; 15
 2d6:	b1 f7       	brne	.-20     	; 0x2c4 <keyfind+0x10>
 2d8:	e7 e8       	ldi	r30, 0x87	; 135
 2da:	f3 e1       	ldi	r31, 0x13	; 19
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <keyfind+0x28>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <keyfind+0x2e>
 2e2:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);            //  20ms key debounce time
				colloc = (KEY_PIN & 0x0F);  //read status of column
 2e4:	80 b3       	in	r24, 0x10	; 16
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	80 93 15 02 	sts	0x0215, r24
			}while(colloc == 0x0F);         //check for any key press
 2ec:	8f 30       	cpi	r24, 0x0F	; 15
 2ee:	a1 f3       	breq	.-24     	; 0x2d8 <keyfind+0x24>
 2f0:	ef e0       	ldi	r30, 0x0F	; 15
 2f2:	f7 e2       	ldi	r31, 0x27	; 39
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <keyfind+0x40>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <keyfind+0x46>
 2fa:	00 00       	nop
			
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
 2fc:	80 b3       	in	r24, 0x10	; 16
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	80 93 15 02 	sts	0x0215, r24
		}while(colloc == 0x0F);   
 304:	8f 30       	cpi	r24, 0x0F	; 15
 306:	41 f3       	breq	.-48     	; 0x2d8 <keyfind+0x24>

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 308:	22 bb       	out	0x12, r18	; 18
		asm("NOP");
 30a:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 30c:	80 b3       	in	r24, 0x10	; 16
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	80 93 15 02 	sts	0x0215, r24
		if(colloc != 0x0F)
 314:	8f 30       	cpi	r24, 0x0F	; 15
 316:	19 f0       	breq	.+6      	; 0x31e <keyfind+0x6a>
		{
			rowloc = 0;
 318:	10 92 16 02 	sts	0x0216, r1
			break;
 31c:	24 c0       	rjmp	.+72     	; 0x366 <keyfind+0xb2>
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 31e:	92 bb       	out	0x12, r25	; 18
		asm("NOP");
 320:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 322:	80 b3       	in	r24, 0x10	; 16
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	80 93 15 02 	sts	0x0215, r24
		if(colloc != 0x0F)
 32a:	8f 30       	cpi	r24, 0x0F	; 15
 32c:	21 f0       	breq	.+8      	; 0x336 <keyfind+0x82>
		{
			rowloc = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 16 02 	sts	0x0216, r24
			break;
 334:	18 c0       	rjmp	.+48     	; 0x366 <keyfind+0xb2>
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 336:	62 bb       	out	0x12, r22	; 18
		asm("NOP");
 338:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 33a:	80 b3       	in	r24, 0x10	; 16
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	80 93 15 02 	sts	0x0215, r24
		if(colloc != 0x0F)
 342:	8f 30       	cpi	r24, 0x0F	; 15
 344:	21 f0       	breq	.+8      	; 0x34e <keyfind+0x9a>
		{
			rowloc = 2;
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	80 93 16 02 	sts	0x0216, r24
			break;
 34c:	0c c0       	rjmp	.+24     	; 0x366 <keyfind+0xb2>
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 34e:	52 bb       	out	0x12, r21	; 18
		asm("NOP");
 350:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 352:	80 b3       	in	r24, 0x10	; 16
 354:	8f 70       	andi	r24, 0x0F	; 15
 356:	80 93 15 02 	sts	0x0215, r24
		if(colloc != 0x0F)
 35a:	8f 30       	cpi	r24, 0x0F	; 15
 35c:	09 f4       	brne	.+2      	; 0x360 <keyfind+0xac>
 35e:	b0 cf       	rjmp	.-160    	; 0x2c0 <keyfind+0xc>
		{
			rowloc = 3;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	80 93 16 02 	sts	0x0216, r24
			break;
		}
	}

	if(colloc == 0x0E)
 366:	80 91 15 02 	lds	r24, 0x0215
 36a:	8e 30       	cpi	r24, 0x0E	; 14
 36c:	59 f4       	brne	.+22     	; 0x384 <keyfind+0xd0>
	return(keypad[rowloc][0]);
 36e:	e0 91 16 02 	lds	r30, 0x0216
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 50       	subi	r30, 0x0E	; 14
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	80 81       	ld	r24, Z
 382:	08 95       	ret
	else if(colloc == 0x0D)
 384:	8d 30       	cpi	r24, 0x0D	; 13
 386:	59 f4       	brne	.+22     	; 0x39e <keyfind+0xea>
	return(keypad[rowloc][1]);
 388:	e0 91 16 02 	lds	r30, 0x0216
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	ee 50       	subi	r30, 0x0E	; 14
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	08 95       	ret
	else if(colloc == 0x0B)
 39e:	8b 30       	cpi	r24, 0x0B	; 11
 3a0:	59 f4       	brne	.+22     	; 0x3b8 <keyfind+0x104>
	return(keypad[rowloc][2]);
 3a2:	e0 91 16 02 	lds	r30, 0x0216
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	ee 50       	subi	r30, 0x0E	; 14
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	08 95       	ret
	else
	return(keypad[rowloc][3]);
 3b8:	e0 91 16 02 	lds	r30, 0x0216
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	ee 50       	subi	r30, 0x0E	; 14
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	83 81       	ldd	r24, Z+3	; 0x03
}
 3cc:	08 95       	ret

000003ce <HI_LO_PULS_EN>:
	HI_LO_PULS_EN();
}

void HI_LO_PULS_EN(void)
{
	CONTRLO_PINS_HI_LO|=(1<<ENABLE);
 3ce:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	00 00       	nop
	_delay_us(1);
	CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
 3d2:	c1 98       	cbi	0x18, 1	; 24
 3d4:	81 e2       	ldi	r24, 0x21	; 33
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <HI_LO_PULS_EN+0x8>
 3da:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	83 ec       	ldi	r24, 0xC3	; 195
 3de:	99 e0       	ldi	r25, 0x09	; 9
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <HI_LO_PULS_EN+0x12>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <HI_LO_PULS_EN+0x18>
 3e6:	00 00       	nop
	_delay_us(100);
	_delay_ms(10);
}
 3e8:	08 95       	ret

000003ea <SEND_COMND>:

}

void SEND_COMND(unsigned char CMD)
{
	CONTRLO_PINS_HI_LO&=~((1<<RE_WR)|(1<<REG_SEL)) ;
 3ea:	98 b3       	in	r25, 0x18	; 24
 3ec:	93 7f       	andi	r25, 0xF3	; 243
 3ee:	98 bb       	out	0x18, r25	; 24
	DATE_HI_LO=CMD;
 3f0:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 3f2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HI_LO_PULS_EN>
}
 3f6:	08 95       	ret

000003f8 <LCD_INISTIALIZATION>:
 */ 
#include "lcd.h"

void LCD_INISTIALIZATION(void)
{
	DATE_IN_OUT =0xFF;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	8a bb       	out	0x1a, r24	; 26
	CONTRLO_PINS_IN_OUT|=((1<<ENABLE)|(1<<RE_WR)|(1<<REG_SEL));
 3fc:	87 b3       	in	r24, 0x17	; 23
 3fe:	8e 60       	ori	r24, 0x0E	; 14
 400:	87 bb       	out	0x17, r24	; 23
 402:	87 e8       	ldi	r24, 0x87	; 135
 404:	93 e1       	ldi	r25, 0x13	; 19
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <LCD_INISTIALIZATION+0xe>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <LCD_INISTIALIZATION+0x14>
 40c:	00 00       	nop
	//CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
	
	_delay_ms(20);       //wait for start initialization
	SEND_COMND(0x38);   //8bit mode
 40e:	88 e3       	ldi	r24, 0x38	; 56
 410:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	SEND_COMND(0x0E);   //curser not be blinking
 414:	8e e0       	ldi	r24, 0x0E	; 14
 416:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	SEND_COMND(0x01);   // clear display
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
 420:	83 ef       	ldi	r24, 0xF3	; 243
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <LCD_INISTIALIZATION+0x2c>
 428:	00 c0       	rjmp	.+0      	; 0x42a <LCD_INISTIALIZATION+0x32>
 42a:	00 00       	nop
	_delay_ms(2);
	SEND_COMND(0x06);   //INCREAMENT CURSOR TO RIGHT
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>

}
 432:	08 95       	ret

00000434 <SEND_DATE>:
	_delay_ms(10);
}

void SEND_DATE(unsigned char DATE)
{
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
 434:	c2 98       	cbi	0x18, 2	; 24
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
 436:	c3 9a       	sbi	0x18, 3	; 24
	DATE_HI_LO=DATE;
 438:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 43a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HI_LO_PULS_EN>
}
 43e:	08 95       	ret

00000440 <SEND_STRING>:
void SEND_STRING(unsigned char *STR)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
	while(*STR>0)
 446:	88 81       	ld	r24, Y
 448:	88 23       	and	r24, r24
 44a:	31 f0       	breq	.+12     	; 0x458 <SEND_STRING+0x18>
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
 44c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*STR>0)
	{
		
		SEND_DATE(*STR++);  //first send and then increament
 44e:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
{
	while(*STR>0)
 452:	89 91       	ld	r24, Y+
 454:	88 23       	and	r24, r24
 456:	d9 f7       	brne	.-10     	; 0x44e <SEND_STRING+0xe>
	{
		
		SEND_DATE(*STR++);  //first send and then increament
		
	}
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <GO_LOC>:
char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
void GO_LOC(uint8_t x,uint8_t y)
{
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
 45e:	61 50       	subi	r22, 0x01	; 1
 460:	e8 2f       	mov	r30, r24
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ef 5f       	subi	r30, 0xFF	; 255
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	80 81       	ld	r24, Z
 46a:	86 0f       	add	r24, r22
 46c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
}
 470:	08 95       	ret

00000472 <SEND_LONG_NUM>:

void SEND_LONG_NUM(char *p,int siz)
{
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
 484:	6b 01       	movw	r12, r22
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 486:	16 16       	cp	r1, r22
 488:	17 06       	cpc	r1, r23
 48a:	b4 f4       	brge	.+44     	; 0x4b8 <SEND_LONG_NUM+0x46>
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
}

void SEND_LONG_NUM(char *p,int siz)
 48c:	8c 01       	movw	r16, r24
 48e:	06 0f       	add	r16, r22
 490:	17 1f       	adc	r17, r23
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
	{
		itoa(*p,NUM_ST,10);
 492:	0f 2e       	mov	r0, r31
 494:	fb e0       	ldi	r31, 0x0B	; 11
 496:	ef 2e       	mov	r14, r31
 498:	f2 e0       	ldi	r31, 0x02	; 2
 49a:	ff 2e       	mov	r15, r31
 49c:	f0 2d       	mov	r31, r0
 49e:	89 91       	ld	r24, Y+
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	b7 01       	movw	r22, r14
 4a4:	4a e0       	ldi	r20, 0x0A	; 10
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 df 05 	call	0xbbe	; 0xbbe <itoa>
		SEND_STRING(NUM_ST);
 4ac:	c7 01       	movw	r24, r14
 4ae:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
}

void SEND_LONG_NUM(char *p,int siz)
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 4b2:	c0 17       	cp	r28, r16
 4b4:	d1 07       	cpc	r29, r17
 4b6:	99 f7       	brne	.-26     	; 0x49e <SEND_LONG_NUM+0x2c>
		SEND_STRING(NUM_ST);
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
 4b8:	c4 e1       	ldi	r28, 0x14	; 20
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
 4bc:	cc 19       	sub	r28, r12
 4be:	dd 09       	sbc	r29, r13
 4c0:	0a f4       	brpl	.+2      	; 0x4c4 <SEND_LONG_NUM+0x52>
 4c2:	21 96       	adiw	r28, 0x01	; 1
 4c4:	d5 95       	asr	r29
 4c6:	c7 95       	ror	r28
 4c8:	64 96       	adiw	r28, 0x14	; 20
	for (int i=0;i<sift;i++)
 4ca:	1c 16       	cp	r1, r28
 4cc:	1d 06       	cpc	r1, r29
 4ce:	54 f4       	brge	.+20     	; 0x4e4 <SEND_LONG_NUM+0x72>
 4d0:	00 e0       	ldi	r16, 0x00	; 0
 4d2:	10 e0       	ldi	r17, 0x00	; 0
	{
		SEND_COMND(0x1C);
 4d4:	8c e1       	ldi	r24, 0x1C	; 28
 4d6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
	for (int i=0;i<sift;i++)
 4da:	0f 5f       	subi	r16, 0xFF	; 255
 4dc:	1f 4f       	sbci	r17, 0xFF	; 255
 4de:	0c 17       	cp	r16, r28
 4e0:	1d 07       	cpc	r17, r29
 4e2:	c4 f3       	brlt	.-16     	; 0x4d4 <SEND_LONG_NUM+0x62>
	{
		SEND_COMND(0x1C);
	}
	
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	08 95       	ret

000004f6 <vEnterFirstTime>:
uint8 Mode;
uint8 temp[2];
uint8 Temp_Value;						
vEnterFirstTime()
{
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
			GO_LOC(2,1);
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			SEND_STRING("login for first time");
 504:	86 e0       	ldi	r24, 0x06	; 6
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
			GO_LOC(2,1);
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			SEND_STRING("Set Admin Pass");
 51a:	8b e1       	ldi	r24, 0x1B	; 27
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
			GO_LOC(3,1);
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			SEND_STRING("Admin Pass:");
 52a:	8a e2       	ldi	r24, 0x2A	; 42
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
			
			while (pass_count<4)
 532:	80 91 0f 02 	lds	r24, 0x020F
 536:	84 30       	cpi	r24, 0x04	; 4
 538:	08 f0       	brcs	.+2      	; 0x53c <vEnterFirstTime+0x46>
 53a:	67 c0       	rjmp	.+206    	; 0x60a <vEnterFirstTime+0x114>
			{
				key_pressed =keyfind();
 53c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 540:	80 93 19 02 	sts	0x0219, r24
				pass[pass_count]=(key_pressed-48);
 544:	80 91 19 02 	lds	r24, 0x0219
 548:	e0 91 0f 02 	lds	r30, 0x020F
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	ef 5e       	subi	r30, 0xEF	; 239
 550:	fd 4f       	sbci	r31, 0xFD	; 253
 552:	80 53       	subi	r24, 0x30	; 48
 554:	80 83       	st	Z, r24
				SEND_DATE(key_pressed);
 556:	80 91 19 02 	lds	r24, 0x0219
 55a:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 55e:	87 ea       	ldi	r24, 0xA7	; 167
 560:	91 e6       	ldi	r25, 0x61	; 97
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <vEnterFirstTime+0x6c>
 566:	00 c0       	rjmp	.+0      	; 0x568 <vEnterFirstTime+0x72>
 568:	00 00       	nop
				_delay_ms(100);
				pass_count++;
 56a:	80 91 0f 02 	lds	r24, 0x020F
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 0f 02 	sts	0x020F, r24
			GO_LOC(2,1);
			SEND_STRING("Set Admin Pass");
			GO_LOC(3,1);
			SEND_STRING("Admin Pass:");
			
			while (pass_count<4)
 574:	84 30       	cpi	r24, 0x04	; 4
 576:	10 f3       	brcs	.-60     	; 0x53c <vEnterFirstTime+0x46>
				pass[pass_count]=(key_pressed-48);
				SEND_DATE(key_pressed);
				_delay_ms(100);
				pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 578:	81 e2       	ldi	r24, 0x21	; 33
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	61 e1       	ldi	r22, 0x11	; 17
 57e:	72 e0       	ldi	r23, 0x02	; 2
 580:	44 e0       	ldi	r20, 0x04	; 4
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteBlockToAddress>
			
		//pass={0};
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
		GO_LOC(2,1);
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("Set Guest Pass");
 596:	86 e3       	ldi	r24, 0x36	; 54
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		GO_LOC(3,1);
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("guest Pass:");
 5a6:	85 e4       	ldi	r24, 0x45	; 69
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		pass_count=0;
 5ae:	10 92 0f 02 	sts	0x020F, r1
		while (pass_count<4)
		{
			key_pressed=keyfind();
 5b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 5b6:	80 93 19 02 	sts	0x0219, r24
			pass[pass_count]=(key_pressed-48);
 5ba:	80 91 19 02 	lds	r24, 0x0219
 5be:	e0 91 0f 02 	lds	r30, 0x020F
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	ef 5e       	subi	r30, 0xEF	; 239
 5c6:	fd 4f       	sbci	r31, 0xFD	; 253
 5c8:	80 53       	subi	r24, 0x30	; 48
 5ca:	80 83       	st	Z, r24
			SEND_DATE(key_pressed);
 5cc:	80 91 19 02 	lds	r24, 0x0219
 5d0:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 5d4:	87 ea       	ldi	r24, 0xA7	; 167
 5d6:	91 e6       	ldi	r25, 0x61	; 97
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <vEnterFirstTime+0xe2>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <vEnterFirstTime+0xe8>
 5de:	00 00       	nop
			_delay_ms(100);
			pass_count++;
 5e0:	80 91 0f 02 	lds	r24, 0x020F
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 0f 02 	sts	0x020F, r24
		GO_LOC(2,1);
		SEND_STRING("Set Guest Pass");
		GO_LOC(3,1);
		SEND_STRING("guest Pass:");
		pass_count=0;
		while (pass_count<4)
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	10 f3       	brcs	.-60     	; 0x5b2 <vEnterFirstTime+0xbc>
			pass[pass_count]=(key_pressed-48);
			SEND_DATE(key_pressed);
			_delay_ms(100);
			pass_count++;
		}
		EEPROM_vWriteBlockToAddress(Guest_PASS_ADD,pass,4);
 5ee:	85 e2       	ldi	r24, 0x25	; 37
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	61 e1       	ldi	r22, 0x11	; 17
 5f4:	72 e0       	ldi	r23, 0x02	; 2
 5f6:	44 e0       	ldi	r20, 0x04	; 4
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(Login_status,0x00);
 5fe:	80 e2       	ldi	r24, 0x20	; 32
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	0e 94 31 01 	call	0x262	; 0x262 <EEPROM_vWriteByteToAddress>
}
 608:	08 95       	ret
				pass[pass_count]=(key_pressed-48);
				SEND_DATE(key_pressed);
				_delay_ms(100);
				pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 60a:	81 e2       	ldi	r24, 0x21	; 33
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	61 e1       	ldi	r22, 0x11	; 17
 610:	72 e0       	ldi	r23, 0x02	; 2
 612:	44 e0       	ldi	r20, 0x04	; 4
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteBlockToAddress>
			
		//pass={0};
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
		GO_LOC(2,1);
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("Set Guest Pass");
 628:	86 e3       	ldi	r24, 0x36	; 54
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		GO_LOC(3,1);
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("guest Pass:");
 638:	85 e4       	ldi	r24, 0x45	; 69
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		pass_count=0;
 640:	10 92 0f 02 	sts	0x020F, r1
 644:	b6 cf       	rjmp	.-148    	; 0x5b2 <vEnterFirstTime+0xbc>

00000646 <u8CheckPass>:
	    _delay_ms(7000);
	}

}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
 646:	df 92       	push	r13
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	e8 2e       	mov	r14, r24
			i++;
			
		}
		else
		{
			pass_count=FALSE;
 656:	c1 e1       	ldi	r28, 0x11	; 17
 658:	d2 e0       	ldi	r29, 0x02	; 2
	    _delay_ms(7000);
	}

}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
 65a:	1c e0       	ldi	r17, 0x0C	; 12
//uint8 Mode;
	uint8 pass_count=0;
	while (pass_count<4)
	{
		key_pressed=keyfind();
 65c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 660:	80 93 19 02 	sts	0x0219, r24
		pass[pass_count]=(key_pressed);
 664:	80 91 19 02 	lds	r24, 0x0219
 668:	89 93       	st	Y+, r24
		SEND_DATE(key_pressed);
 66a:	80 91 19 02 	lds	r24, 0x0219
 66e:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 672:	8f e5       	ldi	r24, 0x5F	; 95
 674:	9a ee       	ldi	r25, 0xEA	; 234
 676:	a0 e0       	ldi	r26, 0x00	; 0
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	90 40       	sbci	r25, 0x00	; 0
 67c:	a0 40       	sbci	r26, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <u8CheckPass+0x32>
 680:	00 c0       	rjmp	.+0      	; 0x682 <u8CheckPass+0x3c>
 682:	00 00       	nop
		_delay_ms(300);
		GO_LOC(3,12+pass_count);
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	61 2f       	mov	r22, r17
 688:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_DATE('*');
 68c:	8a e2       	ldi	r24, 0x2A	; 42
 68e:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 692:	a7 ea       	ldi	r26, 0xA7	; 167
 694:	b1 e6       	ldi	r27, 0x61	; 97
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <u8CheckPass+0x50>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <u8CheckPass+0x56>
 69c:	00 00       	nop
 69e:	1f 5f       	subi	r17, 0xFF	; 255
}
uint8 u8CheckPass(uint8 u8Mode_Add )
{
//uint8 Mode;
	uint8 pass_count=0;
	while (pass_count<4)
 6a0:	10 31       	cpi	r17, 0x10	; 16
 6a2:	e1 f6       	brne	.-72     	; 0x65c <u8CheckPass+0x16>
 6a4:	10 e0       	ldi	r17, 0x00	; 0
		SEND_DATE(key_pressed);
		_delay_ms(300);
		GO_LOC(3,12+pass_count);
		SEND_DATE('*');
		_delay_ms(100);
		pass_count++;
 6a6:	04 e0       	ldi	r16, 0x04	; 4
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
	{
		
		EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(u8Mode_Add+i);
 6a8:	ff 24       	eor	r15, r15
			pass_count=FALSE;
			break;
		}
		if(i==3)
		{
			pass_count=TRUE;
 6aa:	dd 24       	eor	r13, r13
 6ac:	d3 94       	inc	r13
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <u8CheckPass+0x6c>
 6b0:	0d 2d       	mov	r16, r13
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
	{
		
		EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(u8Mode_Add+i);
 6b2:	c1 2f       	mov	r28, r17
 6b4:	d0 e0       	ldi	r29, 0x00	; 0
 6b6:	c7 01       	movw	r24, r14
 6b8:	8c 0f       	add	r24, r28
 6ba:	9d 1f       	adc	r25, r29
 6bc:	0e 94 12 01 	call	0x224	; 0x224 <EEPROM_ui8ReadByteFromAddress>
		if (EEPROM_Pass==(pass[i]-48))
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	cf 5e       	subi	r28, 0xEF	; 239
 6c4:	dd 4f       	sbci	r29, 0xFD	; 253
 6c6:	28 81       	ld	r18, Y
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	20 53       	subi	r18, 0x30	; 48
 6cc:	30 40       	sbci	r19, 0x00	; 0
 6ce:	82 17       	cp	r24, r18
 6d0:	93 07       	cpc	r25, r19
 6d2:	31 f4       	brne	.+12     	; 0x6e0 <u8CheckPass+0x9a>
		{
			i++;
 6d4:	1f 5f       	subi	r17, 0xFF	; 255
		else
		{
			pass_count=FALSE;
			break;
		}
		if(i==3)
 6d6:	13 30       	cpi	r17, 0x03	; 3
 6d8:	59 f3       	breq	.-42     	; 0x6b0 <u8CheckPass+0x6a>
		_delay_ms(100);
		pass_count++;
	}
	uint8 EEPROM_Pass;
	uint8 i=0;
	while(i<4)
 6da:	14 30       	cpi	r17, 0x04	; 4
 6dc:	50 f3       	brcs	.-44     	; 0x6b2 <u8CheckPass+0x6c>
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <u8CheckPass+0x9c>
			i++;
			
		}
		else
		{
			pass_count=FALSE;
 6e0:	00 e0       	ldi	r16, 0x00	; 0
		{
			pass_count=TRUE;
		}
	}	
	return pass_count;	
}	
 6e2:	80 2f       	mov	r24, r16
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	08 95       	ret

000006f4 <SelectModePass>:
		EEPROM_vWriteBlockToAddress(Guest_PASS_ADD,pass,4);
		EEPROM_vWriteByteToAddress(Login_status,0x00);
}

void SelectModePass(struct_modecnf *ps)
{
 6f4:	8f 92       	push	r8
 6f6:	9f 92       	push	r9
 6f8:	af 92       	push	r10
 6fa:	bf 92       	push	r11
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
	uint8 Wrong_Tries=0;
 70c:	dd 24       	eor	r13, r13
	while (Wrong_Tries < ALLWED_TRIES)
	{
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
		GO_LOC(2,5);
		SEND_STRING(ps->ptr_mode);
		SEND_STRING(" MODE");
 70e:	01 e5       	ldi	r16, 0x51	; 81
 710:	11 e0       	ldi	r17, 0x01	; 1
		GO_LOC(3,1);
		SEND_STRING("Enter Pass:");
 712:	0f 2e       	mov	r0, r31
 714:	f7 e5       	ldi	r31, 0x57	; 87
 716:	ef 2e       	mov	r14, r31
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	ff 2e       	mov	r15, r31
 71c:	f0 2d       	mov	r31, r0
		{
			Wrong_Tries++;
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
			GO_LOC(2,4);
			//SEND_STRING(ps->mode);
			SEND_STRING("Rong Pass");
 71e:	0f 2e       	mov	r0, r31
 720:	f3 e6       	ldi	r31, 0x63	; 99
 722:	af 2e       	mov	r10, r31
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	bf 2e       	mov	r11, r31
 728:	f0 2d       	mov	r31, r0
			GO_LOC(3,4);
			SEND_STRING("TRY Again");
 72a:	0f 2e       	mov	r0, r31
 72c:	fd e6       	ldi	r31, 0x6D	; 109
 72e:	8f 2e       	mov	r8, r31
 730:	f1 e0       	ldi	r31, 0x01	; 1
 732:	9f 2e       	mov	r9, r31
 734:	f0 2d       	mov	r31, r0
{
	uint8 Wrong_Tries=0;
	int pass;
	while (Wrong_Tries < ALLWED_TRIES)
	{
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
		GO_LOC(2,5);
 73c:	82 e0       	ldi	r24, 0x02	; 2
 73e:	65 e0       	ldi	r22, 0x05	; 5
 740:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING(ps->ptr_mode);
 744:	88 81       	ld	r24, Y
 746:	99 81       	ldd	r25, Y+1	; 0x01
 748:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		SEND_STRING(" MODE");
 74c:	c8 01       	movw	r24, r16
 74e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		GO_LOC(3,1);
 752:	83 e0       	ldi	r24, 0x03	; 3
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("Enter Pass:");
 75a:	c7 01       	movw	r24, r14
 75c:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 760:	87 ea       	ldi	r24, 0xA7	; 167
 762:	91 e6       	ldi	r25, 0x61	; 97
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <SelectModePass+0x70>
 768:	00 c0       	rjmp	.+0      	; 0x76a <SelectModePass+0x76>
 76a:	00 00       	nop
		_delay_ms(100);
		pass = u8CheckPass(ps->PASS_ADD);
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	0e 94 23 03 	call	0x646	; 0x646 <u8CheckPass>
 772:	90 e0       	ldi	r25, 0x00	; 0
		if (pass==TRUE)
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	91 05       	cpc	r25, r1
 778:	c9 f4       	brne	.+50     	; 0x7ac <SelectModePass+0xb8>
		{
			Mode=ps->mode;
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	80 93 0a 02 	sts	0x020A, r24
			DDRC|=(1<<ps->MODE_LED_PIN);
 780:	44 b3       	in	r20, 0x14	; 20
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	9c 01       	movw	r18, r24
 788:	0f 80       	ldd	r0, Y+7	; 0x07
 78a:	02 c0       	rjmp	.+4      	; 0x790 <SelectModePass+0x9c>
 78c:	22 0f       	add	r18, r18
 78e:	33 1f       	adc	r19, r19
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <SelectModePass+0x98>
 794:	24 2b       	or	r18, r20
 796:	24 bb       	out	0x14, r18	; 20
			PORTC|=(1<<ps->MODE_LED_PIN);
 798:	25 b3       	in	r18, 0x15	; 21
 79a:	0f 80       	ldd	r0, Y+7	; 0x07
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <SelectModePass+0xae>
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	0a 94       	dec	r0
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <SelectModePass+0xaa>
 7a6:	82 2b       	or	r24, r18
 7a8:	85 bb       	out	0x15, r24	; 21
 7aa:	46 c0       	rjmp	.+140    	; 0x838 <SelectModePass+0x144>
			break;
		}
		else if(pass==FALSE)
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	19 f6       	brne	.-122    	; 0x736 <SelectModePass+0x42>
		{
			Wrong_Tries++;
 7b0:	d3 94       	inc	r13
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
			GO_LOC(2,4);
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	64 e0       	ldi	r22, 0x04	; 4
 7bc:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			//SEND_STRING(ps->mode);
			SEND_STRING("Rong Pass");
 7c0:	c5 01       	movw	r24, r10
 7c2:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
			GO_LOC(3,4);
 7c6:	83 e0       	ldi	r24, 0x03	; 3
 7c8:	64 e0       	ldi	r22, 0x04	; 4
 7ca:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
			SEND_STRING("TRY Again");
 7ce:	c4 01       	movw	r24, r8
 7d0:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 7d4:	af e4       	ldi	r26, 0x4F	; 79
 7d6:	b3 ec       	ldi	r27, 0xC3	; 195
 7d8:	11 97       	sbiw	r26, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <SelectModePass+0xe4>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <SelectModePass+0xea>
 7de:	00 00       	nop

void SelectModePass(struct_modecnf *ps)
{
	uint8 Wrong_Tries=0;
	int pass;
	while (Wrong_Tries < ALLWED_TRIES)
 7e0:	b2 e0       	ldi	r27, 0x02	; 2
 7e2:	bd 15       	cp	r27, r13
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <SelectModePass+0xf4>
 7e6:	a7 cf       	rjmp	.-178    	; 0x736 <SelectModePass+0x42>
			_delay_ms(200);
		}
	}
	if (Wrong_Tries>=ALLWED_TRIES)
	{
		DDRC|=(1<<BLOCK_BUZ_PIN);
 7e8:	a2 9a       	sbi	0x14, 2	; 20
		PORTC |=(1<<BLOCK_BUZ_PIN);
 7ea:	aa 9a       	sbi	0x15, 2	; 21
		//PORTC|=(1<<3);
		SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
		GO_LOC(2,4);
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	64 e0       	ldi	r22, 0x04	; 4
 7f6:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		Wrong_Tries=0;
		SEND_STRING("blocked mode");
 7fa:	87 e7       	ldi	r24, 0x77	; 119
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		GO_LOC(3,4);
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	64 e0       	ldi	r22, 0x04	; 4
 806:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("wait 20 sec");
 80a:	84 e8       	ldi	r24, 0x84	; 132
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 812:	8f eb       	ldi	r24, 0xBF	; 191
 814:	97 e2       	ldi	r25, 0x27	; 39
 816:	a9 e0       	ldi	r26, 0x09	; 9
 818:	81 50       	subi	r24, 0x01	; 1
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	a0 40       	sbci	r26, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <SelectModePass+0x124>
 820:	00 c0       	rjmp	.+0      	; 0x822 <SelectModePass+0x12e>
 822:	00 00       	nop
		_delay_ms(3000);
	    PORTC&=(~(1<<BLOCK_BUZ_PIN));
 824:	aa 98       	cbi	0x15, 2	; 21
 826:	8f eb       	ldi	r24, 0xBF	; 191
 828:	9c e5       	ldi	r25, 0x5C	; 92
 82a:	a5 e1       	ldi	r26, 0x15	; 21
 82c:	81 50       	subi	r24, 0x01	; 1
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	a0 40       	sbci	r26, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <SelectModePass+0x138>
 834:	00 c0       	rjmp	.+0      	; 0x836 <SelectModePass+0x142>
 836:	00 00       	nop
	    _delay_ms(7000);
	}

}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	ff 90       	pop	r15
 842:	ef 90       	pop	r14
 844:	df 90       	pop	r13
 846:	bf 90       	pop	r11
 848:	af 90       	pop	r10
 84a:	9f 90       	pop	r9
 84c:	8f 90       	pop	r8
 84e:	08 95       	ret

00000850 <vShowState>:
	}
	
}

void vShowState(uint8 State,char Num)
{
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	d8 2f       	mov	r29, r24
 856:	c6 2f       	mov	r28, r22
	uint8 SPI_RESPONSE;	
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	GO_LOC(2,1);
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	61 e0       	ldi	r22, 0x01	; 1
 862:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	if (Num==TV_CNFG)
 866:	c4 33       	cpi	r28, 0x34	; 52
 868:	49 f4       	brne	.+18     	; 0x87c <__stack+0x1d>
	{
	SEND_STRING("TV:");
 86a:	80 e9       	ldi	r24, 0x90	; 144
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	SEND_STRING(" State:");		
 872:	84 e9       	ldi	r24, 0x94	; 148
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 87a:	16 c0       	rjmp	.+44     	; 0x8a8 <__stack+0x49>
	}
	else if (Num==AIRCOND_CNFG)
 87c:	c5 33       	cpi	r28, 0x35	; 53
 87e:	49 f4       	brne	.+18     	; 0x892 <__stack+0x33>
	{
		SEND_STRING("AIR_COND:");
 880:	8c e9       	ldi	r24, 0x9C	; 156
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
		SEND_STRING(" State:");
 888:	84 e9       	ldi	r24, 0x94	; 148
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
	}
	else
	{
	SEND_STRING("ROOM:");
 892:	86 ea       	ldi	r24, 0xA6	; 166
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	SEND_DATE(Num);
 89a:	8c 2f       	mov	r24, r28
 89c:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
	SEND_STRING(" State:");
 8a0:	84 e9       	ldi	r24, 0x94	; 148
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	}	

	SPI_ui8TransmitRecive(State);	//demand the status from the slave
 8a8:	8d 2f       	mov	r24, r29
 8aa:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 8ae:	87 ea       	ldi	r24, 0xA7	; 167
 8b0:	91 e6       	ldi	r25, 0x61	; 97
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
 8b8:	00 00       	nop
	_delay_ms(100);//Halt the system for the given time in (ms)	
	SPI_RESPONSE = SPI_ui8TransmitRecive(DEMAND_RESPONSE);	
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
	if(SPI_RESPONSE == ON_STATUS)//if the response from the slave was on status
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	29 f4       	brne	.+10     	; 0x8ce <__stack+0x6f>
	{
		SEND_STRING("ON");//print the status on
 8c4:	8c ea       	ldi	r24, 0xAC	; 172
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__stack+0x7b>
	}
	else if(SPI_RESPONSE == OFF_STATUS)//if the response from the slave was off status
 8ce:	88 23       	and	r24, r24
 8d0:	21 f4       	brne	.+8      	; 0x8da <__stack+0x7b>
	{
		SEND_STRING("OFF");//print the status off
 8d2:	8f ea       	ldi	r24, 0xAF	; 175
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	}

	GO_LOC(3,1);
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("ON:1   OFF:2  RET:0");
 8e2:	83 eb       	ldi	r24, 0xB3	; 179
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	if (Num==AIRCOND_CNFG)
 8ea:	c5 33       	cpi	r28, 0x35	; 53
 8ec:	41 f4       	brne	.+16     	; 0x8fe <__stack+0x9f>
	{
		GO_LOC(4,1);
 8ee:	84 e0       	ldi	r24, 0x04	; 4
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
		SEND_STRING("control temp:3");
 8f6:	87 ec       	ldi	r24, 0xC7	; 199
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>

	}
		
}	
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <vTurnOnOf>:

void vTurnOnOf(char key,uint8 MESSAGE)
{	
	if (key==TURN_ON)
 904:	81 33       	cpi	r24, 0x31	; 49
 906:	21 f4       	brne	.+8      	; 0x910 <vTurnOnOf+0xc>
	{
		SPI_ui8TransmitRecive(MESSAGE);
 908:	86 2f       	mov	r24, r22
 90a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 90e:	08 95       	ret
	}
	else if(key_pressed==TURN_OFF)
 910:	80 91 19 02 	lds	r24, 0x0219
 914:	82 33       	cpi	r24, 0x32	; 50
 916:	21 f4       	brne	.+8      	; 0x920 <vTurnOnOf+0x1c>
	{
		SPI_ui8TransmitRecive(MESSAGE+1);
 918:	86 2f       	mov	r24, r22
 91a:	8f 5f       	subi	r24, 0xFF	; 255
 91c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 920:	08 95       	ret

00000922 <vSetTempMenue>:
	
}	

void vSetTempMenue(void)
{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically	
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	SPI_ui8TransmitRecive(TEMP_STATUS);	//demand the status from the slave
 928:	87 e1       	ldi	r24, 0x17	; 23
 92a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 92e:	87 ea       	ldi	r24, 0xA7	; 167
 930:	91 e6       	ldi	r25, 0x61	; 97
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <vSetTempMenue+0x10>
 936:	00 c0       	rjmp	.+0      	; 0x938 <vSetTempMenue+0x16>
 938:	00 00       	nop
	_delay_ms(100);//Halt the system for the given time in (ms)	
	//uint8 temp[2];
	//uint8 Temp_Value;
	Temp_Value = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 940:	80 93 1a 02 	sts	0x021A, r24
	temp[0]=Temp_Value/10;
 944:	6a e0       	ldi	r22, 0x0A	; 10
 946:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodqi4>
 94a:	80 93 17 02 	sts	0x0217, r24
	temp[1]=Temp_Value%10;	
 94e:	90 93 18 02 	sts	0x0218, r25
	GO_LOC(2,1);	
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	61 e0       	ldi	r22, 0x01	; 1
 956:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("old required temp:");
 95a:	86 ed       	ldi	r24, 0xD6	; 214
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	SEND_DATE(temp[0]+48);
 962:	80 91 17 02 	lds	r24, 0x0217
 966:	80 5d       	subi	r24, 0xD0	; 208
 968:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
	SEND_DATE(temp[1]+48);		
 96c:	80 91 18 02 	lds	r24, 0x0218
 970:	80 5d       	subi	r24, 0xD0	; 208
 972:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
	Temp_Value=0;
 976:	10 92 1a 02 	sts	0x021A, r1
	temp[0]=0;
 97a:	10 92 17 02 	sts	0x0217, r1
	temp[1]=0;
 97e:	10 92 18 02 	sts	0x0218, r1
	GO_LOC(3,1);
 982:	83 e0       	ldi	r24, 0x03	; 3
 984:	61 e0       	ldi	r22, 0x01	; 1
 986:	0e 94 2f 02 	call	0x45e	; 0x45e <GO_LOC>
	SEND_STRING("enter new temp:");
 98a:	89 ee       	ldi	r24, 0xE9	; 233
 98c:	91 e0       	ldi	r25, 0x01	; 1
 98e:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
	key_pressed=keyfind();
 992:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 996:	80 93 19 02 	sts	0x0219, r24
	temp[0]=key_pressed-48;
 99a:	80 91 19 02 	lds	r24, 0x0219
 99e:	80 53       	subi	r24, 0x30	; 48
 9a0:	80 93 17 02 	sts	0x0217, r24
	SEND_DATE(key_pressed);
 9a4:	80 91 19 02 	lds	r24, 0x0219
 9a8:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 9ac:	af e4       	ldi	r26, 0x4F	; 79
 9ae:	b3 ec       	ldi	r27, 0xC3	; 195
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <vSetTempMenue+0x8e>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <vSetTempMenue+0x94>
 9b6:	00 00       	nop
	_delay_ms(200);
	key_pressed=keyfind();
 9b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 9bc:	80 93 19 02 	sts	0x0219, r24
	temp[1]=key_pressed-48;
 9c0:	80 91 19 02 	lds	r24, 0x0219
 9c4:	80 53       	subi	r24, 0x30	; 48
 9c6:	80 93 18 02 	sts	0x0218, r24
	SEND_DATE(key_pressed);
 9ca:	80 91 19 02 	lds	r24, 0x0219
 9ce:	0e 94 1a 02 	call	0x434	; 0x434 <SEND_DATE>
 9d2:	8f e4       	ldi	r24, 0x4F	; 79
 9d4:	93 ec       	ldi	r25, 0xC3	; 195
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	f1 f7       	brne	.-4      	; 0x9d6 <vSetTempMenue+0xb4>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <vSetTempMenue+0xba>
 9dc:	00 00       	nop
	_delay_ms(200);
	SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
 9de:	80 e4       	ldi	r24, 0x40	; 64
 9e0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
 9e4:	af e4       	ldi	r26, 0x4F	; 79
 9e6:	b3 ec       	ldi	r27, 0xC3	; 195
 9e8:	11 97       	sbiw	r26, 0x01	; 1
 9ea:	f1 f7       	brne	.-4      	; 0x9e8 <vSetTempMenue+0xc6>
 9ec:	00 c0       	rjmp	.+0      	; 0x9ee <vSetTempMenue+0xcc>
 9ee:	00 00       	nop
	_delay_ms(200);//Halt the system to prevent write collision
	Temp_Value=temp[0]*10+temp[1];
 9f0:	80 91 17 02 	lds	r24, 0x0217
 9f4:	88 0f       	add	r24, r24
 9f6:	98 2f       	mov	r25, r24
 9f8:	99 0f       	add	r25, r25
 9fa:	99 0f       	add	r25, r25
 9fc:	89 0f       	add	r24, r25
 9fe:	90 91 18 02 	lds	r25, 0x0218
 a02:	89 0f       	add	r24, r25
 a04:	80 93 1a 02 	sts	0x021A, r24
	SPI_ui8TransmitRecive(Temp_Value);//send the entered temperature
 a08:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_ui8TransmitRecive>
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically//
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SEND_COMND>
	SEND_STRING("Temperature Sent");//show the message
 a12:	89 ef       	ldi	r24, 0xF9	; 249
 a14:	91 e0       	ldi	r25, 0x01	; 1
 a16:	0e 94 20 02 	call	0x440	; 0x440 <SEND_STRING>
 a1a:	8f e9       	ldi	r24, 0x9F	; 159
 a1c:	96 e8       	ldi	r25, 0x86	; 134
 a1e:	a1 e0       	ldi	r26, 0x01	; 1
 a20:	81 50       	subi	r24, 0x01	; 1
 a22:	90 40       	sbci	r25, 0x00	; 0
 a24:	a0 40       	sbci	r26, 0x00	; 0
 a26:	e1 f7       	brne	.-8      	; 0xa20 <vSetTempMenue+0xfe>
 a28:	00 c0       	rjmp	.+0      	; 0xa2a <vSetTempMenue+0x108>
 a2a:	00 00       	nop
	_delay_ms(500);//Halt the system for the given time in (ms)
 a2c:	08 95       	ret

00000a2e <u8EnterRoonConfig>:
}	

uint8 u8EnterRoonConfig(char Key)
{
	
	switch (Key)
 a2e:	83 33       	cpi	r24, 0x33	; 51
 a30:	a1 f1       	breq	.+104    	; 0xa9a <u8EnterRoonConfig+0x6c>
 a32:	84 33       	cpi	r24, 0x34	; 52
 a34:	30 f4       	brcc	.+12     	; 0xa42 <u8EnterRoonConfig+0x14>
 a36:	81 33       	cpi	r24, 0x31	; 49
 a38:	51 f0       	breq	.+20     	; 0xa4e <u8EnterRoonConfig+0x20>
 a3a:	82 33       	cpi	r24, 0x32	; 50
 a3c:	09 f0       	breq	.+2      	; 0xa40 <u8EnterRoonConfig+0x12>
 a3e:	69 c0       	rjmp	.+210    	; 0xb12 <u8EnterRoonConfig+0xe4>
 a40:	19 c0       	rjmp	.+50     	; 0xa74 <u8EnterRoonConfig+0x46>
 a42:	84 33       	cpi	r24, 0x34	; 52
 a44:	e1 f1       	breq	.+120    	; 0xabe <u8EnterRoonConfig+0x90>
 a46:	85 33       	cpi	r24, 0x35	; 53
 a48:	09 f0       	breq	.+2      	; 0xa4c <u8EnterRoonConfig+0x1e>
 a4a:	63 c0       	rjmp	.+198    	; 0xb12 <u8EnterRoonConfig+0xe4>
 a4c:	4a c0       	rjmp	.+148    	; 0xae2 <u8EnterRoonConfig+0xb4>
	{
	case ROOM1_CNFG:
		vShowState(ROOM1_STATUS,ROOM1_CNFG);
 a4e:	81 e1       	ldi	r24, 0x11	; 17
 a50:	61 e3       	ldi	r22, 0x31	; 49
 a52:	0e 94 28 04 	call	0x850	; 0x850 <vShowState>
		key_pressed=keyfind();
 a56:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 a5a:	80 93 19 02 	sts	0x0219, r24
		if (key_pressed==RET) break;				
 a5e:	80 91 19 02 	lds	r24, 0x0219
 a62:	80 33       	cpi	r24, 0x30	; 48
 a64:	09 f4       	brne	.+2      	; 0xa68 <u8EnterRoonConfig+0x3a>
 a66:	55 c0       	rjmp	.+170    	; 0xb12 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM1_OFFSET);	
 a68:	80 91 19 02 	lds	r24, 0x0219
 a6c:	61 e2       	ldi	r22, 0x21	; 33
 a6e:	0e 94 82 04 	call	0x904	; 0x904 <vTurnOnOf>
		break;
 a72:	08 95       	ret
	case ROOM2_CNFG:	
		vShowState(ROOM2_STATUS,ROOM2_CNFG);
 a74:	82 e1       	ldi	r24, 0x12	; 18
 a76:	62 e3       	ldi	r22, 0x32	; 50
 a78:	0e 94 28 04 	call	0x850	; 0x850 <vShowState>
		key_pressed=keyfind();
 a7c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 a80:	80 93 19 02 	sts	0x0219, r24
		if (key_pressed==RET) break;			
 a84:	80 91 19 02 	lds	r24, 0x0219
 a88:	80 33       	cpi	r24, 0x30	; 48
 a8a:	09 f4       	brne	.+2      	; 0xa8e <u8EnterRoonConfig+0x60>
 a8c:	42 c0       	rjmp	.+132    	; 0xb12 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM2_OFFSET);
 a8e:	80 91 19 02 	lds	r24, 0x0219
 a92:	63 e2       	ldi	r22, 0x23	; 35
 a94:	0e 94 82 04 	call	0x904	; 0x904 <vTurnOnOf>
		break;	
 a98:	08 95       	ret
	case ROOM3_CNFG:
		vShowState(ROOM3_STATUS,ROOM3_CNFG);
 a9a:	83 e1       	ldi	r24, 0x13	; 19
 a9c:	63 e3       	ldi	r22, 0x33	; 51
 a9e:	0e 94 28 04 	call	0x850	; 0x850 <vShowState>
		key_pressed=keyfind();
 aa2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 aa6:	80 93 19 02 	sts	0x0219, r24
		if (key_pressed==RET) break;			
 aaa:	80 91 19 02 	lds	r24, 0x0219
 aae:	80 33       	cpi	r24, 0x30	; 48
 ab0:	81 f1       	breq	.+96     	; 0xb12 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+ROOM3_OFFSET);
 ab2:	80 91 19 02 	lds	r24, 0x0219
 ab6:	65 e2       	ldi	r22, 0x25	; 37
 ab8:	0e 94 82 04 	call	0x904	; 0x904 <vTurnOnOf>
		break;
 abc:	08 95       	ret
	case TV_CNFG:
		vShowState(TV_STATUS,TV_CNFG);
 abe:	85 e1       	ldi	r24, 0x15	; 21
 ac0:	64 e3       	ldi	r22, 0x34	; 52
 ac2:	0e 94 28 04 	call	0x850	; 0x850 <vShowState>
		key_pressed=keyfind();
 ac6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 aca:	80 93 19 02 	sts	0x0219, r24
		if (key_pressed==RET) break;			
 ace:	80 91 19 02 	lds	r24, 0x0219
 ad2:	80 33       	cpi	r24, 0x30	; 48
 ad4:	f1 f0       	breq	.+60     	; 0xb12 <u8EnterRoonConfig+0xe4>
		vTurnOnOf(key_pressed,OFFSET_MESSAGE+TV_OFFSET);
 ad6:	80 91 19 02 	lds	r24, 0x0219
 ada:	67 e2       	ldi	r22, 0x27	; 39
 adc:	0e 94 82 04 	call	0x904	; 0x904 <vTurnOnOf>
		break;	
 ae0:	08 95       	ret
	case AIRCOND_CNFG:
		vShowState(AIR_COND_STATUS,AIRCOND_CNFG);
 ae2:	86 e1       	ldi	r24, 0x16	; 22
 ae4:	65 e3       	ldi	r22, 0x35	; 53
 ae6:	0e 94 28 04 	call	0x850	; 0x850 <vShowState>
		key_pressed=keyfind();
 aea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <keyfind>
 aee:	80 93 19 02 	sts	0x0219, r24
		if (key_pressed==RET) break;	
 af2:	80 91 19 02 	lds	r24, 0x0219
 af6:	80 33       	cpi	r24, 0x30	; 48
 af8:	61 f0       	breq	.+24     	; 0xb12 <u8EnterRoonConfig+0xe4>
		if (key_pressed=='3')  //entering control temperture of air conditioning
 afa:	80 91 19 02 	lds	r24, 0x0219
 afe:	83 33       	cpi	r24, 0x33	; 51
 b00:	19 f4       	brne	.+6      	; 0xb08 <u8EnterRoonConfig+0xda>
		{
			vSetTempMenue();
 b02:	0e 94 91 04 	call	0x922	; 0x922 <vSetTempMenue>
 b06:	08 95       	ret
		} 
		else
		{
		   vTurnOnOf(key_pressed,OFFSET_MESSAGE+AIRCOND_OFFSET);
 b08:	80 91 19 02 	lds	r24, 0x0219
 b0c:	69 e2       	ldi	r22, 0x29	; 41
 b0e:	0e 94 82 04 	call	0x904	; 0x904 <vTurnOnOf>
		}
		break;			
		
	}
	
}
 b12:	08 95       	ret

00000b14 <OUTPUT_MODE>:

#include "microconf.h"

void OUTPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *INPUT_TRISTATE_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 b14:	fc 01       	movw	r30, r24
 b16:	db 01       	movw	r26, r22
	SET_BIT(*DIR_ADRESSS,PIN_NO);
 b18:	30 81       	ld	r19, Z
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	bc 01       	movw	r22, r24
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <OUTPUT_MODE+0x12>
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	4a 95       	dec	r20
 b28:	e2 f7       	brpl	.-8      	; 0xb22 <OUTPUT_MODE+0xe>
 b2a:	ab 01       	movw	r20, r22
 b2c:	86 2f       	mov	r24, r22
 b2e:	96 2f       	mov	r25, r22
 b30:	93 2b       	or	r25, r19
 b32:	90 83       	st	Z, r25
	
	switch (PIN_MODE)
 b34:	22 23       	and	r18, r18
 b36:	39 f0       	breq	.+14     	; 0xb46 <OUTPUT_MODE+0x32>
 b38:	21 30       	cpi	r18, 0x01	; 1
 b3a:	41 f4       	brne	.+16     	; 0xb4c <OUTPUT_MODE+0x38>
	{
			case INPUT_FLOAT:
			CLEAR_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 b3c:	8c 91       	ld	r24, X
 b3e:	40 95       	com	r20
 b40:	48 23       	and	r20, r24
 b42:	4c 93       	st	X, r20
			break;
 b44:	08 95       	ret
			
			case INPUT_PULLUP:
			SET_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 b46:	9c 91       	ld	r25, X
 b48:	89 2b       	or	r24, r25
 b4a:	8c 93       	st	X, r24
 b4c:	08 95       	ret

00000b4e <INPUT_MODE>:



void INPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *OUT_FLOATORPULL_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 b4e:	fc 01       	movw	r30, r24
 b50:	db 01       	movw	r26, r22
	CLEAR_BIT(*DIR_ADRESSS,PIN_NO);
 b52:	30 81       	ld	r19, Z
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	bc 01       	movw	r22, r24
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <INPUT_MODE+0x12>
 b5c:	66 0f       	add	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	4a 95       	dec	r20
 b62:	e2 f7       	brpl	.-8      	; 0xb5c <INPUT_MODE+0xe>
 b64:	ab 01       	movw	r20, r22
 b66:	86 2f       	mov	r24, r22
 b68:	80 95       	com	r24
 b6a:	98 2f       	mov	r25, r24
 b6c:	93 23       	and	r25, r19
 b6e:	90 83       	st	Z, r25
	
	switch(PIN_MODE)
 b70:	22 30       	cpi	r18, 0x02	; 2
 b72:	31 f0       	breq	.+12     	; 0xb80 <INPUT_MODE+0x32>
 b74:	23 30       	cpi	r18, 0x03	; 3
 b76:	39 f4       	brne	.+14     	; 0xb86 <INPUT_MODE+0x38>
{
	
	case OUTPUT_BLOCK:
	SET_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 b78:	8c 91       	ld	r24, X
 b7a:	48 2b       	or	r20, r24
 b7c:	4c 93       	st	X, r20
	break;
 b7e:	08 95       	ret
	
	case OUTPUT_PASS:
	CLEAR_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 b80:	9c 91       	ld	r25, X
 b82:	89 23       	and	r24, r25
 b84:	8c 93       	st	X, r24
 b86:	08 95       	ret

00000b88 <SPI_vInitMaster>:
#include "SPI.h"


void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
 b88:	87 b3       	in	r24, 0x17	; 23
 b8a:	80 6b       	ori	r24, 0xB0	; 176
 b8c:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
 b8e:	8d b1       	in	r24, 0x0d	; 13
 b90:	81 65       	ori	r24, 0x51	; 81
 b92:	8d b9       	out	0x0d, r24	; 13
}
 b94:	08 95       	ret

00000b96 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 b96:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 b98:	6e 9a       	sbi	0x0d, 6	; 13
}
 b9a:	08 95       	ret

00000b9c <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 b9c:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 b9e:	77 9b       	sbis	0x0e, 7	; 14
 ba0:	fe cf       	rjmp	.-4      	; 0xb9e <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 ba2:	8f b1       	in	r24, 0x0f	; 15
 ba4:	08 95       	ret

00000ba6 <__udivmodqi4>:
 ba6:	99 1b       	sub	r25, r25
 ba8:	79 e0       	ldi	r23, 0x09	; 9
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__udivmodqi4_ep>

00000bac <__udivmodqi4_loop>:
 bac:	99 1f       	adc	r25, r25
 bae:	96 17       	cp	r25, r22
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__udivmodqi4_ep>
 bb2:	96 1b       	sub	r25, r22

00000bb4 <__udivmodqi4_ep>:
 bb4:	88 1f       	adc	r24, r24
 bb6:	7a 95       	dec	r23
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__udivmodqi4_loop>
 bba:	80 95       	com	r24
 bbc:	08 95       	ret

00000bbe <itoa>:
 bbe:	fb 01       	movw	r30, r22
 bc0:	9f 01       	movw	r18, r30
 bc2:	e8 94       	clt
 bc4:	42 30       	cpi	r20, 0x02	; 2
 bc6:	c4 f0       	brlt	.+48     	; 0xbf8 <itoa+0x3a>
 bc8:	45 32       	cpi	r20, 0x25	; 37
 bca:	b4 f4       	brge	.+44     	; 0xbf8 <itoa+0x3a>
 bcc:	4a 30       	cpi	r20, 0x0A	; 10
 bce:	29 f4       	brne	.+10     	; 0xbda <itoa+0x1c>
 bd0:	97 fb       	bst	r25, 7
 bd2:	1e f4       	brtc	.+6      	; 0xbda <itoa+0x1c>
 bd4:	90 95       	com	r25
 bd6:	81 95       	neg	r24
 bd8:	9f 4f       	sbci	r25, 0xFF	; 255
 bda:	64 2f       	mov	r22, r20
 bdc:	77 27       	eor	r23, r23
 bde:	0e 94 10 06 	call	0xc20	; 0xc20 <__udivmodhi4>
 be2:	80 5d       	subi	r24, 0xD0	; 208
 be4:	8a 33       	cpi	r24, 0x3A	; 58
 be6:	0c f0       	brlt	.+2      	; 0xbea <itoa+0x2c>
 be8:	89 5d       	subi	r24, 0xD9	; 217
 bea:	81 93       	st	Z+, r24
 bec:	cb 01       	movw	r24, r22
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	a1 f7       	brne	.-24     	; 0xbda <itoa+0x1c>
 bf2:	16 f4       	brtc	.+4      	; 0xbf8 <itoa+0x3a>
 bf4:	5d e2       	ldi	r21, 0x2D	; 45
 bf6:	51 93       	st	Z+, r21
 bf8:	10 82       	st	Z, r1
 bfa:	c9 01       	movw	r24, r18
 bfc:	0c 94 00 06 	jmp	0xc00	; 0xc00 <strrev>

00000c00 <strrev>:
 c00:	dc 01       	movw	r26, r24
 c02:	fc 01       	movw	r30, r24
 c04:	67 2f       	mov	r22, r23
 c06:	71 91       	ld	r23, Z+
 c08:	77 23       	and	r23, r23
 c0a:	e1 f7       	brne	.-8      	; 0xc04 <strrev+0x4>
 c0c:	32 97       	sbiw	r30, 0x02	; 2
 c0e:	04 c0       	rjmp	.+8      	; 0xc18 <strrev+0x18>
 c10:	7c 91       	ld	r23, X
 c12:	6d 93       	st	X+, r22
 c14:	70 83       	st	Z, r23
 c16:	62 91       	ld	r22, -Z
 c18:	ae 17       	cp	r26, r30
 c1a:	bf 07       	cpc	r27, r31
 c1c:	c8 f3       	brcs	.-14     	; 0xc10 <strrev+0x10>
 c1e:	08 95       	ret

00000c20 <__udivmodhi4>:
 c20:	aa 1b       	sub	r26, r26
 c22:	bb 1b       	sub	r27, r27
 c24:	51 e1       	ldi	r21, 0x11	; 17
 c26:	07 c0       	rjmp	.+14     	; 0xc36 <__udivmodhi4_ep>

00000c28 <__udivmodhi4_loop>:
 c28:	aa 1f       	adc	r26, r26
 c2a:	bb 1f       	adc	r27, r27
 c2c:	a6 17       	cp	r26, r22
 c2e:	b7 07       	cpc	r27, r23
 c30:	10 f0       	brcs	.+4      	; 0xc36 <__udivmodhi4_ep>
 c32:	a6 1b       	sub	r26, r22
 c34:	b7 0b       	sbc	r27, r23

00000c36 <__udivmodhi4_ep>:
 c36:	88 1f       	adc	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	5a 95       	dec	r21
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__udivmodhi4_loop>
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	bc 01       	movw	r22, r24
 c44:	cd 01       	movw	r24, r26
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
