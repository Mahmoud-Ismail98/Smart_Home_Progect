
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001c2  008001c2  00000d7e  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001828  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e6  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077b  00000000  00000000  00002e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000042d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c2  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint8 pass[4];
int pass_count=0;
volatile char key_pressed;
int main(void)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	// Start_Message();
	//Device_Drive();
    Starting_Program();
  9e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Starting_Program>
	
	if (EEPROM_ui8ReadByteFromAddress(Login_status)==0xFF)
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 80 02 	call	0x500	; 0x500 <EEPROM_ui8ReadByteFromAddress>
  aa:	8f 3f       	cpi	r24, 0xFF	; 255
  ac:	09 f0       	breq	.+2      	; 0xb0 <main+0x1e>
  ae:	95 c0       	rjmp	.+298    	; 0x1da <main+0x148>
	{

			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Set Admin Pass");
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Admin Pass:");
  ce:	8f e6       	ldi	r24, 0x6F	; 111
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			


			while (pass_count<4)
  d6:	80 91 c2 01 	lds	r24, 0x01C2
  da:	90 91 c3 01 	lds	r25, 0x01C3
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	91 05       	cpc	r25, r1
  e2:	0c f0       	brlt	.+2      	; 0xe6 <main+0x54>
  e4:	ed c1       	rjmp	.+986    	; 0x4c0 <main+0x42e>
			{
				key_pressed =keyfind();
  e6:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
  ea:	80 93 d2 01 	sts	0x01D2, r24
				 pass[pass_count]=(key_pressed-48);
  ee:	80 91 d2 01 	lds	r24, 0x01D2
  f2:	e0 91 c2 01 	lds	r30, 0x01C2
  f6:	f0 91 c3 01 	lds	r31, 0x01C3
  fa:	e2 53       	subi	r30, 0x32	; 50
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	80 53       	subi	r24, 0x30	; 48
 100:	80 83       	st	Z, r24
				 SEND_DATE(key_pressed);
 102:	80 91 d2 01 	lds	r24, 0x01D2
 106:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	9a ee       	ldi	r25, 0xEA	; 234
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	a0 40       	sbci	r26, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x7e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x88>
 11a:	00 00       	nop
				 _delay_ms(300);
				 pass_count++;
 11c:	80 91 c2 01 	lds	r24, 0x01C2
 120:	90 91 c3 01 	lds	r25, 0x01C3
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 c3 01 	sts	0x01C3, r25
 12a:	80 93 c2 01 	sts	0x01C2, r24
			GO_LOC(3,1);
			SEND_STRING("Admin Pass:");
			


			while (pass_count<4)
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	91 05       	cpc	r25, r1
 132:	cc f2       	brlt	.-78     	; 0xe6 <main+0x54>
				 pass[pass_count]=(key_pressed-48);
				 SEND_DATE(key_pressed);
				 _delay_ms(300);
				 pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 134:	81 e2       	ldi	r24, 0x21	; 33
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	6e ec       	ldi	r22, 0xCE	; 206
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	44 e0       	ldi	r20, 0x04	; 4
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 ab 02 	call	0x556	; 0x556 <EEPROM_vWriteBlockToAddress>
			
			//pass={0};
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Set Guest Pass");
 152:	8b e7       	ldi	r24, 0x7B	; 123
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("guest Pass:");
 162:	8a e8       	ldi	r24, 0x8A	; 138
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>

			pass_count=0;
 16a:	10 92 c3 01 	sts	0x01C3, r1
 16e:	10 92 c2 01 	sts	0x01C2, r1
			while (pass_count<4)
			{
				key_pressed=keyfind();
 172:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 176:	80 93 d2 01 	sts	0x01D2, r24
				pass[pass_count]=(key_pressed-48);
 17a:	80 91 d2 01 	lds	r24, 0x01D2
 17e:	e0 91 c2 01 	lds	r30, 0x01C2
 182:	f0 91 c3 01 	lds	r31, 0x01C3
 186:	e2 53       	subi	r30, 0x32	; 50
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 53       	subi	r24, 0x30	; 48
 18c:	80 83       	st	Z, r24
				SEND_DATE(key_pressed);
 18e:	80 91 d2 01 	lds	r24, 0x01D2
 192:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
 196:	8f e5       	ldi	r24, 0x5F	; 95
 198:	9a ee       	ldi	r25, 0xEA	; 234
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	a0 40       	sbci	r26, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x10a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x114>
 1a6:	00 00       	nop
				_delay_ms(300);
				pass_count++;
 1a8:	80 91 c2 01 	lds	r24, 0x01C2
 1ac:	90 91 c3 01 	lds	r25, 0x01C3
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 c3 01 	sts	0x01C3, r25
 1b6:	80 93 c2 01 	sts	0x01C2, r24
			SEND_STRING("Set Guest Pass");
			GO_LOC(3,1);
			SEND_STRING("guest Pass:");

			pass_count=0;
			while (pass_count<4)
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	91 05       	cpc	r25, r1
 1be:	cc f2       	brlt	.-78     	; 0x172 <main+0xe0>
				pass[pass_count]=(key_pressed-48);
				SEND_DATE(key_pressed);
				_delay_ms(300);
				pass_count++;
			}
			EEPROM_vWriteBlockToAddress(Guest_PASS_ADD,pass,4);
 1c0:	85 e2       	ldi	r24, 0x25	; 37
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	6e ec       	ldi	r22, 0xCE	; 206
 1c6:	71 e0       	ldi	r23, 0x01	; 1
 1c8:	44 e0       	ldi	r20, 0x04	; 4
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 ab 02 	call	0x556	; 0x556 <EEPROM_vWriteBlockToAddress>
		   EEPROM_vWriteByteToAddress(Login_status,0x00);
 1d0:	80 e2       	ldi	r24, 0x20	; 32
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	0e 94 9f 02 	call	0x53e	; 0x53e <EEPROM_vWriteByteToAddress>
	} 
	//else
	//{
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("selec mode");
 1e8:	86 e9       	ldi	r24, 0x96	; 150
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("0:Owner 1:Guest");
 1f8:	81 ea       	ldi	r24, 0xA1	; 161
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 200:	8f e7       	ldi	r24, 0x7F	; 127
 202:	9a e1       	ldi	r25, 0x1A	; 26
 204:	a6 e0       	ldi	r26, 0x06	; 6
 206:	81 50       	subi	r24, 0x01	; 1
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	a0 40       	sbci	r26, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x174>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x17e>
 210:	00 00       	nop
			_delay_ms(2000);
			
			key_pressed=keyfind();
 212:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 216:	80 93 d2 01 	sts	0x01D2, r24
			if (key_pressed=='0')
 21a:	80 91 d2 01 	lds	r24, 0x01D2
 21e:	80 33       	cpi	r24, 0x30	; 48
 220:	09 f0       	breq	.+2      	; 0x224 <main+0x192>
 222:	7f c0       	rjmp	.+254    	; 0x322 <main+0x290>
			{
				
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Owner mode");
 232:	81 eb       	ldi	r24, 0xB1	; 177
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Enter Pass:");
 242:	8c eb       	ldi	r24, 0xBC	; 188
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 24a:	8f e7       	ldi	r24, 0x7F	; 127
 24c:	9a e1       	ldi	r25, 0x1A	; 26
 24e:	a6 e0       	ldi	r26, 0x06	; 6
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x1be>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1c8>
 25a:	00 00       	nop
			_delay_ms(2000);
			pass_count=0;
 25c:	10 92 c3 01 	sts	0x01C3, r1
 260:	10 92 c2 01 	sts	0x01C2, r1
			while (pass_count<4)
			{
				key_pressed=keyfind();
 264:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 268:	80 93 d2 01 	sts	0x01D2, r24
				pass[pass_count]=(key_pressed);
 26c:	80 91 d2 01 	lds	r24, 0x01D2
 270:	e0 91 c2 01 	lds	r30, 0x01C2
 274:	f0 91 c3 01 	lds	r31, 0x01C3
 278:	e2 53       	subi	r30, 0x32	; 50
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 83       	st	Z, r24
				SEND_DATE(key_pressed);
 27e:	80 91 d2 01 	lds	r24, 0x01D2
 282:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
 286:	8f e5       	ldi	r24, 0x5F	; 95
 288:	9a ee       	ldi	r25, 0xEA	; 234
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	a0 40       	sbci	r26, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1fa>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x204>
 296:	00 00       	nop
				_delay_ms(300);
				pass_count++;
 298:	80 91 c2 01 	lds	r24, 0x01C2
 29c:	90 91 c3 01 	lds	r25, 0x01C3
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 c3 01 	sts	0x01C3, r25
 2a6:	80 93 c2 01 	sts	0x01C2, r24
			SEND_STRING("Owner mode");
			GO_LOC(3,1);
			SEND_STRING("Enter Pass:");
			_delay_ms(2000);
			pass_count=0;
			while (pass_count<4)
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	d4 f2       	brlt	.-76     	; 0x264 <main+0x1d2>
 2b0:	0e ec       	ldi	r16, 0xCE	; 206
 2b2:	11 e0       	ldi	r17, 0x01	; 1
 2b4:	c1 e2       	ldi	r28, 0x21	; 33
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
					GO_LOC(3,1);					
					break;
				}
				SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
				GO_LOC(2,1);
				SEND_STRING("Owner Correct Pass");				
 2b8:	0f 2e       	mov	r0, r31
 2ba:	f8 ec       	ldi	r31, 0xC8	; 200
 2bc:	ef 2e       	mov	r14, r31
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ff 2e       	mov	r15, r31
 2c2:	f0 2d       	mov	r31, r0
			}
			uint8 EEPROM_Pass;
			uint8 i=0;
			while(i<4)
			{
				EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_ADD+i);
 2c4:	ce 01       	movw	r24, r28
 2c6:	0e 94 80 02 	call	0x500	; 0x500 <EEPROM_ui8ReadByteFromAddress>
				if (EEPROM_Pass==(pass[i]-48))
 2ca:	d8 01       	movw	r26, r16
 2cc:	9d 91       	ld	r25, X+
 2ce:	8d 01       	movw	r16, r26
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	89 2f       	mov	r24, r25
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	c0 97       	sbiw	r24, 0x30	; 48
 2da:	28 17       	cp	r18, r24
 2dc:	39 07       	cpc	r19, r25
 2de:	89 f4       	brne	.+34     	; 0x302 <main+0x270>
					GO_LOC(2,1);
					SEND_STRING("Owner Rong Pass");
					GO_LOC(3,1);					
					break;
				}
				SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
				GO_LOC(2,1);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
				SEND_STRING("Owner Correct Pass");				
 2ee:	c7 01       	movw	r24, r14
 2f0:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
				DDRC|=(1<<OWNER_PIN);
 2f4:	a0 9a       	sbi	0x14, 0	; 20
				PORTC|=(1<<OWNER_PIN);
 2f6:	a8 9a       	sbi	0x15, 0	; 21
 2f8:	21 96       	adiw	r28, 0x01	; 1
				_delay_ms(300);
				pass_count++;
			}
			uint8 EEPROM_Pass;
			uint8 i=0;
			while(i<4)
 2fa:	c5 32       	cpi	r28, 0x25	; 37
 2fc:	d1 05       	cpc	r29, r1
 2fe:	11 f7       	brne	.-60     	; 0x2c4 <main+0x232>
 300:	93 c0       	rjmp	.+294    	; 0x428 <main+0x396>
				{
					i++;
				} 
				else
				{
					SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
					GO_LOC(2,1);
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
					SEND_STRING("Owner Rong Pass");
 310:	8b ed       	ldi	r24, 0xDB	; 219
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
					GO_LOC(3,1);					
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
					break;
 320:	83 c0       	rjmp	.+262    	; 0x428 <main+0x396>
				DDRC|=(1<<OWNER_PIN);
				PORTC|=(1<<OWNER_PIN);
			}

			} 
			else if(key_pressed=='1')
 322:	80 91 d2 01 	lds	r24, 0x01D2
 326:	81 33       	cpi	r24, 0x31	; 49
 328:	09 f0       	breq	.+2      	; 0x32c <main+0x29a>
 32a:	7e c0       	rjmp	.+252    	; 0x428 <main+0x396>
			{
				
				SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
				GO_LOC(2,1);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
				SEND_STRING("Guest mode");
 33a:	8b ee       	ldi	r24, 0xEB	; 235
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
				GO_LOC(3,1);
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
				SEND_STRING("Enter Pass:");
 34a:	8c eb       	ldi	r24, 0xBC	; 188
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 352:	8f e7       	ldi	r24, 0x7F	; 127
 354:	9a e1       	ldi	r25, 0x1A	; 26
 356:	a6 e0       	ldi	r26, 0x06	; 6
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	a0 40       	sbci	r26, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x2c6>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x2d0>
 362:	00 00       	nop
				_delay_ms(2000);
				pass_count=0;
 364:	10 92 c3 01 	sts	0x01C3, r1
 368:	10 92 c2 01 	sts	0x01C2, r1
				while (pass_count<4)
				{
					key_pressed=keyfind();
 36c:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 370:	80 93 d2 01 	sts	0x01D2, r24
					pass[pass_count]=(key_pressed);
 374:	80 91 d2 01 	lds	r24, 0x01D2
 378:	e0 91 c2 01 	lds	r30, 0x01C2
 37c:	f0 91 c3 01 	lds	r31, 0x01C3
 380:	e2 53       	subi	r30, 0x32	; 50
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	80 83       	st	Z, r24
					SEND_DATE(key_pressed);
 386:	80 91 d2 01 	lds	r24, 0x01D2
 38a:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
 38e:	8f e5       	ldi	r24, 0x5F	; 95
 390:	9a ee       	ldi	r25, 0xEA	; 234
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	81 50       	subi	r24, 0x01	; 1
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	a0 40       	sbci	r26, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x302>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x30c>
 39e:	00 00       	nop
					_delay_ms(300);
					pass_count++;
 3a0:	80 91 c2 01 	lds	r24, 0x01C2
 3a4:	90 91 c3 01 	lds	r25, 0x01C3
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	90 93 c3 01 	sts	0x01C3, r25
 3ae:	80 93 c2 01 	sts	0x01C2, r24
				SEND_STRING("Guest mode");
				GO_LOC(3,1);
				SEND_STRING("Enter Pass:");
				_delay_ms(2000);
				pass_count=0;
				while (pass_count<4)
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	91 05       	cpc	r25, r1
 3b6:	d4 f2       	brlt	.-76     	; 0x36c <main+0x2da>
 3b8:	0e ec       	ldi	r16, 0xCE	; 206
 3ba:	11 e0       	ldi	r17, 0x01	; 1
 3bc:	c5 e2       	ldi	r28, 0x25	; 37
 3be:	d0 e0       	ldi	r29, 0x00	; 0
						GO_LOC(3,1);
						break;
					}
					SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
					GO_LOC(2,1);
					SEND_STRING("Guest Correct Pass");
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f6 ef       	ldi	r31, 0xF6	; 246
 3c4:	ef 2e       	mov	r14, r31
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ff 2e       	mov	r15, r31
 3ca:	f0 2d       	mov	r31, r0
				}
				uint8 EEPROM_Pass;
				uint8 i=0;
				while(i<4)
				{
					EEPROM_Pass = EEPROM_ui8ReadByteFromAddress(Guest_PASS_ADD+i);
 3cc:	ce 01       	movw	r24, r28
 3ce:	0e 94 80 02 	call	0x500	; 0x500 <EEPROM_ui8ReadByteFromAddress>
					if (EEPROM_Pass==(pass[i]-48))
 3d2:	d8 01       	movw	r26, r16
 3d4:	9d 91       	ld	r25, X+
 3d6:	8d 01       	movw	r16, r26
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	89 2f       	mov	r24, r25
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	c0 97       	sbiw	r24, 0x30	; 48
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	89 f4       	brne	.+34     	; 0x40a <main+0x378>
						GO_LOC(2,1);
						SEND_STRING("Guest Rong Pass");
						GO_LOC(3,1);
						break;
					}
					SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
					GO_LOC(2,1);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
					SEND_STRING("Guest Correct Pass");
 3f6:	c7 01       	movw	r24, r14
 3f8:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
					DDRC|=(1<<GUEST_PIN);
 3fc:	a1 9a       	sbi	0x14, 1	; 20
					PORTC|=(1<<GUEST_PIN);
 3fe:	a9 9a       	sbi	0x15, 1	; 21
 400:	21 96       	adiw	r28, 0x01	; 1
					_delay_ms(300);
					pass_count++;
				}
				uint8 EEPROM_Pass;
				uint8 i=0;
				while(i<4)
 402:	c9 32       	cpi	r28, 0x29	; 41
 404:	d1 05       	cpc	r29, r1
 406:	11 f7       	brne	.-60     	; 0x3cc <main+0x33a>
 408:	0f c0       	rjmp	.+30     	; 0x428 <main+0x396>
					{
						i++;
					}
					else
					{
						SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
						GO_LOC(2,1);
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
						SEND_STRING("Guest Rong Pass");
 418:	89 e0       	ldi	r24, 0x09	; 9
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
						GO_LOC(3,1);
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
					DDRC|=(1<<GUEST_PIN);
					PORTC|=(1<<GUEST_PIN);
				}				
			}
			
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
	GO_LOC(2,1);
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
	SEND_STRING("1:ROOM1 2:ROOM2");
 436:	89 e1       	ldi	r24, 0x19	; 25
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
	GO_LOC(3,1);
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
	SEND_STRING("3:ROOM3 4:ROOM4");	
 446:	89 e2       	ldi	r24, 0x29	; 41
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
	key_pressed=keyfind();
 44e:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 452:	80 93 d2 01 	sts	0x01D2, r24
	
	switch(key_pressed)
 456:	80 91 d2 01 	lds	r24, 0x01D2
 45a:	81 33       	cpi	r24, 0x31	; 49
 45c:	41 f5       	brne	.+80     	; 0x4ae <main+0x41c>
	{
		case '1':
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("ROOM State:");
 46c:	89 e3       	ldi	r24, 0x39	; 57
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("ON:1   OFF:2  RET:0");
 47c:	85 e4       	ldi	r24, 0x45	; 69
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			key_pressed=keyfind();
 484:	0e 94 c8 02 	call	0x590	; 0x590 <keyfind>
 488:	80 93 d2 01 	sts	0x01D2, r24
			
			if (key_pressed=='1')
 48c:	80 91 d2 01 	lds	r24, 0x01D2
 490:	81 33       	cpi	r24, 0x31	; 49
 492:	19 f4       	brne	.+6      	; 0x49a <main+0x408>
			{
				DDRC|=(1<<ROOM1);
 494:	a2 9a       	sbi	0x14, 2	; 20
				PORTC|=(1<<ROOM1);
 496:	aa 9a       	sbi	0x15, 2	; 21
 498:	0a c0       	rjmp	.+20     	; 0x4ae <main+0x41c>
			} 
			else if(key_pressed=='2')
 49a:	80 91 d2 01 	lds	r24, 0x01D2
 49e:	82 33       	cpi	r24, 0x32	; 50
 4a0:	21 f4       	brne	.+8      	; 0x4aa <main+0x418>
			{
				DDRC|=(1<<ROOM1);
 4a2:	a2 9a       	sbi	0x14, 2	; 20
				PORTC|=(0<<ROOM1);
 4a4:	85 b3       	in	r24, 0x15	; 21
 4a6:	85 bb       	out	0x15, r24	; 21
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <main+0x41c>
			}
			else if(key_pressed=='0')
 4aa:	80 91 d2 01 	lds	r24, 0x01D2
	}						
			
			
			
			
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	08 95       	ret
				 pass[pass_count]=(key_pressed-48);
				 SEND_DATE(key_pressed);
				 _delay_ms(300);
				 pass_count++;
			}
			EEPROM_vWriteBlockToAddress(ADMIN_PASS_ADD,pass,4);
 4c0:	81 e2       	ldi	r24, 0x21	; 33
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	6e ec       	ldi	r22, 0xCE	; 206
 4c6:	71 e0       	ldi	r23, 0x01	; 1
 4c8:	44 e0       	ldi	r20, 0x04	; 4
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	0e 94 ab 02 	call	0x556	; 0x556 <EEPROM_vWriteBlockToAddress>
			
			//pass={0};
			SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
			GO_LOC(2,1);
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("Set Guest Pass");
 4de:	8b e7       	ldi	r24, 0x7B	; 123
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
			GO_LOC(3,1);
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			SEND_STRING("guest Pass:");
 4ee:	8a e8       	ldi	r24, 0x8A	; 138
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>

			pass_count=0;
 4f6:	10 92 c3 01 	sts	0x01C3, r1
 4fa:	10 92 c2 01 	sts	0x01C2, r1
 4fe:	39 ce       	rjmp	.-910    	; 0x172 <main+0xe0>

00000500 <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 500:	e1 99       	sbic	0x1c, 1	; 28
 502:	fe cf       	rjmp	.-4      	; 0x500 <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
 504:	9f bb       	out	0x1f, r25	; 31
 506:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
 508:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 50a:	8d b3       	in	r24, 0x1d	; 29
}
 50c:	08 95       	ret

0000050e <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
 50e:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
 510:	e1 99       	sbic	0x1c, 1	; 28
 512:	fe cf       	rjmp	.-4      	; 0x510 <EEPROM_vReadBlockFromAddress+0x2>
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 514:	41 15       	cp	r20, r1
 516:	51 05       	cpc	r21, r1
 518:	89 f0       	breq	.+34     	; 0x53c <EEPROM_vReadBlockFromAddress+0x2e>
 51a:	e6 2f       	mov	r30, r22
 51c:	f7 2f       	mov	r31, r23
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
	EECR |= (1 << EERE);
	/* Return data from data register */
	return EEDR;
}

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
 522:	c9 01       	movw	r24, r18
 524:	8a 0f       	add	r24, r26
 526:	9b 1f       	adc	r25, r27
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
 528:	9f bb       	out	0x1f, r25	; 31
 52a:	8e bb       	out	0x1e, r24	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
 52c:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
 52e:	8d b3       	in	r24, 0x1d	; 29
 530:	81 93       	st	Z+, r24

		counter++;//increase the bytes counter
 532:	2f 5f       	subi	r18, 0xFF	; 255
 534:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
 536:	24 17       	cp	r18, r20
 538:	35 07       	cpc	r19, r21
 53a:	99 f7       	brne	.-26     	; 0x522 <EEPROM_vReadBlockFromAddress+0x14>
 53c:	08 95       	ret

0000053e <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 53e:	e1 99       	sbic	0x1c, 1	; 28
 540:	fe cf       	rjmp	.-4      	; 0x53e <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
 542:	9f bb       	out	0x1f, r25	; 31
 544:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
 546:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
 548:	8d b3       	in	r24, 0x1d	; 29
 54a:	86 17       	cp	r24, r22
 54c:	19 f0       	breq	.+6      	; 0x554 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
 54e:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
 550:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
 552:	e1 9a       	sbi	0x1c, 1	; 28
 554:	08 95       	ret

00000556 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
 556:	dc 01       	movw	r26, r24
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 558:	41 15       	cp	r20, r1
 55a:	51 05       	cpc	r21, r1
 55c:	c1 f0       	breq	.+48     	; 0x58e <EEPROM_vWriteBlockToAddress+0x38>
 55e:	e6 2f       	mov	r30, r22
 560:	f7 2f       	mov	r31, r23

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 566:	e1 99       	sbic	0x1c, 1	; 28
 568:	fe cf       	rjmp	.-4      	; 0x566 <EEPROM_vWriteBlockToAddress+0x10>

	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
 56a:	c9 01       	movw	r24, r18
 56c:	8a 0f       	add	r24, r26
 56e:	9b 1f       	adc	r25, r27
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
 570:	9f bb       	out	0x1f, r25	; 31
 572:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
 574:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
 576:	9d b3       	in	r25, 0x1d	; 29
 578:	81 91       	ld	r24, Z+
 57a:	98 17       	cp	r25, r24
 57c:	19 f0       	breq	.+6      	; 0x584 <EEPROM_vWriteBlockToAddress+0x2e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
 57e:	8d bb       	out	0x1d, r24	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
 580:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
 582:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
 588:	24 17       	cp	r18, r20
 58a:	35 07       	cpc	r19, r21
 58c:	61 f7       	brne	.-40     	; 0x566 <EEPROM_vWriteBlockToAddress+0x10>
 58e:	08 95       	ret

00000590 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 590:	40 ef       	ldi	r20, 0xF0	; 240
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 592:	3f ef       	ldi	r19, 0xFF	; 255
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);   

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 594:	2f ee       	ldi	r18, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 596:	9f ed       	ldi	r25, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 598:	6f eb       	ldi	r22, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 59a:	5f e7       	ldi	r21, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
 59c:	41 bb       	out	0x11, r20	; 17
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
 59e:	32 bb       	out	0x12, r19	; 18

		do
		{
				
			KEY_PRT &= 0x0F;      //  ROW OUT LOW // mask PORT for column read only
 5a0:	82 b3       	in	r24, 0x12	; 18
 5a2:	8f 70       	andi	r24, 0x0F	; 15
 5a4:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 5a6:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);//  read status of column
 5a8:	80 b3       	in	r24, 0x10	; 16
 5aa:	8f 70       	andi	r24, 0x0F	; 15
 5ac:	80 93 d3 01 	sts	0x01D3, r24
		}while(colloc != 0x0F);
 5b0:	8f 30       	cpi	r24, 0x0F	; 15
 5b2:	b1 f7       	brne	.-20     	; 0x5a0 <keyfind+0x10>
 5b4:	e7 e8       	ldi	r30, 0x87	; 135
 5b6:	f3 e1       	ldi	r31, 0x13	; 19
 5b8:	31 97       	sbiw	r30, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <keyfind+0x28>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <keyfind+0x2e>
 5be:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);            //  20ms key debounce time
				colloc = (KEY_PIN & 0x0F);  //read status of column
 5c0:	80 b3       	in	r24, 0x10	; 16
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	80 93 d3 01 	sts	0x01D3, r24
			}while(colloc == 0x0F);         //check for any key press
 5c8:	8f 30       	cpi	r24, 0x0F	; 15
 5ca:	a1 f3       	breq	.-24     	; 0x5b4 <keyfind+0x24>
 5cc:	ef e0       	ldi	r30, 0x0F	; 15
 5ce:	f7 e2       	ldi	r31, 0x27	; 39
 5d0:	31 97       	sbiw	r30, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <keyfind+0x40>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <keyfind+0x46>
 5d6:	00 00       	nop
			
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
 5d8:	80 b3       	in	r24, 0x10	; 16
 5da:	8f 70       	andi	r24, 0x0F	; 15
 5dc:	80 93 d3 01 	sts	0x01D3, r24
		}while(colloc == 0x0F);   
 5e0:	8f 30       	cpi	r24, 0x0F	; 15
 5e2:	41 f3       	breq	.-48     	; 0x5b4 <keyfind+0x24>

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 5e4:	22 bb       	out	0x12, r18	; 18
		asm("NOP");
 5e6:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 5e8:	80 b3       	in	r24, 0x10	; 16
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	80 93 d3 01 	sts	0x01D3, r24
		if(colloc != 0x0F)
 5f0:	8f 30       	cpi	r24, 0x0F	; 15
 5f2:	19 f0       	breq	.+6      	; 0x5fa <keyfind+0x6a>
		{
			rowloc = 0;
 5f4:	10 92 d4 01 	sts	0x01D4, r1
			break;
 5f8:	24 c0       	rjmp	.+72     	; 0x642 <keyfind+0xb2>
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 5fa:	92 bb       	out	0x12, r25	; 18
		asm("NOP");
 5fc:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 5fe:	80 b3       	in	r24, 0x10	; 16
 600:	8f 70       	andi	r24, 0x0F	; 15
 602:	80 93 d3 01 	sts	0x01D3, r24
		if(colloc != 0x0F)
 606:	8f 30       	cpi	r24, 0x0F	; 15
 608:	21 f0       	breq	.+8      	; 0x612 <keyfind+0x82>
		{
			rowloc = 1;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 d4 01 	sts	0x01D4, r24
			break;
 610:	18 c0       	rjmp	.+48     	; 0x642 <keyfind+0xb2>
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 612:	62 bb       	out	0x12, r22	; 18
		asm("NOP");
 614:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 616:	80 b3       	in	r24, 0x10	; 16
 618:	8f 70       	andi	r24, 0x0F	; 15
 61a:	80 93 d3 01 	sts	0x01D3, r24
		if(colloc != 0x0F)
 61e:	8f 30       	cpi	r24, 0x0F	; 15
 620:	21 f0       	breq	.+8      	; 0x62a <keyfind+0x9a>
		{
			rowloc = 2;
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	80 93 d4 01 	sts	0x01D4, r24
			break;
 628:	0c c0       	rjmp	.+24     	; 0x642 <keyfind+0xb2>
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 62a:	52 bb       	out	0x12, r21	; 18
		asm("NOP");
 62c:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 62e:	80 b3       	in	r24, 0x10	; 16
 630:	8f 70       	andi	r24, 0x0F	; 15
 632:	80 93 d3 01 	sts	0x01D3, r24
		if(colloc != 0x0F)
 636:	8f 30       	cpi	r24, 0x0F	; 15
 638:	09 f4       	brne	.+2      	; 0x63c <keyfind+0xac>
 63a:	b0 cf       	rjmp	.-160    	; 0x59c <keyfind+0xc>
		{
			rowloc = 3;
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	80 93 d4 01 	sts	0x01D4, r24
			break;
		}
	}

	if(colloc == 0x0E)
 642:	80 91 d3 01 	lds	r24, 0x01D3
 646:	8e 30       	cpi	r24, 0x0E	; 14
 648:	59 f4       	brne	.+22     	; 0x660 <keyfind+0xd0>
	return(keypad[rowloc][0]);
 64a:	e0 91 d4 01 	lds	r30, 0x01D4
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	e7 5a       	subi	r30, 0xA7	; 167
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	80 81       	ld	r24, Z
 65e:	08 95       	ret
	else if(colloc == 0x0D)
 660:	8d 30       	cpi	r24, 0x0D	; 13
 662:	59 f4       	brne	.+22     	; 0x67a <keyfind+0xea>
	return(keypad[rowloc][1]);
 664:	e0 91 d4 01 	lds	r30, 0x01D4
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	e7 5a       	subi	r30, 0xA7	; 167
 674:	fe 4f       	sbci	r31, 0xFE	; 254
 676:	81 81       	ldd	r24, Z+1	; 0x01
 678:	08 95       	ret
	else if(colloc == 0x0B)
 67a:	8b 30       	cpi	r24, 0x0B	; 11
 67c:	59 f4       	brne	.+22     	; 0x694 <keyfind+0x104>
	return(keypad[rowloc][2]);
 67e:	e0 91 d4 01 	lds	r30, 0x01D4
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e7 5a       	subi	r30, 0xA7	; 167
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	08 95       	ret
	else
	return(keypad[rowloc][3]);
 694:	e0 91 d4 01 	lds	r30, 0x01D4
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	e7 5a       	subi	r30, 0xA7	; 167
 6a4:	fe 4f       	sbci	r31, 0xFE	; 254
 6a6:	83 81       	ldd	r24, Z+3	; 0x03
}
 6a8:	08 95       	ret

000006aa <HI_LO_PULS_EN>:
	HI_LO_PULS_EN();
}

void HI_LO_PULS_EN(void)
{
	CONTRLO_PINS_HI_LO|=(1<<ENABLE);
 6aa:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ac:	00 00       	nop
	_delay_us(1);
	CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
 6ae:	c1 98       	cbi	0x18, 1	; 24
 6b0:	81 e2       	ldi	r24, 0x21	; 33
 6b2:	8a 95       	dec	r24
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <HI_LO_PULS_EN+0x8>
 6b6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b8:	83 ed       	ldi	r24, 0xD3	; 211
 6ba:	90 e3       	ldi	r25, 0x30	; 48
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <HI_LO_PULS_EN+0x12>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <HI_LO_PULS_EN+0x18>
 6c2:	00 00       	nop
	_delay_us(100);
	_delay_ms(50);
}
 6c4:	08 95       	ret

000006c6 <SEND_COMND>:

}

void SEND_COMND(unsigned char CMD)
{
	CONTRLO_PINS_HI_LO&=~((1<<RE_WR)|(1<<REG_SEL)) ;
 6c6:	98 b3       	in	r25, 0x18	; 24
 6c8:	93 7f       	andi	r25, 0xF3	; 243
 6ca:	98 bb       	out	0x18, r25	; 24
	DATE_HI_LO=CMD;
 6cc:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 6ce:	0e 94 55 03 	call	0x6aa	; 0x6aa <HI_LO_PULS_EN>
}
 6d2:	08 95       	ret

000006d4 <LCD_INISTIALIZATION>:
 */ 
#include "lcd.h"

void LCD_INISTIALIZATION(void)
{
	DATE_IN_OUT =0xFF;
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	8a bb       	out	0x1a, r24	; 26
	CONTRLO_PINS_IN_OUT|=((1<<ENABLE)|(1<<RE_WR)|(1<<REG_SEL));
 6d8:	87 b3       	in	r24, 0x17	; 23
 6da:	8e 60       	ori	r24, 0x0E	; 14
 6dc:	87 bb       	out	0x17, r24	; 23
 6de:	87 e8       	ldi	r24, 0x87	; 135
 6e0:	93 e1       	ldi	r25, 0x13	; 19
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <LCD_INISTIALIZATION+0xe>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <LCD_INISTIALIZATION+0x14>
 6e8:	00 00       	nop
	//CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
	
	_delay_ms(20);       //wait for start initialization
	SEND_COMND(0x38);   //8bit mode
 6ea:	88 e3       	ldi	r24, 0x38	; 56
 6ec:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
	SEND_COMND(0x0E);   //curser not be blinking
 6f0:	8e e0       	ldi	r24, 0x0E	; 14
 6f2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
	SEND_COMND(0x01);   // clear display
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
 6fc:	83 ef       	ldi	r24, 0xF3	; 243
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <LCD_INISTIALIZATION+0x2c>
 704:	00 c0       	rjmp	.+0      	; 0x706 <LCD_INISTIALIZATION+0x32>
 706:	00 00       	nop
	_delay_ms(2);
	SEND_COMND(0x06);   //INCREAMENT CURSOR TO RIGHT
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>

}
 70e:	08 95       	ret

00000710 <SEND_DATE>:
	_delay_ms(50);
}

void SEND_DATE(unsigned char DATE)
{
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
 710:	c2 98       	cbi	0x18, 2	; 24
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
 712:	c3 9a       	sbi	0x18, 3	; 24
	DATE_HI_LO=DATE;
 714:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 716:	0e 94 55 03 	call	0x6aa	; 0x6aa <HI_LO_PULS_EN>
}
 71a:	08 95       	ret

0000071c <SEND_STRING>:
void SEND_STRING(unsigned char *STR)
{
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	ec 01       	movw	r28, r24
	while(*STR>0)
 722:	88 81       	ld	r24, Y
 724:	88 23       	and	r24, r24
 726:	31 f0       	breq	.+12     	; 0x734 <SEND_STRING+0x18>
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
 728:	21 96       	adiw	r28, 0x01	; 1
{
	while(*STR>0)
	{
		
		SEND_DATE(*STR++);  //first send and then increament
 72a:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
{
	while(*STR>0)
 72e:	89 91       	ld	r24, Y+
 730:	88 23       	and	r24, r24
 732:	d9 f7       	brne	.-10     	; 0x72a <SEND_STRING+0xe>
	{
		
		SEND_DATE(*STR++);  //first send and then increament
		
	}
}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <GO_LOC>:
char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
void GO_LOC(uint8_t x,uint8_t y)
{
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
 73a:	61 50       	subi	r22, 0x01	; 1
 73c:	e8 2f       	mov	r30, r24
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	e8 59       	subi	r30, 0x98	; 152
 742:	fe 4f       	sbci	r31, 0xFE	; 254
 744:	80 81       	ld	r24, Z
 746:	86 0f       	add	r24, r22
 748:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
}
 74c:	08 95       	ret

0000074e <SEND_LONG_NUM>:

void SEND_LONG_NUM(char *p,int siz)
{
 74e:	cf 92       	push	r12
 750:	df 92       	push	r13
 752:	ef 92       	push	r14
 754:	ff 92       	push	r15
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	ec 01       	movw	r28, r24
 760:	6b 01       	movw	r12, r22
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 762:	16 16       	cp	r1, r22
 764:	17 06       	cpc	r1, r23
 766:	b4 f4       	brge	.+44     	; 0x794 <SEND_LONG_NUM+0x46>
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
}

void SEND_LONG_NUM(char *p,int siz)
 768:	8c 01       	movw	r16, r24
 76a:	06 0f       	add	r16, r22
 76c:	17 1f       	adc	r17, r23
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
	{
		itoa(*p,NUM_ST,10);
 76e:	0f 2e       	mov	r0, r31
 770:	f4 ec       	ldi	r31, 0xC4	; 196
 772:	ef 2e       	mov	r14, r31
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	ff 2e       	mov	r15, r31
 778:	f0 2d       	mov	r31, r0
 77a:	89 91       	ld	r24, Y+
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	b7 01       	movw	r22, r14
 780:	4a e0       	ldi	r20, 0x0A	; 10
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	0e 94 91 05 	call	0xb22	; 0xb22 <itoa>
		SEND_STRING(NUM_ST);
 788:	c7 01       	movw	r24, r14
 78a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
}

void SEND_LONG_NUM(char *p,int siz)
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 78e:	c0 17       	cp	r28, r16
 790:	d1 07       	cpc	r29, r17
 792:	99 f7       	brne	.-26     	; 0x77a <SEND_LONG_NUM+0x2c>
		SEND_STRING(NUM_ST);
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
 794:	c4 e1       	ldi	r28, 0x14	; 20
 796:	d0 e0       	ldi	r29, 0x00	; 0
 798:	cc 19       	sub	r28, r12
 79a:	dd 09       	sbc	r29, r13
 79c:	0a f4       	brpl	.+2      	; 0x7a0 <SEND_LONG_NUM+0x52>
 79e:	21 96       	adiw	r28, 0x01	; 1
 7a0:	d5 95       	asr	r29
 7a2:	c7 95       	ror	r28
 7a4:	64 96       	adiw	r28, 0x14	; 20
	for (int i=0;i<sift;i++)
 7a6:	1c 16       	cp	r1, r28
 7a8:	1d 06       	cpc	r1, r29
 7aa:	54 f4       	brge	.+20     	; 0x7c0 <SEND_LONG_NUM+0x72>
 7ac:	00 e0       	ldi	r16, 0x00	; 0
 7ae:	10 e0       	ldi	r17, 0x00	; 0
	{
		SEND_COMND(0x1C);
 7b0:	8c e1       	ldi	r24, 0x1C	; 28
 7b2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
	for (int i=0;i<sift;i++)
 7b6:	0f 5f       	subi	r16, 0xFF	; 255
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	0c 17       	cp	r16, r28
 7bc:	1d 07       	cpc	r17, r29
 7be:	c4 f3       	brlt	.-16     	; 0x7b0 <SEND_LONG_NUM+0x62>
	{
		SEND_COMND(0x1C);
	}
	
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	08 95       	ret

000007d2 <OUTPUT_MODE>:

#include "microconf.h"

void OUTPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *INPUT_TRISTATE_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 7d2:	fc 01       	movw	r30, r24
 7d4:	db 01       	movw	r26, r22
	SET_BIT(*DIR_ADRESSS,PIN_NO);
 7d6:	30 81       	ld	r19, Z
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	bc 01       	movw	r22, r24
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <OUTPUT_MODE+0x12>
 7e0:	66 0f       	add	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	4a 95       	dec	r20
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <OUTPUT_MODE+0xe>
 7e8:	ab 01       	movw	r20, r22
 7ea:	86 2f       	mov	r24, r22
 7ec:	96 2f       	mov	r25, r22
 7ee:	93 2b       	or	r25, r19
 7f0:	90 83       	st	Z, r25
	
	switch (PIN_MODE)
 7f2:	22 23       	and	r18, r18
 7f4:	39 f0       	breq	.+14     	; 0x804 <OUTPUT_MODE+0x32>
 7f6:	21 30       	cpi	r18, 0x01	; 1
 7f8:	41 f4       	brne	.+16     	; 0x80a <OUTPUT_MODE+0x38>
	{
			case INPUT_FLOAT:
			CLEAR_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 7fa:	8c 91       	ld	r24, X
 7fc:	40 95       	com	r20
 7fe:	48 23       	and	r20, r24
 800:	4c 93       	st	X, r20
			break;
 802:	08 95       	ret
			
			case INPUT_PULLUP:
			SET_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 804:	9c 91       	ld	r25, X
 806:	89 2b       	or	r24, r25
 808:	8c 93       	st	X, r24
 80a:	08 95       	ret

0000080c <INPUT_MODE>:



void INPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *OUT_FLOATORPULL_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 80c:	fc 01       	movw	r30, r24
 80e:	db 01       	movw	r26, r22
	CLEAR_BIT(*DIR_ADRESSS,PIN_NO);
 810:	30 81       	ld	r19, Z
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	bc 01       	movw	r22, r24
 818:	02 c0       	rjmp	.+4      	; 0x81e <INPUT_MODE+0x12>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	4a 95       	dec	r20
 820:	e2 f7       	brpl	.-8      	; 0x81a <INPUT_MODE+0xe>
 822:	ab 01       	movw	r20, r22
 824:	86 2f       	mov	r24, r22
 826:	80 95       	com	r24
 828:	98 2f       	mov	r25, r24
 82a:	93 23       	and	r25, r19
 82c:	90 83       	st	Z, r25
	
	switch(PIN_MODE)
 82e:	22 30       	cpi	r18, 0x02	; 2
 830:	31 f0       	breq	.+12     	; 0x83e <INPUT_MODE+0x32>
 832:	23 30       	cpi	r18, 0x03	; 3
 834:	39 f4       	brne	.+14     	; 0x844 <INPUT_MODE+0x38>
{
	
	case OUTPUT_BLOCK:
	SET_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 836:	8c 91       	ld	r24, X
 838:	48 2b       	or	r20, r24
 83a:	4c 93       	st	X, r20
	break;
 83c:	08 95       	ret
	
	case OUTPUT_PASS:
	CLEAR_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 83e:	9c 91       	ld	r25, X
 840:	89 23       	and	r24, r25
 842:	8c 93       	st	X, r24
 844:	08 95       	ret

00000846 <Device_Drive>:
volatile  uint8_t flag=1;
volatile  uint8_t flag2=0;
void Device_Drive(void)
{
	//define inputs
	DDRC &=(~(1<<Door_Sen));
 846:	a0 98       	cbi	0x14, 0	; 20
	DDRC &=(~(1<<Weight_Sen));
 848:	a1 98       	cbi	0x14, 1	; 20
	DDRC &=(~(1<<Cancal_Sw));
 84a:	a2 98       	cbi	0x14, 2	; 20
	//define output
	DDRC|=(1<<Motor);
 84c:	a3 9a       	sbi	0x14, 3	; 20
	DDRC|=(1<<Heater);
 84e:	a4 9a       	sbi	0x14, 4	; 20
	DDRC|=(1<<Lamp);
 850:	a5 9a       	sbi	0x14, 5	; 20
	DDRC|=(1<<Buz);
 852:	a6 9a       	sbi	0x14, 6	; 20
}
 854:	08 95       	ret

00000856 <Turn_Output>:
void Turn_Output(void)
{
	PORTC|=(1<<Motor);
 856:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|=(1<<Heater);
 858:	ac 9a       	sbi	0x15, 4	; 21
	PORTC|=(1<<Lamp);
 85a:	ad 9a       	sbi	0x15, 5	; 21
}
 85c:	08 95       	ret

0000085e <Stop_Output>:
void Stop_Output(void)
{
	PORTC &=(~(1<<Motor));
 85e:	ab 98       	cbi	0x15, 3	; 21
	PORTC &=(~(1<<Heater));
 860:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=(~(1<<Lamp));
 862:	ad 98       	cbi	0x15, 5	; 21

}
 864:	08 95       	ret

00000866 <Sensors_Read>:

uint8_t Sensors_Read(void)
{
	if (IS_BIT_SET(PORTC_INPUTREAD,Door_Sen) && IS_BIT_SET(PORTC_INPUTREAD,Weight_Sen)&&IS_BIT_SET(PORTC_INPUTREAD,Cancal_Sw)&&(flag==1))
 866:	98 9b       	sbis	0x13, 0	; 19
 868:	0b c0       	rjmp	.+22     	; 0x880 <Sensors_Read+0x1a>
 86a:	99 9b       	sbis	0x13, 1	; 19
 86c:	0b c0       	rjmp	.+22     	; 0x884 <Sensors_Read+0x1e>
 86e:	9a 9b       	sbis	0x13, 2	; 19
 870:	0b c0       	rjmp	.+22     	; 0x888 <Sensors_Read+0x22>
 872:	80 91 bf 01 	lds	r24, 0x01BF
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	49 f4       	brne	.+18     	; 0x88c <Sensors_Read+0x26>
	{
		flag2=1;
 87a:	80 93 c8 01 	sts	0x01C8, r24
		return 1;
 87e:	08 95       	ret
	}
	else
	{

		return 0;
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	08 95       	ret
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	08 95       	ret
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	08 95       	ret
 88c:	80 e0       	ldi	r24, 0x00	; 0

		
	}
}
 88e:	08 95       	ret

00000890 <Turn_Buz>:
void Turn_Buz(void)
{
					if (flag2==1)
 890:	80 91 c8 01 	lds	r24, 0x01C8
 894:	81 30       	cpi	r24, 0x01	; 1
 896:	51 f4       	brne	.+20     	; 0x8ac <Turn_Buz+0x1c>
				{
	  			    Buzzer_On;
 898:	ae 9a       	sbi	0x15, 6	; 21
 89a:	8f e4       	ldi	r24, 0x4F	; 79
 89c:	93 ec       	ldi	r25, 0xC3	; 195
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <Turn_Buz+0xe>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <Turn_Buz+0x14>
 8a4:	00 00       	nop
                   _delay_ms(200);
	             	Buzzer_Off;
 8a6:	ae 98       	cbi	0x15, 6	; 21
				   flag2=0; 
 8a8:	10 92 c8 01 	sts	0x01C8, r1
 8ac:	08 95       	ret

000008ae <Start_Message>:
	Timer0_Intialization();
}

void Start_Message(void)
{   
	LCD_INISTIALIZATION();
 8ae:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_INISTIALIZATION>
	//GO_LOC(2,1);
	SEND_STRING("wellcome to smart");
 8b2:	8d e6       	ldi	r24, 0x6D	; 109
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 8ba:	8f e9       	ldi	r24, 0x9F	; 159
 8bc:	96 e8       	ldi	r25, 0x86	; 134
 8be:	a1 e0       	ldi	r26, 0x01	; 1
 8c0:	81 50       	subi	r24, 0x01	; 1
 8c2:	90 40       	sbci	r25, 0x00	; 0
 8c4:	a0 40       	sbci	r26, 0x00	; 0
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <Start_Message+0x12>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <Start_Message+0x1c>
 8ca:	00 00       	nop
	{
		SEND_COMND(0x1C);
		_delay_ms(30); 
	}*/
	_delay_ms(500);
	GO_LOC(2,3);
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	63 e0       	ldi	r22, 0x03	; 3
 8d0:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
	SEND_STRING("home system");
 8d4:	8f e7       	ldi	r24, 0x7F	; 127
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
	//_delay_ms(3000);
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
	
	////////////////////////////	

}
 8e2:	08 95       	ret

000008e4 <Starting_Program>:
				}
}
void Starting_Program(void)
{ 
	
	Device_Drive();
 8e4:	0e 94 23 04 	call	0x846	; 0x846 <Device_Drive>
	Start_Message();
 8e8:	0e 94 57 04 	call	0x8ae	; 0x8ae <Start_Message>
//	Entering_Time();
	Timer0_Intialization();
 8ec:	0e 94 77 05 	call	0xaee	; 0xaee <Timer0_Intialization>
}
 8f0:	08 95       	ret

000008f2 <Reset_time>:
}
*/
//}
void Reset_time(void)
{  
	t=0;
 8f2:	10 92 cd 01 	sts	0x01CD, r1
	 Buzzer_On;
 8f6:	ae 9a       	sbi	0x15, 6	; 21
 8f8:	8f e4       	ldi	r24, 0x4F	; 79
 8fa:	93 ec       	ldi	r25, 0xC3	; 195
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	f1 f7       	brne	.-4      	; 0x8fc <Reset_time+0xa>
 900:	00 c0       	rjmp	.+0      	; 0x902 <Reset_time+0x10>
 902:	00 00       	nop
  _delay_ms(200);
  Buzzer_Off;
 904:	ae 98       	cbi	0x15, 6	; 21
	GO_LOC(2,3);
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	63 e0       	ldi	r22, 0x03	; 3
 90a:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
	SEND_STRING("timer canseled");
 90e:	8b e8       	ldi	r24, 0x8B	; 139
 910:	91 e0       	ldi	r25, 0x01	; 1
 912:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 916:	8f e9       	ldi	r24, 0x9F	; 159
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	a1 e0       	ldi	r26, 0x01	; 1
 91c:	81 50       	subi	r24, 0x01	; 1
 91e:	90 40       	sbci	r25, 0x00	; 0
 920:	a0 40       	sbci	r26, 0x00	; 0
 922:	e1 f7       	brne	.-8      	; 0x91c <Reset_time+0x2a>
 924:	00 c0       	rjmp	.+0      	; 0x926 <Reset_time+0x34>
 926:	00 00       	nop
    _delay_ms(500);
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
	SEND_STRING("timer");
 92e:	8a e9       	ldi	r24, 0x9A	; 154
 930:	91 e0       	ldi	r25, 0x01	; 1
 932:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
	//GO_LOC(1,6);
	SEND_STRING(" 00:00 ");
 936:	80 ea       	ldi	r24, 0xA0	; 160
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
	Arr_Time[0]=0;
 93e:	10 92 c9 01 	sts	0x01C9, r1
	Arr_Time[1]=0;
 942:	10 92 ca 01 	sts	0x01CA, r1
	Arr_Time[2]=0;
 946:	10 92 cb 01 	sts	0x01CB, r1
	Arr_Time[3]=0;
 94a:	10 92 cc 01 	sts	0x01CC, r1
	GO_LOC(1,7);
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	67 e0       	ldi	r22, 0x07	; 7
 952:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
}
 956:	08 95       	ret

00000958 <Remaning_Time>:

void Remaning_Time(void)
{
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
	      
		         Arr_Time[0]=(Num_Total_Sec/600);  
 95c:	80 91 d6 01 	lds	r24, 0x01D6
 960:	90 91 d7 01 	lds	r25, 0x01D7
 964:	28 e5       	ldi	r18, 0x58	; 88
 966:	32 e0       	ldi	r19, 0x02	; 2
 968:	b9 01       	movw	r22, r18
 96a:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 96e:	60 93 c9 01 	sts	0x01C9, r22
				 Arr_Time[1]=((Num_Total_Sec % 600)/60); 
 972:	80 91 d6 01 	lds	r24, 0x01D6
 976:	90 91 d7 01 	lds	r25, 0x01D7
 97a:	b9 01       	movw	r22, r18
 97c:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 980:	ec e3       	ldi	r30, 0x3C	; 60
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	bf 01       	movw	r22, r30
 986:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 98a:	60 93 ca 01 	sts	0x01CA, r22
				 Arr_Time[2]=((((Num_Total_Sec % 600)%60)/10));  
 98e:	80 91 d6 01 	lds	r24, 0x01D6
 992:	90 91 d7 01 	lds	r25, 0x01D7
 996:	b9 01       	movw	r22, r18
 998:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 99c:	bf 01       	movw	r22, r30
 99e:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 9a2:	ca e0       	ldi	r28, 0x0A	; 10
 9a4:	d0 e0       	ldi	r29, 0x00	; 0
 9a6:	be 01       	movw	r22, r28
 9a8:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 9ac:	60 93 cb 01 	sts	0x01CB, r22
				 Arr_Time[3]=(((Num_Total_Sec % 600)%60)%10);
 9b0:	80 91 d6 01 	lds	r24, 0x01D6
 9b4:	90 91 d7 01 	lds	r25, 0x01D7
 9b8:	b9 01       	movw	r22, r18
 9ba:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 9be:	bf 01       	movw	r22, r30
 9c0:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 9c4:	be 01       	movw	r22, r28
 9c6:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 9ca:	80 93 cc 01 	sts	0x01CC, r24
				      GO_LOC(2,7);    
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	67 e0       	ldi	r22, 0x07	; 7
 9d2:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			      SEND_DATE(Arr_Time[0]+48);
 9d6:	80 91 c9 01 	lds	r24, 0x01C9
 9da:	80 5d       	subi	r24, 0xD0	; 208
 9dc:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
				  SEND_DATE(Arr_Time[1]+48);
 9e0:	80 91 ca 01 	lds	r24, 0x01CA
 9e4:	80 5d       	subi	r24, 0xD0	; 208
 9e6:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
				  SEND_DATE(':');
 9ea:	8a e3       	ldi	r24, 0x3A	; 58
 9ec:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
				  SEND_DATE(Arr_Time[2]+48);
 9f0:	80 91 cb 01 	lds	r24, 0x01CB
 9f4:	80 5d       	subi	r24, 0xD0	; 208
 9f6:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
				  SEND_DATE(Arr_Time[3]+48);
 9fa:	80 91 cc 01 	lds	r24, 0x01CC
 9fe:	80 5d       	subi	r24, 0xD0	; 208
 a00:	0e 94 88 03 	call	0x710	; 0x710 <SEND_DATE>
}
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

00000a0a <MIcrowave_Finish_task>:
void MIcrowave_Finish_task(void)
{
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
	              cli();   //mask all interupt globaally
 a0e:	f8 94       	cli
				  TCCR0=0x00;
 a10:	13 be       	out	0x33, r1	; 51
				  flag=0;
 a12:	10 92 bf 01 	sts	0x01BF, r1
			    GO_LOC(2,1);
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			    SEND_STRING("      ");	   
 a1e:	88 ea       	ldi	r24, 0xA8	; 168
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
		       SEND_STRING("00:00 ");
 a26:	8f ea       	ldi	r24, 0xAF	; 175
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
				 Stop_Output();
 a2e:	0e 94 2f 04 	call	0x85e	; 0x85e <Stop_Output>
				  Buzzer_On;
 a32:	ae 9a       	sbi	0x15, 6	; 21
 a34:	8f e5       	ldi	r24, 0x5F	; 95
 a36:	9a ee       	ldi	r25, 0xEA	; 234
 a38:	a0 e0       	ldi	r26, 0x00	; 0
 a3a:	81 50       	subi	r24, 0x01	; 1
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	a0 40       	sbci	r26, 0x00	; 0
 a40:	e1 f7       	brne	.-8      	; 0xa3a <MIcrowave_Finish_task+0x30>
 a42:	00 c0       	rjmp	.+0      	; 0xa44 <MIcrowave_Finish_task+0x3a>
 a44:	00 00       	nop
				  _delay_ms(300);
				  Buzzer_Off;
 a46:	ae 98       	cbi	0x15, 6	; 21
				  SEND_COMND(0x01);
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
               	GO_LOC(3,1);
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	61 e0       	ldi	r22, 0x01	; 1
 a52:	0e 94 9d 03 	call	0x73a	; 0x73a <GO_LOC>
			    SEND_STRING("welldone");
 a56:	86 eb       	ldi	r24, 0xB6	; 182
 a58:	91 e0       	ldi	r25, 0x01	; 1
 a5a:	0e 94 8e 03 	call	0x71c	; 0x71c <SEND_STRING>
 a5e:	c6 e0       	ldi	r28, 0x06	; 6
 a60:	d0 e0       	ldi	r29, 0x00	; 0
					for (int j=0;j<=5;j++)
               	{
		          SEND_COMND(0x1C);
 a62:	8c e1       	ldi	r24, 0x1C	; 28
 a64:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEND_COMND>
 a68:	ab e4       	ldi	r26, 0x4B	; 75
 a6a:	bd e1       	ldi	r27, 0x1D	; 29
 a6c:	11 97       	sbiw	r26, 0x01	; 1
 a6e:	f1 f7       	brne	.-4      	; 0xa6c <MIcrowave_Finish_task+0x62>
 a70:	00 c0       	rjmp	.+0      	; 0xa72 <MIcrowave_Finish_task+0x68>
 a72:	00 00       	nop
 a74:	21 97       	sbiw	r28, 0x01	; 1
				  _delay_ms(300);
				  Buzzer_Off;
				  SEND_COMND(0x01);
               	GO_LOC(3,1);
			    SEND_STRING("welldone");
					for (int j=0;j<=5;j++)
 a76:	a9 f7       	brne	.-22     	; 0xa62 <MIcrowave_Finish_task+0x58>
               	{
		          SEND_COMND(0x1C);
	             	_delay_ms(30); 
             	}
				
}
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	08 95       	ret

00000a7e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	2f 93       	push	r18
 a8a:	3f 93       	push	r19
 a8c:	4f 93       	push	r20
 a8e:	5f 93       	push	r21
 a90:	6f 93       	push	r22
 a92:	7f 93       	push	r23
 a94:	8f 93       	push	r24
 a96:	9f 93       	push	r25
 a98:	af 93       	push	r26
 a9a:	bf 93       	push	r27
 a9c:	ef 93       	push	r30
 a9e:	ff 93       	push	r31
	TCNT0=165;
 aa0:	85 ea       	ldi	r24, 0xA5	; 165
 aa2:	82 bf       	out	0x32, r24	; 50
     Num_Total_Sec--;
 aa4:	80 91 d6 01 	lds	r24, 0x01D6
 aa8:	90 91 d7 01 	lds	r25, 0x01D7
 aac:	01 97       	sbiw	r24, 0x01	; 1
 aae:	90 93 d7 01 	sts	0x01D7, r25
 ab2:	80 93 d6 01 	sts	0x01D6, r24
	if (Num_Total_Sec !=0)
 ab6:	80 91 d6 01 	lds	r24, 0x01D6
 aba:	90 91 d7 01 	lds	r25, 0x01D7
 abe:	00 97       	sbiw	r24, 0x00	; 0
 ac0:	19 f0       	breq	.+6      	; 0xac8 <__vector_11+0x4a>
	{
		 Remaning_Time();
 ac2:	0e 94 ac 04 	call	0x958	; 0x958 <Remaning_Time>
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__vector_11+0x4e>
	}
	else
	{
		MIcrowave_Finish_task();
 ac8:	0e 94 05 05 	call	0xa0a	; 0xa0a <MIcrowave_Finish_task>
	}
	
 acc:	ff 91       	pop	r31
 ace:	ef 91       	pop	r30
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	0f 90       	pop	r0
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	0f 90       	pop	r0
 aea:	1f 90       	pop	r1
 aec:	18 95       	reti

00000aee <Timer0_Intialization>:
 */ 
#include "TIMER0.h"

void Timer0_Intialization(void)
{
	sei();
 aee:	78 94       	sei
	TCNT0=156;
 af0:	8c e9       	ldi	r24, 0x9C	; 156
 af2:	82 bf       	out	0x32, r24	; 50
	TCCR0=0x01;
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	83 bf       	out	0x33, r24	; 51
//	TIMSK |=(1<<TOIE0);
 af8:	08 95       	ret

00000afa <__udivmodhi4>:
 afa:	aa 1b       	sub	r26, r26
 afc:	bb 1b       	sub	r27, r27
 afe:	51 e1       	ldi	r21, 0x11	; 17
 b00:	07 c0       	rjmp	.+14     	; 0xb10 <__udivmodhi4_ep>

00000b02 <__udivmodhi4_loop>:
 b02:	aa 1f       	adc	r26, r26
 b04:	bb 1f       	adc	r27, r27
 b06:	a6 17       	cp	r26, r22
 b08:	b7 07       	cpc	r27, r23
 b0a:	10 f0       	brcs	.+4      	; 0xb10 <__udivmodhi4_ep>
 b0c:	a6 1b       	sub	r26, r22
 b0e:	b7 0b       	sbc	r27, r23

00000b10 <__udivmodhi4_ep>:
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	5a 95       	dec	r21
 b16:	a9 f7       	brne	.-22     	; 0xb02 <__udivmodhi4_loop>
 b18:	80 95       	com	r24
 b1a:	90 95       	com	r25
 b1c:	bc 01       	movw	r22, r24
 b1e:	cd 01       	movw	r24, r26
 b20:	08 95       	ret

00000b22 <itoa>:
 b22:	fb 01       	movw	r30, r22
 b24:	9f 01       	movw	r18, r30
 b26:	e8 94       	clt
 b28:	42 30       	cpi	r20, 0x02	; 2
 b2a:	c4 f0       	brlt	.+48     	; 0xb5c <itoa+0x3a>
 b2c:	45 32       	cpi	r20, 0x25	; 37
 b2e:	b4 f4       	brge	.+44     	; 0xb5c <itoa+0x3a>
 b30:	4a 30       	cpi	r20, 0x0A	; 10
 b32:	29 f4       	brne	.+10     	; 0xb3e <itoa+0x1c>
 b34:	97 fb       	bst	r25, 7
 b36:	1e f4       	brtc	.+6      	; 0xb3e <itoa+0x1c>
 b38:	90 95       	com	r25
 b3a:	81 95       	neg	r24
 b3c:	9f 4f       	sbci	r25, 0xFF	; 255
 b3e:	64 2f       	mov	r22, r20
 b40:	77 27       	eor	r23, r23
 b42:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 b46:	80 5d       	subi	r24, 0xD0	; 208
 b48:	8a 33       	cpi	r24, 0x3A	; 58
 b4a:	0c f0       	brlt	.+2      	; 0xb4e <itoa+0x2c>
 b4c:	89 5d       	subi	r24, 0xD9	; 217
 b4e:	81 93       	st	Z+, r24
 b50:	cb 01       	movw	r24, r22
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	a1 f7       	brne	.-24     	; 0xb3e <itoa+0x1c>
 b56:	16 f4       	brtc	.+4      	; 0xb5c <itoa+0x3a>
 b58:	5d e2       	ldi	r21, 0x2D	; 45
 b5a:	51 93       	st	Z+, r21
 b5c:	10 82       	st	Z, r1
 b5e:	c9 01       	movw	r24, r18
 b60:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <strrev>

00000b64 <strrev>:
 b64:	dc 01       	movw	r26, r24
 b66:	fc 01       	movw	r30, r24
 b68:	67 2f       	mov	r22, r23
 b6a:	71 91       	ld	r23, Z+
 b6c:	77 23       	and	r23, r23
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <strrev+0x4>
 b70:	32 97       	sbiw	r30, 0x02	; 2
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <strrev+0x18>
 b74:	7c 91       	ld	r23, X
 b76:	6d 93       	st	X+, r22
 b78:	70 83       	st	Z, r23
 b7a:	62 91       	ld	r22, -Z
 b7c:	ae 17       	cp	r26, r30
 b7e:	bf 07       	cpc	r27, r31
 b80:	c8 f3       	brcs	.-14     	; 0xb74 <strrev+0x10>
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
